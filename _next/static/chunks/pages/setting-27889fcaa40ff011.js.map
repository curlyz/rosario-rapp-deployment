{"version":3,"file":"static/chunks/pages/setting-27889fcaa40ff011.js","mappings":"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","sources":["webpack://_N_E/?452a","webpack://_N_E/./src/components/config_Flowmeter.tsx","webpack://_N_E/./src/components/config_Grinder.tsx","webpack://_N_E/./src/components/ui/card.tsx","webpack://_N_E/./src/components/config_PID.tsx","webpack://_N_E/./src/pages/setting.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/setting\",\n      function () {\n        return require(\"private-next-pages/setting.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/setting\"])\n      });\n    }\n  ","\"use client\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Inset } from \"@buildo/bento-design-system\";\n\nexport const FlowmeterConfigurationComponents = ({\n  index,\n}: {\n  index: number;\n}) => {\n  const {} = useDeviceContext();\n\n  return (\n    <Inset space={4}>\n      <div className=\"flex h-fit  w-fit flex-grow flex-col items-center space-y-3 rounded-xl border p-4\">\n        <h1 className=\"text-4xl text-white\">{2}</h1>\n        <h1 className=\"text-zinc-100\">grasm</h1>\n      </div>\n    </Inset>\n  );\n};\n","\"use client\";\n\nimport {\n  Button,\n  Column,\n  Columns,\n  NumberField,\n  SelectField,\n  TextField,\n} from \"@buildo/bento-design-system\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { produce } from \"immer\";\nimport { FaGear } from \"react-icons/fa6\";\nimport { MdDelete } from \"react-icons/md\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nexport const GrinderSettingComponent = ({\n  key,\n  index,\n}: {\n  key: number;\n  index: number;\n}) => {\n  const { grinderSettings, setGrinderSettings } = useDeviceContext();\n  console.log(\"Grinder/ create \", key);\n\n  return (\n    <div className=\"flex flex-col  space-y-4 rounded-xl bg-white p-4\">\n      <TextField\n        name=\"ingredient\"\n        label=\"Ingredient\"\n        placeholder=\"What is the coffee bean ?\"\n        value={grinderSettings[index].name}\n        onChange={(e: string) => {\n          setGrinderSettings(\n            produce(grinderSettings, (draft) => {\n              draft[index].name = e;\n            }),\n          );\n        }}\n      />\n\n      <div className=\"flex flex-grow flex-row justify-stretch space-x-4\">\n        <Columns space={8}>\n          <Column width=\"4/5\">\n            <SelectField\n              value={grinderSettings[index].connectionType}\n              onChange={(e) => {\n                setGrinderSettings(\n                  produce(grinderSettings, (draft) => {\n                    draft[index].connectionType = e as \"Wire\" | \"Bluetooth\";\n                  }),\n                );\n              }}\n              name=\"connectionType\"\n              label=\"Connection\"\n              placeholder=\"How is the grinder connected ?\"\n              options={[\n                {\n                  value: \"wire\",\n                  label: \"Wire\",\n                  kind: \"two-line\",\n                  secondLine: \"Direct wiring using the PID port\",\n                },\n                {\n                  value: \"ble\",\n                  label: \"Bluetooth\",\n                  kind: \"two-line\",\n                  secondLine: \"Pair to a Bluetooth scale\",\n                },\n              ]}\n            />\n          </Column>\n          <Column width=\"1/5\">\n            <NumberField\n              name=\"ID\"\n              value={grinderSettings[index].connectionId}\n              onChange={(e: number) => {\n                setGrinderSettings(\n                  produce(grinderSettings, (draft) => {\n                    draft[index].connectionId = e;\n                  }),\n                );\n              }}\n              label=\"ID\"\n            />\n          </Column>\n        </Columns>\n      </div>\n\n      <div className=\"my-4 flex flex-row space-x-4\">\n        <Button\n          label=\"Calibrate\"\n          onPress={() => {}}\n          hierarchy=\"primary\"\n          kind=\"outline\"\n          icon={() => <FaGear />}\n        />\n        <Button\n          label=\"Test\"\n          onPress={() => {}}\n          hierarchy=\"primary\"\n          kind=\"outline\"\n          icon={() => <TbCircuitPushbutton />}\n        />\n        <Button\n          label=\"Remove\"\n          onPress={() => {}}\n          hierarchy=\"danger\"\n          kind=\"outline\"\n          icon={() => <MdDelete />}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","import { useEffect, useState } from \"react\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button, SliderField } from \"@buildo/bento-design-system\";\nimport { Divider } from \"@nextui-org/react\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart, Switch } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\n\nexport const PidConfigurationComponents = ({ index }: { index: number }) => {\n  const { pidState, setPidState, pidDisplay } = useDeviceContext();\n  const { connected } = useDeviceContext();\n  const [chartData, setChartData] = useState(\n    new Array(100).fill({\n      temperature: 0,\n      power: 0,\n    })\n  );\n\n  useEffect(() => {\n    // when ever pid state change, we update the chart data because it has difference structure\n    // pidState[index].temperatureSamples\n    // pidState[index].powerSamples\n    // console.warn(\"draft\", pidDisplay[index]);\n    // if (pidDisplay[index].powerSamples == undefined) return;\n    // const draft: PidStatusParameter[] = [];\n    // for (var i = 0; i < pidDisplay[index].powerSamples.length; i++) {\n    //   draft.push({\n    //     power: pidDisplay[index].powerSamples[i],\n    //     temperature: pidDisplay[index].temperatureSamples[i],\n    //     target: pidState[index].targetTemperature,\n    //   });\n    // }\n    // setChartData(draft);\n  }, [pidDisplay, index, pidState]);\n\n  const SettingComponents = (\n    <>\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Temperature\"\n        value={pidState[index].targetTemperature}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].targetTemperature = e;\n            })\n          );\n        }}\n        minValue={30}\n        maxValue={200}\n        step={1}\n        disabled={!connected}\n      />\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Active Range\"\n        value={pidState[index].activeRange}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].activeRange = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={1}\n        disabled={!connected}\n      />\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Proportional\"\n        value={pidState[index].proportional}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].proportional = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"integral\"\n        value={pidState[index].integral}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].integral = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={1}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Derivative\"\n        value={pidState[index].derivative}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].derivative = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      />\n    </>\n  );\n\n  const [settingToggle, setSettingToggle] = useState(false);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n  const SettingButtons = (\n    <div className=\"flex flex-wrap justify-center space-x-1 space-y-1 mb-4\">\n      <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90%\"}\n        size=\"small\"\n        icon={() => <ImPower />}\n      ></Button>\n      <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90*C\"}\n        size=\"small\"\n        icon={() => <FaTemperatureHigh />}\n      ></Button>\n\n      <Button\n        onPress={() => {}}\n        hierarchy=\"primary\"\n        kind=\"outline\"\n        label=\"Test\"\n        size=\"small\"\n        icon={() => <TbCircuitPushbutton />}\n      ></Button>\n      <Button\n        onPress={() => {\n          setPidState(produce(pidState, draft => {\n            {\n              draft[index].targetTemperature = 110;\n              draft[index].activeRange = 2;\n              draft[index].proportional = 3.2;\n              draft[index].integral = 0.2;\n              draft[index].derivative = 5;\n            }\n          }))\n        }}\n        hierarchy=\"danger\"\n        kind=\"outline\"\n        size=\"small\"\n        label=\"Reset\"\n        icon={() => <RxReset />}\n      ></Button>\n    </div>\n  );\n\n  return (\n    <Card className=\"w-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between\">\n          <CardTitle>Channel {index + 1}</CardTitle>\n          <Switch\n            value={pidState[index].isActive}\n            onChange={(e: boolean) => {\n              setPidState(\n                produce(pidState, (draft) => {\n                  draft[index].isActive = e;\n                }),\n              );\n            }}\n            // disabled={!connected}\n            label=\"Active\"\n          />\n        </div>\n        <Divider></Divider>\n\n        <CardDescription>\n          {pidState[index].isActive ? (\n            <>\n              <Card className=\"h-40 bg-white\">\n                <LineChart\n                  hideLegend={false}\n                  hideXAxis={true}\n                  dataKey=\"name\"\n                  categories={[\"temperature\", \"power\", \"target\"]}\n                  disableAnimation={true}\n                  hideYAxis={true}\n                  hideTooltip={false}\n                  data={chartData}\n                />{\" \"}\n              </Card>\n            </>\n          ) : (\n            <>This PID channel is currently disabled</>\n          )}\n        </CardDescription>\n      </CardHeader>\n      {pidState[index].isActive ? (\n        <>\n          <CardContent>\n            {settingToggle ? (\n              <>\n                {SettingButtons}\n\n                {/* <ProgressBar\n                  kind=\"continuous\"\n                  label=\"Power\"\n                  value={pidDisplay[index].currentPower}\n                  maxValue={100}\n                />\n                <Spacer />\n                <Progress\n                  label=\"Temperature\"\n                  size=\"md\"\n                  showValueLabel={true}\n                  valueLabel=\"C\"\n                  color=\"success\"\n                  isStriped\n                  value={pidDisplay[index].currentTemperature}\n                  maxValue={200}\n                  isDisabled={!pidState[index].isActive}\n                />\n */}\n                {SettingComponents}\n              </>\n            ) : null}\n          </CardContent>\n          <CardFooter onClick={toggleSettingPanel} className=\"justify-center\">\n            {settingToggle ? <MdExpandLess /> : <MdExpandMore />}\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n\n  // return (\n  //   <Card className='my-4 w-full'>\n  //     <CardHeader className='flex justify-between gap-3'>\n  //       {/* <Image\n  //         alt='nextui logo'\n  //         height={40}\n  //         radius='sm'\n  //         src='https://avatars.githubusercontent.com/u/86160567?s=200&v=4'\n  //         width={40}\n  //       /> */}\n  //       <CircularProgress />\n  //       <div className='flex w-full justify-center'>\n  //         <div className='flex flex-col items-center'>\n  //           <p className='text-xl'>PID - Channel {index}</p>\n  //           {/* <p className='text-small text-default-500'>boiling ...</p> */}\n  //         </div>\n  //       </div>\n\n  //     </CardHeader>\n  //     <Divider />\n  //     <CardBody>\n  //       <Divider />\n  //       <ul className='w-full'>\n  //       </ul>\n  //     </CardBody>\n\n  //     <Divider />\n  //     <CardFooter>\n  //       {/* <Link\n  //         isExternal\n  //         showAnchorIcon\n  //         href='https://github.com/nextui-org/nextui'\n  //       >\n  //         Visit source code on GitHub.\n  //       </Link> */}\n  //       <Button className='primary w-full'>Calibrate</Button>\n  //     </CardFooter>\n  //   </Card>\n  // )\n};\n","\"use client\";\n\nimport { Body, Inset, Modal } from \"@buildo/bento-design-system\";\nimport { FaDroplet, FaTemperatureHigh } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\n\nimport { FlowmeterConfigurationComponents } from \"@/components/config_Flowmeter\";\nimport { GrinderSettingComponent } from \"@/components/config_Grinder\";\nimport { PidConfigurationComponents } from \"@/components/config_PID\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Card, CardBody, CardFooter, CardHeader } from \"@nextui-org/react\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  MdKeyboardArrowDown,\n  MdKeyboardArrowRight,\n  MdKeyboardArrowUp,\n} from \"react-icons/md\";\nimport Layout from \"./layout\";\n\nimport { useTranslation } from \"next-export-i18n\";\n\nconst CalibrateButton = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <button\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick();\n      }}\n      className=\"flex h-8 w-fit items-center justify-center rounded-xl border-2 border-white p-4 text-white opacity-20\"\n    >\n      Calibrate\n    </button>\n  );\n};\n\nconst PidSettings = () => {\n  const { t } = useTranslation();\n\n  const [expanded, setExpanded] = useState(false);\n  const [isOpen, setModelOpen] = useState(false);\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  return (\n    <Card\n      ref={cardRef}\n      className={\n        \"w-full max-w-2xl transform bg-gradient-to-r from-purple-600 to-red-600 transition duration-500 hover:scale-105\"\n      }\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaTemperatureHigh className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Heater\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            <PidConfigurationComponents index={0} />\n            <PidConfigurationComponents index={1} />\n            <PidConfigurationComponents index={2} />\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n\n      {isOpen && (\n        <Modal\n          title=\"Calibrate flowmeter\"\n          size=\"small\"\n          onClose={() => setModelOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => setModelOpen(false),\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setModelOpen(false),\n          }}\n          autoFocus={false}\n        >\n          <Inset space={4}>\n            <Body size=\"medium\">Content</Body>\n          </Inset>\n        </Modal>\n      )}\n    </Card>\n  );\n};\n\nconst FlowmeterSettings = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"my-4 w-full max-w-2xl transform bg-gradient-to-r from-blue-600 to-green-600 transition duration-500 hover:scale-105\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaDroplet className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">Flowmeter</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <div className=\"flex w-full flex-grow flex-row items-center justify-evenly space-x-4 py-4\">\n            <FlowmeterConfigurationComponents index={0} />\n            <FlowmeterConfigurationComponents index={1} />\n            <FlowmeterConfigurationComponents index={2} />\n          </div>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\nconst GrinderSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-orange-600 to-yellow-600 transition duration-500 hover:scale-105\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <GiManualMeatGrinder className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">Grinder</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nexport const SettingsPage = () => {\n  return (\n    <Layout>\n      <div className=\" flex flex-col items-center  p-8\">\n        <PidSettings />\n        <FlowmeterSettings />\n        <GrinderSettings />\n      </div>\n    </Layout>\n  );\n};\n\nexport default SettingsPage;  \n"],"names":["window","__NEXT_P","push","FlowmeterConfigurationComponents","index","useDeviceContext","Inset","space","div","className","h1","GrinderSettingComponent","key","grinderSettings","setGrinderSettings","console","log","TextField","name","label","placeholder","value","onChange","e","produce","draft","Columns","Column","width","SelectField","connectionType","options","kind","secondLine","NumberField","connectionId","Button","onPress","hierarchy","icon","FaGear","TbCircuitPushbutton","MdDelete","Card","React","ref","props","cn","displayName","CardHeader","CardTitle","h3","CardDescription","p","CardContent","CardFooter","PidConfigurationComponents","pidState","setPidState","pidDisplay","connected","chartData","setChartData","useState","Array","fill","temperature","power","useEffect","SettingComponents","SliderField","type","targetTemperature","minValue","maxValue","step","disabled","activeRange","proportional","integral","derivative","settingToggle","setSettingToggle","SettingButtons","size","ImPower","FaTemperatureHigh","RxReset","Switch","isActive","Divider","LineChart","hideLegend","hideXAxis","dataKey","categories","disableAnimation","hideYAxis","hideTooltip","data","onClick","MdExpandLess","MdExpandMore","PidSettings","t","useTranslation","expanded","setExpanded","isOpen","setModelOpen","toggleExpand","cardRef","useRef","current","navBarHeight","parseInt","getComputedStyle","document","documentElement","getPropertyValue","topPosition","getBoundingClientRect","top","scrollTo","behavior","h2","MdKeyboardArrowDown","MdKeyboardArrowRight","CardBody","MdKeyboardArrowUp","Modal","title","onClose","primaryAction","secondaryAction","autoFocus","Body","FlowmeterSettings","FaDroplet","GrinderSettings","locale","locales","defaultLocale","useRouter","GiManualMeatGrinder","map","item","SettingsPage","Layout"],"sourceRoot":""}