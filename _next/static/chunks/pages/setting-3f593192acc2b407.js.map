{"version":3,"file":"static/chunks/pages/setting-3f593192acc2b407.js","mappings":"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","sources":["webpack://_N_E/?452a","webpack://_N_E/./src/components/ui/card.tsx","webpack://_N_E/./src/components/config_Flowmeter.tsx","webpack://_N_E/./src/components/config_Grinder.tsx","webpack://_N_E/./src/components/config_PID.tsx","webpack://_N_E/./src/pages/setting.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/setting\",\n      function () {\n        return require(\"private-next-pages/setting.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/setting\"])\n      });\n    }\n  ","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { produce } from \"immer\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\n\nimport { Banner, Modal, SliderField, Stack } from \"@buildo/bento-design-system\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\nimport {\n  Switch,\n  Divider,\n  LineChart,\n  Button\n} from \"@buildo/bento-design-system\";\n\nimport {\n  FaTemperatureHigh,\n} from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore, MdSettings } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\n\n\n\nexport const FlowmeterConfigurationComponents = ({ index }: { index: number }) => {\n  const { connected , calibration, setCalibration} = useDeviceContext();\n\n  \n  const [chartData, setChartData] = useState(\n    new Array(100).fill({\n      temperature: 0,\n      power: 0,\n    })\n  );\n\n\n  const { t } = useTranslation()\n  const { flowmeterDisplay } = useDeviceContext()\n\n\n  const [isOpen, setIsOpen] = useState(false)\n  \n\n\n\n\n\n  const SettingComponents = (\n    <>\n    </>\n  );\n\n  const [settingToggle, setSettingToggle] = useState(true);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n\n  const [real, setReal] = useState(flowmeterDisplay[index].flowCount);\n  const [maxValue, setMaxValue] = useState(1000)\n\n  useEffect(() => {\n    setReal(flowmeterDisplay[index].flowCount)\n\n  }, [flowmeterDisplay, index])\n\n\n  function handleCalibrate() {\n    if (real == 0) return\n    setMaxValue(Math.max(real * 2, 200))\n\n    setIsOpen(true)\n  }\n  function updateFlowmeterCalibration(e: number) {\n\n  }\n\n  function handleUpdateCalibration() {\n    var e = real\n    var newCalibration = (e / flowmeterDisplay[index].flowCount) * calibration.flowmeter[index]\n\n\n    console.log('calibration/ ', {\n      calibration,\n      suggestedValue: e,\n      previousValue: flowmeterDisplay[index].flowCount,\n      currentCalibration: calibration.flowmeter[index],\n      newCalibration: newCalibration\n    })\n\n    if (newCalibration < 0 || newCalibration > 1000) {\n      console.warn(\"Invalid calibation\")\n      return\n    }\n\n\n    setCalibration(produce(calibration, (draft) => {\n      draft.flowmeter[index] = newCalibration\n      return draft\n    }))\n\n  }\n\n  return (\n    <>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Calibrate flowmeter\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              handleUpdateCalibration()\n              // onChange(powe\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n\n\n            <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"This calibration process is to set the conversion between flowmeter pulses count with the actual total weight of water extracted, specify how much it is actually weight to update the conversion\")}\n              action={{\n                label: t(\"Learn more\"),\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n\n\n            <SliderField\n              type=\"single\"\n              name=\"value\"\n              label={t(\"Real weight (gram)\")}\n              value={real}\n              onChange={(e: number) => {\n                updateFlowmeterCalibration(e)\n                setReal(e)\n              }}\n              minValue={0}\n              maxValue={maxValue}\n              step={1}\n            />\n          </Stack>\n        </Modal>\n      )}\n\n      <Card className=\"w-auto m-4\">\n        <CardHeader>\n          <div className=\"flex justify-between\">\n            <CardTitle>{t('Group')} {index + 1}</CardTitle>\n            <Button\n              onPress={handleCalibrate}\n              hierarchy=\"secondary\"\n              kind=\"outline\"\n              label={t('Calibrate')}\n              size=\"small\"\n              icon={() => <MdSettings />}\n            />\n          </div>\n          <Divider></Divider>\n\n          <CardDescription>\n            <div className=\"h-16 bg-white flex flex-col justify-evenly space-y-4 mt-6\">\n              {/* <LineChart\n                  hideLegend={false}\n                  hideXAxis={true}\n                  dataKey=\"name\"\n                  categories={[\"temperature\", \"power\", \"target\"]}\n                  disableAnimation={true}\n                  hideYAxis={true}\n                  hideTooltip={false}\n                  data={chartData}\n                />{\" \"} */}\n              <div>\n                <h1>{t('Flowrate ')}</h1>\n                <h1 className=\"text-xl\">{flowmeterDisplay[index].flowRate} gram/s</h1>\n              </div>\n              <div>\n                <h1>{t('Weight')}</h1>\n                <h1 className=\"text-xl\">{flowmeterDisplay[index].flowCount} gram</h1>\n              </div>\n            </div>\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {settingToggle ? (\n            <>\n              {SettingComponents}\n            </>\n          ) : null}\n        </CardContent>\n\n      </Card>\n\n    </>\n  );\n};\n","\"use client\";\n\nimport {\n  Button,\n  Column,\n  Columns,\n  NumberField,\n  SelectField,\n  TextField,\n} from \"@buildo/bento-design-system\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { produce } from \"immer\";\nimport { FaGear } from \"react-icons/fa6\";\nimport { MdDelete } from \"react-icons/md\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nexport const GrinderSettingComponent = ({\n  key,\n  index,\n}: {\n  key: number;\n  index: number;\n}) => {\n  const { grinderSettings, setGrinderSettings } = useDeviceContext();\n  console.log(\"Grinder/ create \", key);\n\n  return (\n    <div className=\"flex flex-col  space-y-4 rounded-xl bg-white p-4\">\n      <TextField\n        name=\"ingredient\"\n        label=\"Ingredient\"\n        placeholder=\"What is the coffee bean ?\"\n        value={grinderSettings[index].name}\n        onChange={(e: string) => {\n          setGrinderSettings(\n            produce(grinderSettings, (draft) => {\n              draft[index].name = e;\n            }),\n          );\n        }}\n      />\n\n      <div className=\"flex flex-grow flex-row justify-stretch space-x-4\">\n        <Columns space={8}>\n          <Column width=\"4/5\">\n            <SelectField\n              value={grinderSettings[index].connectionType}\n              onChange={(e) => {\n                setGrinderSettings(\n                  produce(grinderSettings, (draft) => {\n                    draft[index].connectionType = e as \"Wire\" | \"Bluetooth\";\n                  }),\n                );\n              }}\n              name=\"connectionType\"\n              label=\"Connection\"\n              placeholder=\"How is the grinder connected ?\"\n              options={[\n                {\n                  value: \"wire\",\n                  label: \"Wire\",\n                  kind: \"two-line\",\n                  secondLine: \"Direct wiring using the PID port\",\n                },\n                {\n                  value: \"ble\",\n                  label: \"Bluetooth\",\n                  kind: \"two-line\",\n                  secondLine: \"Pair to a Bluetooth scale\",\n                },\n              ]}\n            />\n          </Column>\n          <Column width=\"1/5\">\n            <NumberField\n              name=\"ID\"\n              value={grinderSettings[index].connectionId}\n              onChange={(e: number) => {\n                setGrinderSettings(\n                  produce(grinderSettings, (draft) => {\n                    draft[index].connectionId = e;\n                  }),\n                );\n              }}\n              label=\"ID\"\n            />\n          </Column>\n        </Columns>\n      </div>\n\n      <div className=\"my-4 flex flex-row space-x-4\">\n        <Button\n          label=\"Calibrate\"\n          onPress={() => {}}\n          hierarchy=\"primary\"\n          kind=\"outline\"\n          icon={() => <FaGear />}\n        />\n        <Button\n          label=\"Test\"\n          onPress={() => {}}\n          hierarchy=\"primary\"\n          kind=\"outline\"\n          icon={() => <TbCircuitPushbutton />}\n        />\n        <Button\n          label=\"Remove\"\n          onPress={() => {}}\n          hierarchy=\"danger\"\n          kind=\"outline\"\n          icon={() => <MdDelete />}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button, SliderField } from \"@buildo/bento-design-system\";\nimport { Divider } from \"@nextui-org/react\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart, Switch } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\n\nexport const PidConfigurationComponents = ({ index }: { index: number }) => {\n  const { pidState, setPidState, pidDisplay } = useDeviceContext();\n  const { connected } = useDeviceContext();\n\n\n  const [chartData, setChartData] = useState(\n    new Array(100).fill({\n      temperature: 0,\n      power: 0,\n    })\n  );\n\n  useEffect(() => {\n    if (pidDisplay[index].powerSamples == undefined) return;\n    const draft: any[]= [];\n    for (var i = 0; i < pidDisplay[index].powerSamples.length; i++) {\n      draft.push({\n        power: pidDisplay[index].powerSamples[i],\n        temperature: Math.round(pidDisplay[index].temperatureSamples[i] * 10) / 10,\n        target: Math.round(pidState[index].targetTemperature * 10) / 10,\n      });\n    }\n    setChartData(draft);\n  }, [pidDisplay, index, pidState])\n\n  const { t } = useTranslation()\n  \n  useEffect(() => {\n    // when ever pid state change, we update the chart data because it has difference structure\n    // pidState[index].temperatureSamples\n    // pidState[index].powerSamples\n    // console.warn(\"draft\", pidDisplay[index]);\n    // if (pidDisplay[index].powerSamples == undefined) return;\n    // const draft: PidStatusParameter[] = [];\n    // for (var i = 0; i < pidDisplay[index].powerSamples.length; i++) {\n    //   draft.push({\n    //     power: pidDisplay[index].powerSamples[i],\n    //     temperature: pidDisplay[index].temperatureSamples[i],\n    //     target: pidState[index].targetTemperature,\n    //   });\n    // }\n    // setChartData(draft);\n  }, [pidDisplay, index, pidState]);\n\n  const SettingComponents = (\n    <>\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label={t(\"Temperature\")}\n        value={pidState[index].targetTemperature}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].targetTemperature = e;\n              return draft\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={200}\n        step={1}\n        disabled={!connected}\n      />\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label={t(\"Active Range\")}\n        value={pidState[index].activeRange}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].activeRange = e;\n              return draft\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={1}\n        disabled={!connected}\n      />\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Proportional\"\n        value={pidState[index].proportional}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].proportional = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"integral\"\n        value={pidState[index].integral}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].integral = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={1}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Derivative\"\n        value={pidState[index].derivative}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].derivative = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      />\n    </>\n  );\n\n  const [settingToggle, setSettingToggle] = useState(true);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n  const SettingButtons = (\n    <div className=\"flex flex-wrap justify-center space-x-1 space-y-1 mb-4\">\n      {/* <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90%\"}\n        size=\"small\"\n        icon={() => <ImPower />}\n      ></Button>\n      <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90*C\"}\n        size=\"small\"\n        icon={() => <FaTemperatureHigh />}\n      ></Button> */}\n    \n      <Button\n        onPress={() => {}}\n        hierarchy=\"primary\"\n        kind=\"outline\"\n        label=\"Test\"\n        size=\"small\"\n        icon={() => <TbCircuitPushbutton />}\n      ></Button>\n      <Button\n        onPress={() => {\n          setPidState(produce(pidState, draft => {\n            {\n              draft[index].targetTemperature = 110;\n              draft[index].activeRange = 2;\n              draft[index].proportional = 3.2;\n              draft[index].integral = 0.2;\n              draft[index].derivative = 5;\n            }\n          }))\n        }}\n        hierarchy=\"danger\"\n        kind=\"outline\"\n        size=\"small\"\n        label=\"Reset\"\n        icon={() => <RxReset />}\n      ></Button>\n    </div>\n  );\n\n  return (\n    <Card className=\"w-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between\">\n          <CardTitle>{t('Channel')} {index + 1}</CardTitle>\n          <Switch\n            value={pidState[index].isActive}\n            onChange={(e: boolean) => {\n              setPidState(\n                produce(pidState, (draft) => {\n                  draft[index].isActive = e;\n                  return draft\n                }),\n              );\n            }}\n            // disabled={!connected}\n            label={t('Active')}\n          />\n        </div>\n        <Divider></Divider>\n\n        <CardDescription>\n          {pidState[index].isActive ? (\n            <>\n              <Card className=\"h-40 bg-white\">\n                <LineChart\n                  hideLegend={false}\n                  hideXAxis={true}\n                  dataKey=\"name\"\n                  categories={[\"temperature\", \"power\", \"target\"]}\n                  disableAnimation={true}\n                  hideYAxis={true}\n                  hideTooltip={false}\n                  data={chartData}\n                />{\" \"}\n              </Card>\n            </>\n          ) : (\n              <>{ t('This PID channel is currently disabled')}</>\n          )}\n        </CardDescription>\n      </CardHeader>\n      {pidState[index].isActive ? (\n        <>\n          <CardContent>\n            {settingToggle ? (\n              <>\n                {SettingButtons}\n\n                {/* <ProgressBar\n                  kind=\"continuous\"\n                  label=\"Power\"\n                  value={pidDisplay[index].currentPower}\n                  maxValue={100}\n                />\n                <Spacer />\n                <Progress\n                  label=\"Temperature\"\n                  size=\"md\"\n                  showValueLabel={true}\n                  valueLabel=\"C\"\n                  color=\"success\"\n                  isStriped\n                  value={pidDisplay[index].currentTemperature}\n                  maxValue={200}\n                  isDisabled={!pidState[index].isActive}\n                />\n */}\n                {SettingComponents}\n              </>\n            ) : null}\n          </CardContent>\n          <CardFooter onClick={toggleSettingPanel} className=\"justify-center\">\n            {settingToggle ? <MdExpandLess /> : <MdExpandMore />}\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n\n  // return (\n  //   <Card className='my-4 w-full'>\n  //     <CardHeader className='flex justify-between gap-3'>\n  //       {/* <Image\n  //         alt='nextui logo'\n  //         height={40}\n  //         radius='sm'\n  //         src='https://avatars.githubusercontent.com/u/86160567?s=200&v=4'\n  //         width={40}\n  //       /> */}\n  //       <CircularProgress />\n  //       <div className='flex w-full justify-center'>\n  //         <div className='flex flex-col items-center'>\n  //           <p className='text-xl'>PID - Channel {index}</p>\n  //           {/* <p className='text-small text-default-500'>boiling ...</p> */}\n  //         </div>\n  //       </div>\n\n  //     </CardHeader>\n  //     <Divider />\n  //     <CardBody>\n  //       <Divider />\n  //       <ul className='w-full'>\n  //       </ul>\n  //     </CardBody>\n\n  //     <Divider />\n  //     <CardFooter>\n  //       {/* <Link\n  //         isExternal\n  //         showAnchorIcon\n  //         href='https://github.com/nextui-org/nextui'\n  //       >\n  //         Visit source code on GitHub.\n  //       </Link> */}\n  //       <Button className='primary w-full'>Calibrate</Button>\n  //     </CardFooter>\n  //   </Card>\n  // )\n};\n","\"use client\";\n\nimport { Body, Inset, Modal } from \"@buildo/bento-design-system\";\nimport { FaDroplet, FaTemperatureHigh } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\n\nimport { FlowmeterConfigurationComponents } from \"@/components/config_Flowmeter\";\nimport { GrinderSettingComponent } from \"@/components/config_Grinder\";\nimport { PidConfigurationComponents } from \"@/components/config_PID\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Card, CardBody, CardFooter, CardHeader } from \"@nextui-org/react\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  MdKeyboardArrowDown,\n  MdKeyboardArrowRight,\n  MdKeyboardArrowUp,\n} from \"react-icons/md\";\n\n\n\nimport { FaBalanceScale } from \"react-icons/fa\";\nimport { AiFillSound } from \"react-icons/ai\";\nimport { FaLightbulb } from \"react-icons/fa\";\nimport { RiKeyboardFill } from \"react-icons/ri\";\n\nimport Layout from \"./layout\";\n\nimport { useTranslation } from \"next-export-i18n\";\n\nconst CalibrateButton = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <button\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick();\n      }}\n      className=\"flex h-8 w-fit items-center justify-center rounded-xl border-2 border-white p-4 text-white opacity-20\"\n    >\n      Calibrate\n    </button>\n  );\n};\n\nconst PidSettings = () => {\n  const { t } = useTranslation();\n\n  const [expanded, setExpanded] = useState(false);\n  const [isOpen, setModelOpen] = useState(false);\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  return (\n    <Card\n      ref={cardRef}\n      className={\n        \"w-full max-w-2xl transform bg-gradient-to-r from-purple-600 to-red-600 transition duration-500 \"\n      }\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaTemperatureHigh className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Heater\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            <PidConfigurationComponents index={0} />\n            <PidConfigurationComponents index={1} />\n            <PidConfigurationComponents index={2} />\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n\n      {isOpen && (\n        <Modal\n          title=\"Calibrate flowmeter\"\n          size=\"small\"\n          onClose={() => setModelOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => setModelOpen(false),\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setModelOpen(false),\n          }}\n          autoFocus={false}\n        >\n          <Inset space={4}>\n            <Body size=\"medium\">Content</Body>\n          </Inset>\n        </Modal>\n      )}\n    </Card>\n  );\n};\n\nconst FlowmeterSettings = () => {\n  const [expanded, setExpanded] = useState(false);\n  const {t} = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-blue-600 to-green-600 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaDroplet className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Flowmeter\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <div className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            <FlowmeterConfigurationComponents index={0} />\n            <FlowmeterConfigurationComponents index={1} />\n            <FlowmeterConfigurationComponents index={2} />\n          </div>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\nconst GrinderSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n  const {t} = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-orange-600 to-yellow-600 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <GiManualMeatGrinder className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Grinder\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\n\nconst ScaleSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-yellow-600 to-orange-600 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaBalanceScale className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Scale\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\nconst SoundSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-teal-600 to-green-600 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <AiFillSound className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Sound\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nconst LightSetting = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-red-600  to-red-400 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaLightbulb className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Light\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\nconst KeyboardSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-blue-600  to-blue-400 transition duration-500 \"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <RiKeyboardFill className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Keyboard\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\n\nexport const SettingsPage = () => {\n  return (\n    <Layout>\n      <div className=\" flex flex-col items-center  p-8 space-y-4\">\n        <PidSettings />\n        <FlowmeterSettings />\n        <GrinderSettings />\n        <ScaleSettings />\n        <SoundSettings />\n        <LightSetting />\n        <KeyboardSettings/>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SettingsPage;  \n"],"names":["window","__NEXT_P","push","Card","React","ref","className","props","div","cn","displayName","CardHeader","CardTitle","h3","CardDescription","p","CardContent","CardFooter","FlowmeterConfigurationComponents","index","connected","calibration","setCalibration","useDeviceContext","chartData","setChartData","useState","Array","fill","temperature","power","t","useTranslation","flowmeterDisplay","isOpen","setIsOpen","SettingComponents","settingToggle","setSettingToggle","real","setReal","flowCount","maxValue","setMaxValue","useEffect","Modal","size","title","onClose","primaryAction","label","onPress","e","newCalibration","flowmeter","console","log","suggestedValue","previousValue","currentCalibration","warn","produce","draft","handleUpdateCalibration","secondaryAction","Stack","space","Banner","kind","description","action","open","SliderField","type","name","value","onChange","minValue","step","Button","Math","max","hierarchy","icon","MdSettings","Divider","h1","flowRate","GrinderSettingComponent","key","grinderSettings","setGrinderSettings","TextField","placeholder","Columns","Column","width","SelectField","connectionType","options","secondLine","NumberField","connectionId","FaGear","TbCircuitPushbutton","MdDelete","PidConfigurationComponents","pidState","setPidState","pidDisplay","undefined","powerSamples","i","length","round","temperatureSamples","target","targetTemperature","disabled","activeRange","proportional","integral","derivative","SettingButtons","RxReset","Switch","isActive","LineChart","hideLegend","hideXAxis","dataKey","categories","disableAnimation","hideYAxis","hideTooltip","data","onClick","MdExpandLess","MdExpandMore","PidSettings","expanded","setExpanded","setModelOpen","toggleExpand","cardRef","useRef","current","navBarHeight","parseInt","getComputedStyle","document","documentElement","getPropertyValue","getBoundingClientRect","top","FaTemperatureHigh","h2","MdKeyboardArrowDown","MdKeyboardArrowRight","CardBody","MdKeyboardArrowUp","autoFocus","Inset","Body","FlowmeterSettings","FaDroplet","GrinderSettings","locale","locales","defaultLocale","useRouter","GiManualMeatGrinder","map","item","ScaleSettings","FaBalanceScale","SoundSettings","AiFillSound","LightSetting","FaLightbulb","KeyboardSettings","RiKeyboardFill","SettingsPage","Layout"],"sourceRoot":""}