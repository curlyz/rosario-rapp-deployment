{"version":3,"file":"static/chunks/pages/index-8a2cdd4ea4d45e2a.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/util.ts","webpack://_N_E/./src/components/ui/moving-border.tsx","webpack://_N_E/./src/components/main_FormulaCard.tsx","webpack://_N_E/./src/pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}","\"use client\";\nimport React from \"react\";\nimport {\n    motion,\n    useAnimationFrame,\n    useMotionTemplate,\n    useMotionValue,\n    useTransform,\n} from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/util\";\n\nexport function Button({\n    borderRadius = \"1.75rem\",\n    children,\n    as: Component = \"button\",\n    containerClassName,\n    borderClassName,\n    duration,\n    className,\n    isRunning,\n    ...otherProps\n}: {\n    borderRadius?: string;\n    children: React.ReactNode;\n    as?: any;\n    containerClassName?: string;\n    borderClassName?: string;\n    duration?: number;\n        className?: string;\n        isRunning?: boolean;\n    [key: string]: any;\n}) {\n    return (\n        <Component\n            className={cn(\n                \"bg-transparent relative text-xl h-full w-full p-[3px] overflow-hidden \",\n                containerClassName\n            )}\n            style={{\n                borderRadius: borderRadius,\n            }}\n            {...otherProps}\n        >\n            <div\n                className=\"absolute inset-0\"\n                style={{ borderRadius: `calc(${borderRadius} * 0.96)` }}\n            >\n                <MovingBorder duration={duration} rx=\"30%\" ry=\"30%\">\n                    <div\n                        className={cn(\n                            \"h-20 w-20 opacity-[0.8]\",\n                            isRunning ? \"bg-[radial-gradient(var(--sky-500)_40%,transparent_60%)]\": \"\",\n                            borderClassName\n                        )}\n                    />\n                </MovingBorder>\n            </div>\n\n            <div\n                className={cn(\n                    \"relative bg-slate-900/[0.8] border border-slate-800 backdrop-blur-xl text-white flex items-center justify-center w-full h-full text-sm antialiased\",\n                    className\n                )}\n                style={{\n                    borderRadius: `calc(${borderRadius} * 0.96)`,\n                }}\n            >\n                {children}\n            </div>\n        </Component>\n    );\n}\n\nexport const MovingBorder = ({\n    children,\n    duration = 2000,\n    rx,\n    ry,\n    ...otherProps\n}: {\n    children: React.ReactNode;\n    duration?: number;\n    rx?: string;\n    ry?: string;\n    [key: string]: any;\n}) => {\n    const pathRef = useRef<any>();\n    const progress = useMotionValue<number>(0);\n\n    useAnimationFrame((time) => {\n        const length = pathRef.current?.getTotalLength();\n        if (length) {\n            const pxPerMillisecond = length / duration;\n            progress.set((time * pxPerMillisecond) % length);\n        }\n    });\n\n    const x = useTransform(\n        progress,\n        (val) => pathRef.current?.getPointAtLength(val).x\n    );\n    const y = useTransform(\n        progress,\n        (val) => pathRef.current?.getPointAtLength(val).y\n    );\n\n    const transform = useMotionTemplate`translateX(${x}px) translateY(${y}px) translateX(-50%) translateY(-50%)`;\n\n    return (\n        <>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                preserveAspectRatio=\"none\"\n                className=\"absolute h-full w-full\"\n                width=\"100%\"\n                height=\"100%\"\n                {...otherProps}\n            >\n                <rect\n                    fill=\"none\"\n                    width=\"100%\"\n                    height=\"100%\"\n                    rx={rx}\n                    ry={ry}\n                    ref={pathRef}\n                />\n            </svg>\n            <motion.div\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    display: \"inline-block\",\n                    transform,\n                }}\n            >\n                {children}\n            </motion.div>\n        </>\n    );\n};\n","\"use client\";\n\nimport { EnumFormulaType } from \"@/gateway/formula\";\n// import { Button, Card, CardFooter, Tooltip } from '@nextui-org/react';\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart } from \"@buildo/bento-design-system\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FiMove } from \"react-icons/fi\";\nimport { GiCoffeeBeans } from \"react-icons/gi\";\nimport { IoIosLeaf } from \"react-icons/io\";\nimport { MdCoffeeMaker } from \"react-icons/md\";\nimport { PiDotsThreeCircleVerticalThin } from \"react-icons/pi\";\nimport { FaStopCircle } from \"react-icons/fa\";\nimport { MovingBorder, Button } from \"./ui/moving-border\";\nimport { cn } from \"@/util\";\n\nexport default function ProfileCard({\n  formulaId,\n  onClickEdit,\n  onCancel,\n  onClick,\n}: {\n  formulaId: string;\n  onCancel: () => void;\n  onClick: () => void;\n  onClickEdit: () => void;\n}) {\n  //https://github.com/ccnmtl/juxtapose/blob/master/src/TrackElement.jsx#L83\n\n  const { draggable, progressReport, formulaFeedbacks, selectedFormulaId } = useDeviceContext();\n  const [height, setHeight] = useState(0);\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const { formulas, setFormulas, formulaUpdatedTimestamp } = useDeviceContext();\n\n\n  useEffect(() => {\n    if (elementRef.current) {\n      setHeight(elementRef.current.clientHeight);\n    }\n  }, []);\n\n  const [isRunning, setRunning] = useState(false);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const [formulaStartTimestamp, setFormulaStartTimestamp] = useState<number>(0);\n\n\n\n  // useEffect(() => {\n  //   console.log(\"update/ \", { formulaUpdatedTimestamp, formulaId, isRunning })\n  //   if (formulaUpdatedTimestamp === formulaId) {\n\n  //     clearTimeout(timeoutRef.current);\n  //     timeoutRef.current = setTimeout(() => {\n  //       setRunning(false);\n  //     }, 2000);\n\n  //     if (!isRunning) {\n  //       setFormulaStartTimestamp(new Date().getTime());\n  //     }\n  //     setRunning(true);\n  //   }\n  // }, [formulaUpdatedTimestamp, formulaId, isRunning]);\n\n\n  // useEffect(() => {\n    \n  //   if (formulaUpdatedTimestamp === formulaId) {\n  //     console.log(\"Update/ I'm formulaId, updated \", { formulaId, formulaUpdatedTimestamp })\n  //     setRunning(true);\n  //         clearTimeout(timeoutRef.current);\n  //         timeoutRef.current = setTimeout(() => {\n  //           setRunning(false);\n  //         }, 2000);\n\n  //     if (!isRunning) {\n  //       setFormulaStartTimestamp(new Date().getTime());\n  //     }\n  //   }\n  // }, [formulaUpdatedTimestamp, formulaId, isRunning])\n\n  useEffect(() => {\n    \n    const elapsed = new Date().getTime() - (formulaUpdatedTimestamp[formulaId] || 0)\n    // console.log(\"Update/  updated\", { formulaUpdatedTimestamp, formulaId, elapsed })\n    if (elapsed < 2000) {\n      // if recently updated, show progress\n      if (!isRunning) {\n        setFormulaStartTimestamp(new Date().getTime());\n      }\n      setRunning(true)\n\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = setTimeout(() => {\n        setRunning(false)\n      }, 2000)\n\n    }\n\n  }, [formulaUpdatedTimestamp, formulaId, isRunning])\n\n  const normalView = (\n    <>\n\n\n      <div className=\"absolute right-0 top-0 flex flex-col items-center justify-between\">\n        {draggable ? (\n          <>\n            <button\n              className=\"hover:opacity-50\"\n              onMouseDown={(e) => {\n                onClickEdit();\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              onTouchStart={(e) => {\n                onClickEdit();\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n            >\n              <PiDotsThreeCircleVerticalThin\n                size={32}\n                className=\"m-1 text-white \"\n              />\n            </button>\n\n            <button>\n              <FiMove size={20} className=\"drag-handle m-1 text-white\" />\n            </button>\n          </>\n        ) : (\n          <>\n            {isRunning ? (\n              <div className=\"m-1 opacity-20\">\n                <FaStopCircle size={32} className=\"m-1 text-white\" />\n              </div>\n            ) : (\n              <div>\n                {formulas[formulaId].formulaType ===\n                  EnumFormulaType.Espresso && (\n                    <GiCoffeeBeans size={32} className=\"m-1 text-white\" />\n                  )}\n                {formulas[formulaId].formulaType ===\n                  EnumFormulaType.Teapresso && (\n                    <IoIosLeaf size={32} className=\"m-1 text-white\" />\n                  )}\n                {formulas[formulaId].formulaType ===\n                  EnumFormulaType.PourOver && (\n                    <MdCoffeeMaker size={32} className=\"m-1 text-white\" />\n                  )}\n\n              </div>\n            )}\n\n\n          </>\n        )}\n      </div>\n\n\n      <h1 className=\"select-none truncate text-clip text-balance text-center text-xl text-white\">\n        {isRunning ? (\n          String(Math.round((new Date().getTime() - formulaStartTimestamp) / 1000 * 10) / 10) + \" s\"\n        ) : (formulas[formulaId].title)}\n      </h1>\n    </>\n  );\n\n  const progressView = (\n    <div className=\"first-letter absolute bottom-0  left-0 h-full w-full\">\n      <LineChart\n        height={height}\n        dataKey=\"name\"\n        categories={[\"flowrate\"]}\n        hideLegend={true}\n        hideXAxis={true}\n        hideYAxis={true}\n        data={[\n          ...Array.from({ length: 10 }, (_, index) => ({\n            name: `Point ${index + 1}`,\n            flowrate: Math.floor(Math.random() * 100),\n          })),\n        ]}\n      />{\" \"}\n    </div>\n  );\n\n  const main = (\n    <div\n      ref={elementRef}\n      // isFooterBlurred\n      // radius=\"lg\"\n\n\n      onMouseDown={(e) => {\n        onClick();\n        console.log(\"profile/ clicked\");\n      }}\n    >\n      {isRunning === true\n        ? progressView\n        : normalView}\n    </div>\n\n  )\n\n  return (\n    <Button\n      // duration={3333}\n      borderRadius=\"16px\"\n      isRunning={isRunning}\n      ref={elementRef}\n      // isFooterBlurred\n      // radius=\"lg\"\n      onMouseDown={(e) => {\n        console.log(\"profile/ clicked\");\n        if (isRunning) {\n          onCancel()\n        }\n        else {\n          onClick()\n        }\n      }}\n\n      className={\n        cn(\n          \"border flex h-full w-full transform flex-col items-center justify-center shadow-large cursor-pointer select-none transition-all duration-1000 ease-in-out hover:border-blue-500\",\n          formulas[formulaId].backdrop,\n\n          isRunning ? \" border-black\" : `border-white`,\n          isRunning ? \"animate-none\" : \"animate-none\",\n\n        )}\n\n    >\n      {normalView}\n    </Button>\n\n\n  );\n}\n","import ProfileCard from \"@/components/main_FormulaCard\";\nimport { EnumFormulaType, cancelFormulaClick } from \"@/gateway/formula\";\nimport { DisplayFormulaParam } from \"@/gateway/provider\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Button,\n  Modal,\n  Stack,\n  TextField,\n  Tiles,\n  useToast,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport {\n  Layouts,\n  Layout as RGLayout,\n  Responsive,\n  WidthProvider,\n} from \"react-grid-layout\";\nimport { uuid } from \"uuidv4\";\nimport Layout from \"./layout\";\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst espressoGradient = [\n  \"bg-gradient-to-br from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-bl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-tl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-br from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-bl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-tr from-yellow-900 via-red-600 to-yellow-500\",\n];\nconst teaGradients = [\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n];\n\nconst pourOverGradients = [\n  \"bg-gradient-to-b from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-b from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-l from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n];\n\n// function getRandomGradient(startColor: string, endColor: string) {\n//   const orientations = [\"to-r\", \"to-l\", \"to-b\", \"to-t\"];\n//   const randomOrientation =\n//     orientations[Math.floor(Math.random() * orientations.length)];\n\n//   const color = `bg-gradient-${randomOrientation} from-${startColor}-900 via-${startColor}-600 to-${endColor}-500`;\n//   // console.log('regnea', color)\n//   return color;\n// }\n\nfunction HomePage() {\n  // const [layout, setLayout] = useState<Layouts>({});\n  const [isLoaded, setLoaded] = useState(false);\n  const { formulas, setFormulas, addFormulaOpen, setAddFormulaOpen } =\n    useDeviceContext();\n  const { layout, setLayout } = useDeviceContext();\n\n  const router = useRouter();\n  const { showToast } = useToast();\n\n  const { registerFormulaClick, registerSelectedFormulaId } =\n    useDeviceContext();\n\n  async function addFormula() {\n    const formulaId = uuid();\n    var stagingSteps = []\n    var statingTitle = ''\n    var stagingBackdrop = ''\n    \n    // if staging formula name are list of number, then it's a share token\n    if (stagingFormulaName.match(/^[0-9]+$/) != null) {\n      // it's a share token\n      const request = await fetch(`https://api.anatalab.com/gateway/rosario/get_token/${stagingFormulaName}`)\n\n      const body = await request.json()\n      console.log(\"Formula is\", body.formulas)\n\n      setStagingFormulaName(body.formulas.title)\n      setFormulaType(body.formulas.formulaType)\n      stagingSteps = body.formulas.steps\n      statingTitle = body.formulas.title\n      stagingBackdrop = body.formulas.backdrop\n    }\n    else {\n      statingTitle = stagingFormulaName\n    }\n\n\n\n    setLayout(\n      produce(layout, (draft) => {\n        draft[\"md\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n        draft[\"xs\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n        draft[\"sm\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n      }),\n    );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        let backdrop: string = \"bg-white\";\n        if (formulaType == EnumFormulaType.Espresso) {\n          backdrop =\n            espressoGradient[\n              Math.floor(Math.random() * espressoGradient.length)\n            ];\n        } else if (formulaType == EnumFormulaType.PourOver) {\n          backdrop =\n            pourOverGradients[\n              Math.floor(Math.random() * pourOverGradients.length)\n            ];\n        } else if (formulaType == EnumFormulaType.Teapresso) {\n          backdrop =\n            teaGradients[Math.floor(Math.random() * teaGradients.length)];\n        }\n\n        const formula = {\n          id: formulaId,\n          title: statingTitle,\n          text: \"New Formula\",\n          color: \"gray\",\n          backdrop: stagingBackdrop || backdrop,\n          formulaType: formulaType,\n          // randomGradients[\n          //   Math.floor(Math.random() * randomGradients.length)\n          // ],\n          steps: stagingSteps,\n          buildupDuration: 1,\n        };\n        draft[formulaId] = formula;\n        console.log(\"fml/ create new\", formula);\n      }),\n    );\n\n    console.log(\"addFormula\", { layout, formulas });\n  }\n  function clickAddFormula() {\n    setAddFormulaOpen(true);\n  }\n\n  const renderedFormulas: React.ReactNode[] = [];\n  Object.values(formulas).forEach((fml: DisplayFormulaParam) => {\n    const formulaComponent = (\n      <div key={fml.id} className=\"grid-item__title \">\n        <div\n          className=\"h-full w-full\"\n          // https://github.com/react-grid-layout/react-grid-layout/issues/166\n          // onClick={() => {\n          //   alert(\"clicked\")\n          // }}\n        >\n          <ProfileCard\n            formulaId={fml.id}\n            onClick={() => {\n              registerFormulaClick(fml.id);\n            }}\n            onCancel={() => {\n              cancelFormulaClick(fml.id)\n            }}\n            onClickEdit={() => {\n              registerSelectedFormulaId(fml.id);\n              router.push(`/lab`);\n            }}\n          />\n        </div>\n      </div>\n    );\n\n    renderedFormulas.push(formulaComponent);\n  });\n\n  const { draggable } = useDeviceContext();\n  // if (draggable) {\n  //     renderedFormulas.push(\n  //       <div\n  //         key={\"add\"}\n  //         className=\"flex flex-col grid-item__title  bg-gray-300 cursor-pointer rounded-xl border  justify-center items-center hover:scale-105 transition-transform duration-200 hover:border-blue-500\"\n  //       >\n  //         <div\n  //           className=\"w-full h-full flex items-center justify-center drag-handle\"\n  //           onMouseDown={() => {\n  //             clickAddFormula();\n  //           }}\n  //           onTouchStart={() => {\n  //             clickAddFormula();\n  //           }}\n  //         >\n  //           <FaPlus size={32} className=\"text-white\" />\n  //         </div>\n  //         <button className=\"absolute top-0 right-0 drag-handle\">\n  //           <FiMove size={20} className=\"text-white m-1 drag-handle\" />\n  //         </button>\n  //       </div>\n  //     );\n\n  // }\n\n  const [stagingFormulaName, setStagingFormulaName] = useState(\"\");\n  const [formulaType, setFormulaType] = useState<EnumFormulaType>(\n    EnumFormulaType.Espresso,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <Layout>\n        <div className=\"dark:bg-gray h-[80vh]\">\n          <ResponsiveGridLayout\n            compactType={null}\n            className=\"layout relative\"\n            layouts={layout}\n            isDraggable={draggable}\n            isResizable={draggable}\n            useCSSTransforms={false}\n            // resizeHandles={[\"se\"]}\n            draggableHandle=\".drag-handle\"\n            breakpoints={{ lg: 1280, md: 992, sm: 767, xs: 430, xxs: 0 }}\n            cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n            onLayoutChange={(layout: RGLayout[], layouts: Layouts) => {\n              if (!isLoaded) {\n                setLoaded(true);\n                return;\n              }\n              // localStorage.setItem(\"fml-layout\", JSON.stringify(layouts));\n              setLayout(layouts);\n            }}\n            onDragStart={() => {\n              console.log(\"OnDragStart\");\n            }}\n          >\n            {renderedFormulas}\n          </ResponsiveGridLayout>\n        </div>\n        {addFormulaOpen && (\n          <Modal\n            title={t(\"Add Formula\")}\n            onClose={() => setAddFormulaOpen(false)}\n            primaryAction={{\n              label: \"OK\",\n              onPress: async () => {\n                setAddFormulaOpen(false);\n                await addFormula();\n              },\n            }}\n            secondaryAction={{\n              label: t(\"Cancel\"),\n              onPress: () => setAddFormulaOpen(false),\n            }}\n          >\n            <Stack space={4}>\n              <TextField\n                label={t(\"Formula Name or Share Token\")}\n                value={stagingFormulaName}\n                onChange={(e: string) => {\n                  setStagingFormulaName(e);\n                }}\n              />\n              <Tiles space={4} columns={3}>\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.Espresso\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label={t(\"Espresso\")}\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.Espresso);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.Teapresso\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label={t(\"Teapresso\")}\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.Teapresso);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.PourOver\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label={t(\"Pour Over\")}\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.PourOver);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n              </Tiles>\n            </Stack>\n          </Modal>\n        )}\n      </Layout>\n    </>\n  );\n}\nexport default HomePage;\n"],"names":["window","__NEXT_P","push","cn","inputs","twMerge","clsx","Button","borderRadius","children","as","Component","containerClassName","borderClassName","duration","className","isRunning","otherProps","style","div","MovingBorder","rx","ry","pathRef","useRef","progress","useMotionValue","useAnimationFrame","time","length","current","getTotalLength","pxPerMillisecond","set","x","useTransform","val","getPointAtLength","y","transform","useMotionTemplate","svg","xmlns","preserveAspectRatio","width","height","rect","fill","ref","motion","position","top","left","display","ProfileCard","formulaId","onClickEdit","onCancel","onClick","draggable","progressReport","formulaFeedbacks","selectedFormulaId","useDeviceContext","setHeight","useState","elementRef","formulas","setFormulas","formulaUpdatedTimestamp","useEffect","clientHeight","setRunning","timeoutRef","formulaStartTimestamp","setFormulaStartTimestamp","Date","getTime","clearTimeout","setTimeout","normalView","button","onMouseDown","e","preventDefault","stopPropagation","onTouchStart","PiDotsThreeCircleVerticalThin","size","FiMove","FaStopCircle","formulaType","EnumFormulaType","Espresso","GiCoffeeBeans","Teapresso","IoIosLeaf","PourOver","MdCoffeeMaker","h1","String","Math","round","title","LineChart","Array","from","_","index","name","flowrate","floor","random","console","log","backdrop","ResponsiveGridLayout","WidthProvider","Responsive","espressoGradient","teaGradients","pourOverGradients","isLoaded","setLoaded","addFormulaOpen","setAddFormulaOpen","layout","setLayout","router","useRouter","showToast","useToast","registerFormulaClick","registerSelectedFormulaId","renderedFormulas","Object","values","forEach","fml","formulaComponent","id","cancelFormulaClick","stagingFormulaName","setStagingFormulaName","setFormulaType","t","useTranslation","Layout","compactType","layouts","isDraggable","isResizable","useCSSTransforms","draggableHandle","breakpoints","lg","md","sm","xs","xxs","cols","onLayoutChange","onDragStart","Modal","onClose","primaryAction","label","onPress","async","uuid","stagingSteps","statingTitle","stagingBackdrop","match","request","fetch","body","json","steps","produce","draft","i","w","h","formula","text","color","buildupDuration","addFormula","secondaryAction","Stack","space","TextField","value","onChange","Tiles","columns","hierarchy","kind"],"sourceRoot":""}