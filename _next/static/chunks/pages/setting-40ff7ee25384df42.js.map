{"version":3,"file":"static/chunks/pages/setting-40ff7ee25384df42.js","mappings":"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","sources":["webpack://_N_E/?452a","webpack://_N_E/./src/components/ui/separator.tsx","webpack://_N_E/./src/components/ui/card.tsx","webpack://_N_E/./src/components/config_Flowmeter.tsx","webpack://_N_E/./src/components/config_PID.tsx","webpack://_N_E/./src/components/config_Pressure.tsx","webpack://_N_E/./src/components/config_Keyboard.tsx","webpack://_N_E/./src/pages/setting.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/setting\",\n      function () {\n        return require(\"private-next-pages/setting.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/setting\"])\n      });\n    }\n  ","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { produce } from \"immer\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\n\nimport { Banner, Modal, SliderField, Stack } from \"@buildo/bento-design-system\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\nimport {\n  Switch,\n  Divider,\n  LineChart,\n  Button\n} from \"@buildo/bento-design-system\";\n\nimport {\n  FaTemperatureHigh,\n} from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore, MdSettings } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\nimport { cn } from '@/util';\n\n\n\n\nexport const FlowmeterConfigurationComponents = ({ index }: { index: number }) => {\n  const { connected , calibration, setCalibration} = useDeviceContext();\n\n  \n  const [chartData, setChartData] = useState(\n    new Array(100).fill({\n      temperature: 0,\n      power: 0,\n    })\n  );\n\n\n  const { t } = useTranslation()\n  const { flowmeterDisplay } = useDeviceContext()\n\n\n  const [isOpen, setIsOpen] = useState(false)\n  \n\n\n\n\n\n  const SettingComponents = (\n    <>\n    </>\n  );\n\n  const [settingToggle, setSettingToggle] = useState(true);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n\n  const [real, setReal] = useState(flowmeterDisplay[index].flowCount);\n  const [maxValue, setMaxValue] = useState(1000)\n\n  useEffect(() => {\n    setReal(flowmeterDisplay[index].flowCount)\n\n  }, [flowmeterDisplay, index])\n\n\n  function handleCalibrate() {\n    if (real == 0) return\n    setMaxValue(Math.max(real * 2, 200))\n\n    setIsOpen(true)\n  }\n  function updateFlowmeterCalibration(e: number) {\n\n  }\n\n  function handleUpdateCalibration() {\n    var e = real\n    var newCalibration = (e / flowmeterDisplay[index].flowCount) * calibration.flowmeter[index]\n\n\n    console.log('calibration/ ', {\n      calibration,\n      suggestedValue: e,\n      previousValue: flowmeterDisplay[index].flowCount,\n      currentCalibration: calibration.flowmeter[index],\n      newCalibration: newCalibration\n    })\n\n    if (newCalibration < 0 || newCalibration > 1000) {\n      console.warn(\"Invalid calibation\")\n      return\n    }\n\n\n    setCalibration(produce(calibration, (draft) => {\n      draft.flowmeter[index] = newCalibration\n      return draft\n    }))\n\n  }\n\n  return (\n    <>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Calibrate flowmeter\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              handleUpdateCalibration()\n              // onChange(powe\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n\n\n            <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"This calibration process is to set the conversion between flowmeter pulses count with the actual total weight of water extracted, specify how much it is actually weight to update the conversion\")}\n              action={{\n                label: t(\"Learn more\"),\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n\n\n            <SliderField\n              type=\"single\"\n              name=\"value\"\n              label={t(\"Real weight (gram)\")}\n              value={real}\n              onChange={(e: number) => {\n                updateFlowmeterCalibration(e)\n                setReal(e)\n              }}\n              minValue={0}\n              maxValue={maxValue}\n              step={1}\n            />\n          </Stack>\n        </Modal>\n      )}\n\n      \n\n\n\n\n      <Card className={cn(\n        \"w-auto border flex-grow bg-white h-full self-center hover:border-purple-700\",\n        flowmeterDisplay[index].flowRate > 0 ? \" text-green-900 border border-green-600\" : \"border-black border text-black\"\n      )}>\n        <CardHeader>\n          <div className=\"flex justify-between space-x-1 items-center\">\n            <CardTitle>{t('Group')} {index + 1}</CardTitle>\n            {/* <Button\n              onPress={handleCalibrate}\n              hierarchy=\"secondary\"\n              kind=\"outline\"\n              label={t('Calibrate')}\n              size=\"small\"\n              icon={() => <MdSettings />}\n            /> */}\n\n          <button\n            onClick={handleCalibrate}\n              style={{ borderRadius: '8px', border: '1px solid', padding: '8px' }}\n              className='text-back bg-white hover:bg-black hover:text-white'\n          >\n            <MdSettings className=\"\"/>\n          </button>\n          </div>\n          <Divider></Divider>\n\n          <CardDescription>\n            <div className=\"h-16  flex flex-col justify-evenly space-y-4 mt-6\">\n              {/* <LineChart\n                  hideLegend={false}\n                  hideXAxis={true}\n                  dataKey=\"name\"\n                  categories={[\"temperature\", \"power\", \"target\"]}\n                  disableAnimation={true}\n                  hideYAxis={true}\n                  hideTooltip={false}\n                  data={chartData}\n                />{\" \"} */}\n              <div>\n                <h1>{t('Flowrate ')}</h1>\n                <h1 className=\"text-xl\">{flowmeterDisplay[index].flowRate} gram/s</h1>\n              </div>\n              <div>\n                <h1>{t('Weight')}</h1>\n                <h1 className=\"text-xl\">{flowmeterDisplay[index].flowCount} gram</h1>\n              </div>\n            </div>\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {settingToggle ? (\n            <>\n              {SettingComponents}\n            </>\n          ) : null}\n        </CardContent>\n\n      </Card>\n\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button, SliderField } from \"@buildo/bento-design-system\";\nimport { Divider } from \"@nextui-org/react\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart, Switch } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\n\nexport const PidConfigurationComponents = ({ index }: { index: number }) => {\n  const { pidState, setPidState, pidDisplay } = useDeviceContext();\n  const { connected } = useDeviceContext();\n\n\n  const [chartData, setChartData] = useState(\n    new Array(100).fill({\n      temperature: 0,\n      power: 0,\n    })\n  );\n\n  const currentTemperature = chartData[-1]?.temperature || 0\n\n  useEffect(() => {\n    if (pidDisplay[index].powerSamples == undefined) return;\n    const draft: any[]= [];\n    for (var i = 0; i < pidDisplay[index].powerSamples.length; i++) {\n      draft.push({\n        power: pidDisplay[index].powerSamples[i],\n        temperature: Math.round(pidDisplay[index].temperatureSamples[i] * 10) / 10,\n        target: Math.round(pidState[index].targetTemperature * 10) / 10,\n      });\n    }\n    setChartData(draft);\n  }, [pidDisplay, index, pidState])\n\n  const { t } = useTranslation()\n  \n  useEffect(() => {\n    // when ever pid state change, we update the chart data because it has difference structure\n    // pidState[index].temperatureSamples\n    // pidState[index].powerSamples\n    // console.warn(\"draft\", pidDisplay[index]);\n    // if (pidDisplay[index].powerSamples == undefined) return;\n    // const draft: PidStatusParameter[] = [];\n    // for (var i = 0; i < pidDisplay[index].powerSamples.length; i++) {\n    //   draft.push({\n    //     power: pidDisplay[index].powerSamples[i],\n    //     temperature: pidDisplay[index].temperatureSamples[i],\n    //     target: pidState[index].targetTemperature,\n    //   });\n    // }\n    // setChartData(draft);\n  }, [pidDisplay, index, pidState]);\n\n  const SettingComponents = (\n    <>\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label={t(\"Temperature\")}\n        value={pidState[index].targetTemperature}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].targetTemperature = e;\n              return draft\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={200}\n        step={1}\n        disabled={!connected}\n      />\n      {/* <SliderField\n        type=\"single\"\n        name=\"value\"\n        label={t(\"Active Range\")}\n        value={pidState[index].activeRange}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].activeRange = e;\n              return draft\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={1}\n        disabled={!connected}\n      /> */}\n      {/* <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Proportional\"\n        value={pidState[index].proportional}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].proportional = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"integral\"\n        value={pidState[index].integral}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].integral = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={1}\n        step={0.1}\n        disabled={!connected}\n      />\n\n      <SliderField\n        type=\"single\"\n        name=\"value\"\n        label=\"Derivative\"\n        value={pidState[index].derivative}\n        onChange={(e: number) => {\n          setPidState(\n            produce(pidState, (draft) => {\n              draft[index].derivative = e;\n            })\n          );\n        }}\n        minValue={0}\n        maxValue={10}\n        step={0.1}\n        disabled={!connected}\n      /> */}\n    </>\n  );\n\n  const [settingToggle, setSettingToggle] = useState(true);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n\n  \n\n  const SettingButtons = (\n    <div className=\"flex flex-wrap justify-center space-x-1 space-y-1 mb-4\">\n      {/* <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90%\"}\n        size=\"small\"\n        icon={() => <ImPower />}\n      ></Button>\n      <Button\n        onPress={() => {}}\n        hierarchy=\"secondary\"\n        kind=\"outline\"\n        label={\"90*C\"}\n        size=\"small\"\n        icon={() => <FaTemperatureHigh />}\n      ></Button> */}\n\n    \n      <Button\n        onPress={() => {}}\n        hierarchy=\"primary\"\n        kind=\"outline\"\n        label=\"Test\"\n        size=\"small\"\n        icon={() => <TbCircuitPushbutton />}\n      ></Button>\n      <Button\n        onPress={() => {\n          setPidState(produce(pidState, draft => {\n            {\n              draft[index].targetTemperature = 110;\n              draft[index].activeRange = 2;\n              draft[index].proportional = 3.2;\n              draft[index].integral = 0.2;\n              draft[index].derivative = 5;\n            }\n          }))\n        }}\n        hierarchy=\"danger\"\n        kind=\"outline\"\n        size=\"small\"\n        label=\"Reset\"\n        icon={() => <RxReset />}\n      ></Button>\n    </div>\n  );\n\n  return (\n    <Card className=\"w-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between\">\n          <CardTitle>{t('Channel')} {index + 1}</CardTitle>\n          <Switch\n            value={pidState[index].isActive}\n            onChange={(e: boolean) => {\n              setPidState(\n                produce(pidState, (draft) => {\n                  draft[index].isActive = e;\n                  return draft\n                }),\n              );\n            }}\n            // disabled={!connected}\n            label={t('Active')}\n          />\n        </div>\n        <Divider></Divider>\n\n        <CardDescription>\n          {pidState[index].isActive ? (\n            <>\n              <Card className=\"h-40 bg-white\">\n                <div className=\"_chartDisplay \">\n                  <LineChart\n                    hideLegend={false}\n                    hideXAxis={true}\n                    dataKey=\"name\"\n                    categories={[\"temperature\", \"power\", \"target\"]}\n                    disableAnimation={true}\n                    hideYAxis={true}\n                    hideTooltip={false}\n                    data={chartData}\n                  />{\" \"}\n                  <div\n                    className=\"right-32 top-32 text-red-200 flex flex-row m-4\"\n                  >\n                    <h1 className=\" text-9xl\">{currentTemperature}</h1>\n                    <h1 className=\"text-xl\">°C</h1>\n                  </div>\n\n                </div>\n\n              </Card>\n            </>\n          ) : (\n              <>{ t('This PID channel is currently disabled')}</>\n          )}\n        </CardDescription>\n      </CardHeader>\n      {pidState[index].isActive ? (\n        <>\n          <CardContent>\n            {settingToggle ? (\n              <>\n                {SettingButtons}\n\n                {/* <ProgressBar\n                  kind=\"continuous\"\n                  label=\"Power\"\n                  value={pidDisplay[index].currentPower}\n                  maxValue={100}\n                />\n                <Spacer />\n                <Progress\n                  label=\"Temperature\"\n                  size=\"md\"\n                  showValueLabel={true}\n                  valueLabel=\"C\"\n                  color=\"success\"\n                  isStriped\n                  value={pidDisplay[index].currentTemperature}\n                  maxValue={200}\n                  isDisabled={!pidState[index].isActive}\n                />\n */}\n                {SettingComponents}\n              </>\n            ) : null}\n          </CardContent>\n          <CardFooter onClick={toggleSettingPanel} className=\"justify-center\">\n            {settingToggle ? <MdExpandLess /> : <MdExpandMore />}\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n\n};\n","import { useEffect, useState } from \"react\";\n\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n} from \"@/components/ui/card\";\nimport { Button, SliderField, Banner, Modal , Stack} from \"@buildo/bento-design-system\";\nimport { Divider } from \"@nextui-org/react\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore, MdSettings } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart, Switch } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\nimport { FaCompressArrowsAlt } from \"react-icons/fa\";\nimport { cn } from \"@/util\";\n\nexport const PressureConfigurationComponents = ({ index }: { index: number }) => {\n    const { pidState, setPidState, pidDisplay , calibration, setCalibration, pressure, setPressure} = useDeviceContext();\n    const { connected } = useDeviceContext();\n    const { t } = useTranslation()\n\n\n\n    const [isOpen, setIsOpen] = useState(false)\n\n\n    const [settingToggle, setSettingToggle] = useState(true);\n    const toggleSettingPanel = () => {\n        setSettingToggle(!settingToggle);\n    };\n\n\n    function handleUpdateCalibration() {\n\n    }\n    function handleCalibrate() {\n        \n    }\n\n    return (\n        <>\n            {isOpen && (\n                <Modal\n                    size=\"small\"\n                    title={t(\"Pressure sensor\")}\n                    onClose={() => setIsOpen(false)}\n                    primaryAction={{\n                        label: \"OK\",\n                        onPress: () => {\n                            setIsOpen(false);\n                            handleUpdateCalibration()\n                            // onChange(powe\n                        },\n                    }}\n                    secondaryAction={{\n                        label: \"Cancel\",\n                        onPress: () => setIsOpen(false),\n                    }}\n                >\n                    <Stack space={8}>\n\n\n                        <Banner\n                            kind=\"informative\"\n                            title={t(\"Notice\")}\n                            description={t(\"There are many type of pressure sensor, each will have a different measuring range. What is the range of your pressure sensor in MPa ?\")}\n                            action={{\n                                label: t(\"Learn more\"),\n                                onPress: () => {\n                                    window.open(\"https://www.google.com\");\n                                },\n                            }}\n                        />\n\n\n                        <SliderField\n                            type=\"single\"\n                            name=\"value\"\n                            label={t(\"Max range (MPa)\")}\n                            value={calibration.pressure[index]}\n                            onChange={(e: number) => {\n                                // updateFlowmeterCalibration(e)\n                                // setReal(e)\n                                setCalibration(produce(calibration, draft => {\n                                    draft.pressure[index] = e\n                                }))\n                            }}\n                            minValue={0}\n                            maxValue={3.2}\n                            step={0.1}\n                        />\n                    </Stack>\n                </Modal>\n            )}\n\n\n\n\n\n            <Card className={cn(\n                \"w-auto border flex-grow bg-white h-full self-center hover:border-purple-700\",\n                // flowmeterDisplay[index].flowRate > 0 ? \" text-green-900 border border-green-600\" : \"border-black border text-black\"\n            )}>\n                <CardHeader>\n                    <div className=\"flex justify-between space-x-1 items-center\">\n                        <CardTitle>{t('Group')} {index + 1}</CardTitle>\n                        {/* <Button\n              onPress={handleCalibrate}\n              hierarchy=\"secondary\"\n              kind=\"outline\"\n              label={t('Calibrate')}\n              size=\"small\"\n              icon={() => <MdSettings />}\n            /> */}\n\n                        <button\n                            onClick={() => {\n                                setIsOpen(true)\n                            }}\n                            style={{ borderRadius: '8px', border: '1px solid', padding: '8px' }}\n                            className='text-back bg-white hover:bg-black hover:text-white'\n                        >\n                            <MdSettings className=\"\" />\n                        </button>\n                    </div>\n                    <Divider></Divider>\n\n                    <CardDescription>\n                        <div className=\"h-8  flex flex-col justify-evenly space-y-4 mt-6\">\n                            {/* <LineChart\n                  hideLegend={false}\n                  hideXAxis={true}\n                  dataKey=\"name\"\n                  categories={[\"temperature\", \"power\", \"target\"]}\n                  disableAnimation={true}\n                  hideYAxis={true}\n                  hideTooltip={false}\n                  data={chartData}\n                />{\" \"} */}\n                            <div>\n                                <h1>{t('Pressure ')}</h1>\n                                <h1 className=\"text-3xl\">{pressure[index]} bar</h1>\n                            </div>\n                        </div>\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                </CardContent>\n\n            </Card>\n        </>\n    );\n\n};\n","import { useEffect, useState } from \"react\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button, SliderField, Banner } from \"@buildo/bento-design-system\";\nimport { Divider } from \"@nextui-org/react\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { ImPower } from \"react-icons/im\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport { RxReset } from \"react-icons/rx\";\nimport { TbCircuitPushbutton } from \"react-icons/tb\";\n\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart, Switch } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { PidStatusParameter } from \"@/gateway/pid\";\n\nexport const KeyboardConfigurationComponents = ({ index }: { index: number }) => {\n  const { t } = useTranslation()\n  const [settingToggle, setSettingToggle] = useState(true);\n  const toggleSettingPanel = () => {\n    setSettingToggle(!settingToggle);\n  };\n\n\n\n\n  const [duration, setDuration] = useState(0);\n\n\n\n\n\n\n  return (\n    <Card className=\"w-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between\">\n          <CardTitle>{t('Group')} {index + 1}</CardTitle>\n        </div>\n        <Divider></Divider>\n\n        <CardDescription>\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-4\">\n\n          \n\n        <Banner\n          kind={duration == 0 ? \"positive\": \"warning\"}\n          title={t(\"Current behaviour\")}\n          description={duration == 0 ? \"Dispense water at group head\": `Dispense hot water valve for ${duration} second, group head will NOT open`}\n        />\n\n\n        \n        <SliderField\n          type=\"single\"\n          name=\"value\"\n          label={t(\"Dose duration (seconds)\")}\n          value={duration}\n          onChange={(e: number) => {\n            setDuration(e)\n          }}\n          minValue={0}\n          maxValue={10}\n          step={0.5}\n        />\n\n      </CardContent>\n      <CardFooter onClick={toggleSettingPanel} className=\"justify-center\">\n        {settingToggle ? <MdExpandLess /> : <MdExpandMore />}\n      </CardFooter>\n    </Card>\n  );\n\n};\n","\"use client\";\n\nimport { Banner, Body, Inset, Modal, TextField } from \"@buildo/bento-design-system\";\nimport { FaDroplet, FaTemperatureHigh } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\n\nimport { FlowmeterConfigurationComponents } from \"@/components/config_Flowmeter\";\nimport { GrinderSettingComponent } from \"@/components/config_Grinder\";\nimport { PidConfigurationComponents } from \"@/components/config_PID\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Card, CardBody, CardFooter, CardHeader } from \"@nextui-org/react\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  MdKeyboardArrowDown,\n  MdKeyboardArrowRight,\n  MdKeyboardArrowUp,\n} from \"react-icons/md\";\n\nimport { CgCompressRight } from \"react-icons/cg\";\n\nimport { FaBalanceScale } from \"react-icons/fa\";\nimport { AiFillSound } from \"react-icons/ai\";\nimport { FaLightbulb } from \"react-icons/fa\";\nimport { RiKeyboardFill } from \"react-icons/ri\";\nimport { FaWifi } from \"react-icons/fa\";\n\nimport Layout from \"./layout\";\n\nimport { useTranslation } from \"next-export-i18n\";\nimport { PressureConfigurationComponents } from \"@/components/config_Pressure\";\nimport { useLocalStorage } from \"usehooks-ts\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { KeyboardConfigurationComponents } from \"@/components/config_Keyboard\";\n\nconst CalibrateButton = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <button\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick();\n      }}\n      className=\"flex h-8 w-fit items-center justify-center rounded-xl border-2 border-white p-4 text-white opacity-20\"\n    >\n      Calibrate\n    </button>\n  );\n};\n\nconst PidSettings = () => {\n  const { t } = useTranslation();\n  const [expanded, setExpanded] = useLocalStorage(\"pidSettings\", false);\n  const [isOpen, setModelOpen] = useState(false);\n\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <Card\n      ref={cardRef}\n      className={\n        \"w-full max-w-2xl transform bg-gradient-to-r from-white to-white transition duration-500 select-none\"\n      }\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaTemperatureHigh className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Heater\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <div className=\"p-4 gap-4\">\n          <Banner\n            kind=\"positive\"\n            title=\"What is Heater ?\"\n            description=\"There are 3 channel of PID-enabled heater. You can configure each channel with temperature setpoint. We support the following type of sensor: DS18B20, NTC(10K), NTC(100K). DS18B20 is strongly recommended\"\n          />\n\n          <div className=\"flex w-full flex-col justify-center gap-4 mt-4\">\n            <PidConfigurationComponents index={0} />\n            <PidConfigurationComponents index={1} />\n            <PidConfigurationComponents index={2} />\n          </div>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </div>\n      ) : null}\n\n      {isOpen && (\n        <Modal\n          title=\"Calibrate flowmeter\"\n          size=\"small\"\n          onClose={() => setModelOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => setModelOpen(false),\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setModelOpen(false),\n          }}\n          autoFocus={false}\n        >\n          <Inset space={4}>\n            <Body size=\"medium\">Content</Body>\n          </Inset>\n        </Modal>\n      )}\n    </Card>\n  );\n};\n\nconst FlowmeterSettings = () => {\n  const [expanded, setExpanded] = useLocalStorage(\"flowmeterSettings\", false);\n  const {t} = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r bg-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaDroplet className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Flowmeter\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <div className=\"p-4 space-y-4\">\n          <Banner\n            kind=\"positive\"\n            title=\"What is flowmeter ?\"\n            description=\"Flowmeter is used to measure how much water is going to the puck, note that this is not much coffee you get because there is always water losses inside the puck, or simply released\"\n          />\n\n          <Banner\n            kind=\"informative\"\n            title=\"How to calibrate ?\"\n            description=\"First, place a scale underneath each group, press any water button. Water will come out, wait until it reach around 100 grams, hit stop. Then click the Calibrate button and input the ACTUAL weight\"\n            action={{\n              label: \"See Video\",\n              onPress: () => {\n\n              }\n            }}\n          />\n          \n\n\n          <div className=\"flex w-full flex-row flex-wrap justify-evenly  h-fit gap-4\">\n            <FlowmeterConfigurationComponents index={0} />\n            <FlowmeterConfigurationComponents index={1} />\n            <FlowmeterConfigurationComponents index={2} />\n          </div>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </div>\n      ) : null}\n    </Card>\n  );\n};\nconst PressureSettings = () => {\n  const [expanded, setExpanded] = useLocalStorage(\"pressureSettings\", false);\n  const {t} = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-white to-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <CgCompressRight className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Pressure\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <div className=\"p-4 space-y-4\">\n          <Banner\n            kind=\"positive\"\n            title=\"What is Pressure sensor ?\"\n            description=\"Pressure sensor is used to measure the pressure at puck, this reflect. There is 2 channel on ROSARIO. To ensure every shot of espresso are the same, the machine will also check if the pressure profiling match it's previous and display error. Normally due to wrong coffee compression method\"\n          />\n\n          <Banner\n            kind=\"informative\"\n            title=\"How to calibrate ?\"\n            description=\"There are lots of pressure sensor type with different ranges. The highest pressure in coffee machine is around 12 bar (1.2Mpa) so you should get one above this limit and specify the range below.\"\n            action={{\n              label: \"See Video\",\n              onPress: () => {\n\n              }\n            }}\n          />\n\n          <div className=\"flex w-full flex-row flex-wrap justify-evenly  h-fit gap-4\">\n            <PressureConfigurationComponents index={0} />\n            <PressureConfigurationComponents index={1} />\n            <PressureConfigurationComponents index={2} />\n            <PressureConfigurationComponents index={3} />\n          </div>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </div>\n      ) : null}\n    </Card>\n  );\n};\nconst GrinderSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"grinderSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const {t} = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-white to-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <GiManualMeatGrinder className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Grinder\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\n\nconst ScaleSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"scaleSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaBalanceScale className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Scale\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\nconst SoundSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"soundSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-teal-600 to-green-600 transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <AiFillSound className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Sound\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nconst LightSetting = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"lightSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    // setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (!expanded && cardRef.current) {\n      // cardRef.current.scrollIntoView({ behavior: \"smooth\" });\n      const navBarHeight = parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--navbar-height\",\n        ),\n        10,\n      );\n      const topPosition =\n        cardRef.current.getBoundingClientRect().top - navBarHeight;\n      // window.scrollTo({ top: topPosition, behavior: \"smooth\" });\n    }\n  }, [expanded]);\n\n  const handleAddGrinder = () => {\n    console.log(\"add ginder\");\n  };\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r from-red-600  to-red-400 transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaLightbulb className=\"ml-4 text-white\" />\n          <h2 className=\"mx-4 font-bold text-white\">{t(\"Light\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-white\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-white\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            {grinderSettings.map((item, index) => {\n              console.log(\"Grinder/ create with\", { item, index });\n              return <GrinderSettingComponent key={index} index={index} />;\n            })}\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-white\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nconst KeyboardSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"keyboardSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-r bg-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <RiKeyboardFill className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Keyboard\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          <CardBody className=\"flex w-full flex-col justify-center space-y-4 py-4\">\n            <Banner\n              kind=\"informative\"\n              title=\"Customize the behaviour\"\n              description=\"In most coffee machine, there is a group button that normally will just dispense hot water. This button can also be configure to control the hot water line. You can change that behaviour here\"\n            />\n\n            \n\n            {/* <GrinderConfigurationComponent index={0} />\n            <GrinderConfigurationComponent index={1} />\n            <GrinderConfigurationComponent index={2} /> */}\n\n            <KeyboardConfigurationComponents index={0} />\n            <KeyboardConfigurationComponents index={1} />\n            <KeyboardConfigurationComponents index={2} />\n\n\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\nconst NetworkSettings = () => {\n  const { locale, locales, defaultLocale } = useRouter();\n  const [expanded, setExpanded] = useLocalStorage(\"networkSettings\", false);\n  const { grinderSettings } = useDeviceContext();\n  const { t } = useTranslation()\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n    console.log(\"toggle expand\");\n  };\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const [ssid, setSSID] = useState<string>(\"\")\n  const [password, setPassword] = useState<string>(\"\")\n  const [token, setToken] = useState<string>(\"\")\n\n\n  return (\n    <Card\n      ref={cardRef}\n      className=\"w-full max-w-2xl transform bg-gradient-to-tr bg-white transition duration-500 select-none\"\n    >\n      <CardHeader\n        className=\"flex h-16 flex-row items-center justify-between\"\n        onClick={toggleExpand}\n      >\n        <div className=\"flex items-center\">\n          <FaWifi className=\"ml-4 text-black\" />\n          <h2 className=\"mx-4 font-bold text-black\">{t(\"Network\")}</h2>\n        </div>\n        {expanded ? (\n          <>\n            <MdKeyboardArrowDown className=\"mr-4 text-black\" />\n          </>\n        ) : (\n          <MdKeyboardArrowRight className=\"mr-4 text-black\" />\n        )}\n      </CardHeader>\n      {expanded ? (\n        <>\n          \n\n          \n          <CardBody className=\"flex w-full justify-center space-y-4 p-8\">\n\n            <Banner\n              kind=\"positive\"\n              title={t(\"Notice\")}\n              description={t(\"This will enable Internet connection for this machine, allowing it to display time, tracking the coffee quality by comparing flowmeter charts, notify business owner with daily report, ...\")}\n              action={{\n                label: t(\"Learn more\"),\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n\n            <div className=\"flex flex-row justify-between w-full gap-4\">\n\n              <div className=\"w-full flex-grow\">\n                <TextField\n                  name=\"Wifi\"\n                  label=\"Wifi\"\n                  placeholder=\"\"\n                  value={ssid}\n                  onChange={(e) => setSSID(e)}\n                />\n\n              </div>\n              <div className=\"w-full flex-grow\">\n                <TextField\n                  name=\"Password\"\n                  label=\"Password\"\n                  placeholder=\"\"\n                  value={password}\n                  onChange={(e) => setPassword(e)}\n                  type=\"password\"\n                />\n\n\n              </div>\n            </div>\n            <TextField\n              name=\"Token\"\n              label=\"Access Token\"\n              placeholder=\"\"\n              value={token}\n              onChange={(e) => setToken(e)}\n              hint=\"ANTLRXXXXXXXX\"\n            />\n \n          <Separator/>\n\n\n          </CardBody>\n          <CardFooter\n            onClick={toggleExpand}\n            className=\"align-center justify-center\"\n          >\n            <MdKeyboardArrowUp className=\"m-4 text-black\" />\n          </CardFooter>\n        </>\n      ) : null}\n    </Card>\n  );\n};\n\n\nexport const SettingsPage = () => {\n  return (\n    <Layout>\n      <div className=\" flex flex-col items-center  p-8 space-y-4\">\n        <PidSettings />\n        <FlowmeterSettings />\n        <PressureSettings/>\n        <KeyboardSettings/>\n        <NetworkSettings/>\n        {/* <GrinderSettings />\n        <ScaleSettings /> */}\n      </div>\n    </Layout>\n  );\n};\n\nexport default SettingsPage;  \n"],"names":["window","__NEXT_P","push","Separator","React","ref","className","orientation","decorative","props","SeparatorPrimitive","cn","displayName","Card","div","CardHeader","CardTitle","h3","CardDescription","p","CardContent","CardFooter","FlowmeterConfigurationComponents","index","connected","calibration","setCalibration","useDeviceContext","chartData","setChartData","useState","Array","fill","temperature","power","t","useTranslation","flowmeterDisplay","isOpen","setIsOpen","SettingComponents","settingToggle","setSettingToggle","real","setReal","flowCount","maxValue","setMaxValue","useEffect","Modal","size","title","onClose","primaryAction","label","onPress","e","newCalibration","flowmeter","console","log","suggestedValue","previousValue","currentCalibration","warn","produce","draft","handleUpdateCalibration","secondaryAction","Stack","space","Banner","kind","description","action","open","SliderField","type","name","value","onChange","minValue","step","flowRate","button","onClick","Math","max","style","borderRadius","border","padding","MdSettings","Divider","h1","PidConfigurationComponents","pidState","setPidState","pidDisplay","currentTemperature","undefined","powerSamples","i","length","round","temperatureSamples","target","targetTemperature","disabled","SettingButtons","Button","hierarchy","icon","TbCircuitPushbutton","activeRange","proportional","integral","derivative","RxReset","Switch","isActive","LineChart","hideLegend","hideXAxis","dataKey","categories","disableAnimation","hideYAxis","hideTooltip","data","MdExpandLess","MdExpandMore","PressureConfigurationComponents","pressure","setPressure","KeyboardConfigurationComponents","duration","setDuration","PidSettings","expanded","setExpanded","useLocalStorage","setModelOpen","toggleExpand","cardRef","useRef","FaTemperatureHigh","h2","MdKeyboardArrowDown","MdKeyboardArrowRight","MdKeyboardArrowUp","autoFocus","Inset","Body","FlowmeterSettings","FaDroplet","PressureSettings","CgCompressRight","KeyboardSettings","locale","locales","defaultLocale","useRouter","grinderSettings","RiKeyboardFill","CardBody","NetworkSettings","ssid","setSSID","password","setPassword","token","setToken","FaWifi","TextField","placeholder","hint","SettingsPage","Layout"],"sourceRoot":""}