{"version":3,"file":"static/chunks/pages/index-dd8b473e30932ada.js","mappings":"sFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,IACA,WACE,OAAO,EAAQ,W,iMCSR,SAASC,EAAY,G,IAAA,UAClCC,EAAS,YACTC,EAAW,QACXC,GAHkC,E,IAiG5BC,EAIAA,EASDA,EAnGL,MAAM,UAAEC,EAAS,eAAED,IAAmBE,EAAAA,EAAAA,MAC/BC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,GAC/BC,GAAaC,EAAAA,EAAAA,QAAuB,OAEpC,SAAEC,EAAQ,YAAEC,IAAgBP,EAAAA,EAAAA,MAElCQ,EAAAA,EAAAA,YAAU,KACJJ,EAAWK,SACbP,EAAUE,EAAWK,QAAQC,iBAIjC,MAAMC,GACJ,sB,WACE,SAACC,MAAAA,CAAIC,UAAU,qE,SACZd,GACC,sB,WACE,SAACe,SAAAA,CACCD,UAAU,mBACVE,YAAcC,IACZpB,IACAoB,EAAEC,iBACFD,EAAEE,mBAEJC,aAAeH,IACbpB,IACAoB,EAAEC,iBACFD,EAAEE,mB,UAGJ,SAACE,EAAAA,IAA6BA,CAC5BC,KAAM,GACNR,UAAU,uBAId,SAACC,SAAAA,C,UACC,SAACQ,EAAAA,IAAMA,CAACD,KAAM,GAAIR,UAAU,qCAIhC,UAACD,MAAAA,CAAIC,UAAU,iB,UACZP,EAASX,GAAW4B,cAAgBC,EAAAA,GAAgBC,WACnD,SAACC,EAAAA,IAAaA,CAACL,KAAM,GAAIR,UAAU,mBAEpCP,EAASX,GAAW4B,cAAgBC,EAAAA,GAAgBG,YACnD,SAACC,EAAAA,IAASA,CAACP,KAAM,GAAIR,UAAU,mBAEhCP,EAASX,GAAW4B,cAAgBC,EAAAA,GAAgBK,WACnD,SAACC,EAAAA,IAAaA,CAACT,KAAM,GAAIR,UAAU,yBAM3C,SAACkB,KAAAA,CAAGlB,UAAU,6E,SACXP,EAASX,GAAWqC,WAKrBC,GACJ,UAACrB,MAAAA,CAAIC,UAAU,uD,WACb,SAACqB,EAAAA,IAASA,CACRjC,OAAQA,EACRkC,QAAQ,OACRC,WAAY,CAAC,YACbC,YAAY,EACZC,WAAW,EACXC,WAAW,EACXC,KAAM,IACDC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGC,KAAW,CAC3CC,KAAM,SAAmB,OAAVD,EAAQ,GACvBE,SAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,iBAG7B,OAIP,OACE,SAACtC,MAAAA,CACCuC,IAAK/C,EAGLS,UAAW,qBAKTf,QAJsD,KAAhB,QAAtCA,EAAAA,EAAeQ,EAASX,GAAWyD,WAAnCtD,IAAAA,OAAAA,EAAAA,EAAwCuD,WACpC,WACA/C,EAASX,GAAW2D,SACzB,6IAIA,QAHuD,KAAhB,QAAtCxD,EAAAA,EAAeQ,EAASX,GAAWyD,WAAnCtD,IAAAA,OAAAA,EAAAA,EAAwCuD,WACpC,eACA,eACL,wEACDtC,YAAcC,IACZnB,IACA0D,QAAQC,IAAI,qB,UAGyC,KAAhB,QAAtC1D,EAAAA,EAAeQ,EAASX,GAAWyD,WAAnCtD,IAAAA,OAAAA,EAAAA,EAAwCuD,WACrCpB,EACAtB,I,sECpGV,MAAM8C,GAAuBC,EAAAA,EAAAA,eAAcC,EAAAA,YAErCC,EAAmB,CACvB,8DACA,8DACA,8DACA,8DACA,8DACA,+DAEIC,EAAe,CACnB,4DACA,4DACA,4DACA,4DACA,4DACA,6DAGIC,EAAoB,CACxB,0DACA,0DACA,0DACA,0DACA,0DACA,2DA8OF,MAjOA,WAEE,MAAOC,EAAUC,IAAa7D,EAAAA,EAAAA,WAAS,IACjC,SAAEG,EAAQ,YAAEC,EAAW,eAAE0D,EAAc,kBAAEC,IAC7ClE,EAAAA,EAAAA,MACI,OAAEmE,EAAM,UAAEC,IAAcpE,EAAAA,EAAAA,KAExBqE,GAASC,EAAAA,EAAAA,cACT,UAAEC,IAAcC,EAAAA,EAAAA,QAEhB,qBAAEC,EAAoB,0BAAEC,IAC5B1E,EAAAA,EAAAA,KAqDI2E,EAAsC,GAC5CC,OAAOC,OAAOvE,GAAUwE,SAASC,IAC/B,MAAMC,GACJ,SAACpE,MAAAA,CAAiBC,UAAU,oB,UAC1B,SAACD,MAAAA,CACCC,UAAU,gB,UAMV,SAACnB,EAAWA,CACVC,UAAWoF,EAAI3B,GACfvD,QAAS,KACP4E,EAAqBM,EAAI3B,KAE3BxD,YAAa,KACX8E,EAA0BK,EAAI3B,IAC9BiB,EAAO5E,KAAM,cAfXsF,EAAI3B,IAsBhBuB,EAAiBlF,KAAKuF,MAGxB,MAAM,UAAEjF,IAAcC,EAAAA,EAAAA,MA0BfiF,EAAoBC,IAAyB/E,EAAAA,EAAAA,UAAS,gBACtDoB,EAAa4D,IAAkBhF,EAAAA,EAAAA,UACpCqB,EAAAA,GAAgBC,WAEZ,EAAE2D,IAAMC,EAAAA,EAAAA,MACd,OACE,qB,UACE,UAACC,EAAAA,QAAMA,C,WACL,SAAC1E,MAAAA,CAAIC,UAAU,wB,UACb,SAAC4C,EAAAA,CACC8B,YAAa,KACb1E,UAAU,kBACV2E,QAASrB,EACTsB,YAAa1F,EACb2F,YAAa3F,EACb4F,kBAAkB,EAElBC,gBAAgB,eAChBC,YAAa,CAAEC,GAAI,KAAMC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,IAAK,GACzDC,KAAM,CAAEL,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAK,GAC3CE,eAAgB,CAACjC,EAAoBqB,KAC9BzB,EAKLK,EAAUoB,GAJRxB,GAAU,IAMdqC,YAAa,KACX9C,QAAQC,IAAI,gB,SAGbmB,MAGJV,IACC,SAACqC,EAAAA,IAAKA,CACJtE,MAAOoD,EAAE,eACTmB,QAAS,IAAMrC,GAAkB,GACjCsC,cAAe,CACbC,MAAO,KACPC,QAAS,KACPxC,GAAkB,GAnJhC,WACE,MAAMvE,GAAYgH,EAAAA,EAAAA,MAClBvC,GACEwC,EAAAA,EAAAA,IAAQzC,GAAS0C,I,IACfA,EACAA,EACAA,EAFW,QAAXA,EAAAA,EAAU,UAAVA,IAAAA,GAAAA,EAAapH,KAAK,CAAEqH,EAAGnH,EAAWoH,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAC5C,QAAXL,EAAAA,EAAU,UAAVA,IAAAA,GAAAA,EAAapH,KAAK,CAAEqH,EAAGnH,EAAWoH,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAC5C,QAAXL,EAAAA,EAAU,UAAVA,IAAAA,GAAAA,EAAapH,KAAK,CAAEqH,EAAGnH,EAAWoH,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,QAI3D3G,GACEqG,EAAAA,EAAAA,IAAQtG,GAAWuG,IACjB,IAAIvD,EAAmB,WACnB/B,GAAeC,EAAAA,GAAgBC,SACjC6B,EACEM,EACEZ,KAAKC,MAAMD,KAAKE,SAAWU,EAAiBjB,SAEvCpB,GAAeC,EAAAA,GAAgBK,SACxCyB,EACEQ,EACEd,KAAKC,MAAMD,KAAKE,SAAWY,EAAkBnB,SAExCpB,GAAeC,EAAAA,GAAgBG,YACxC2B,EACEO,EAAab,KAAKC,MAAMD,KAAKE,SAAWW,EAAalB,UAGzD,MAAMwE,EAAU,CACd/D,GAAIzD,EACJqC,MAAOiD,EACPmC,KAAM,cACNC,MAAO,OACP/D,SAAUA,EACV/B,YAAaA,EAIb+F,MAAO,IAETT,EAAMlH,GAAawH,EACnB5D,QAAQC,IAAI,kBAAmB2D,OAInC5D,QAAQC,IAAI,aAAc,CAAEW,SAAQ7D,aAuGxBiH,KAGJC,gBAAiB,CACff,MAAOrB,EAAE,UACTsB,QAAS,IAAMxC,GAAkB,I,UAGnC,UAACuD,EAAAA,IAAKA,CAACC,MAAO,E,WACZ,SAACC,EAAAA,IAASA,CACRlB,MAAOrB,EAAE,gBACTwC,MAAO3C,EACP4C,SAAW7G,IACTkE,EAAsBlE,OAG1B,UAAC8G,EAAAA,IAAKA,CAACJ,MAAO,EAAGK,QAAS,E,WACxB,SAACC,EAAAA,IAAMA,CACLC,UAAU,UACVC,KACE3G,GAAeC,EAAAA,GAAgBC,SAC3B,QACA,UAENgF,MAAM,WACNC,QAAS,KACPvB,EAAe3D,EAAAA,GAAgBC,cAInC,SAACuG,EAAAA,IAAMA,CACLC,UAAU,UACVC,KACE3G,GAAeC,EAAAA,GAAgBG,UAC3B,QACA,UAEN8E,MAAM,YACNC,QAAS,KACPvB,EAAe3D,EAAAA,GAAgBG,eAInC,SAACqG,EAAAA,IAAMA,CACLC,UAAU,UACVC,KACE3G,GAAeC,EAAAA,GAAgBK,SAC3B,QACA,UAEN4E,MAAM,YACNC,QAAS,KACPvB,EAAe3D,EAAAA,GAAgBK,6B","sources":["webpack://_N_E/","webpack://_N_E/./src/components/main_FormulaCard.tsx","webpack://_N_E/./src/pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","\"use client\";\n\nimport { EnumFormulaType } from \"@/gateway/formula\";\n// import { Button, Card, CardFooter, Tooltip } from '@nextui-org/react';\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { LineChart } from \"@buildo/bento-design-system\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FiMove } from \"react-icons/fi\";\nimport { GiCoffeeBeans } from \"react-icons/gi\";\nimport { IoIosLeaf } from \"react-icons/io\";\nimport { MdCoffeeMaker } from \"react-icons/md\";\nimport { PiDotsThreeCircleVerticalThin } from \"react-icons/pi\";\n\nexport default function ProfileCard({\n  formulaId,\n  onClickEdit,\n  onClick,\n}: {\n  formulaId: string;\n  onClick: () => void;\n  onClickEdit: () => void;\n}) {\n  //https://github.com/ccnmtl/juxtapose/blob/master/src/TrackElement.jsx#L83\n\n  const { draggable, progressReport } = useDeviceContext();\n  const [height, setHeight] = useState(0);\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const { formulas, setFormulas } = useDeviceContext();\n\n  useEffect(() => {\n    if (elementRef.current) {\n      setHeight(elementRef.current.clientHeight);\n    }\n  });\n\n  const normalView = (\n    <>\n      <div className=\"absolute right-0 top-0 flex flex-col  items-center justify-between\">\n        {draggable ? (\n          <>\n            <button\n              className=\"hover:opacity-50\"\n              onMouseDown={(e) => {\n                onClickEdit();\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              onTouchStart={(e) => {\n                onClickEdit();\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n            >\n              <PiDotsThreeCircleVerticalThin\n                size={32}\n                className=\"m-1 text-white \"\n              />\n            </button>\n\n            <button>\n              <FiMove size={20} className=\"drag-handle m-1 text-white\" />\n            </button>\n          </>\n        ) : (\n          <div className=\"m-1 opacity-20\">\n            {formulas[formulaId].formulaType === EnumFormulaType.Espresso && (\n              <GiCoffeeBeans size={32} className=\"m-1 text-white\" />\n            )}\n            {formulas[formulaId].formulaType === EnumFormulaType.Teapresso && (\n              <IoIosLeaf size={32} className=\"m-1 text-white\" />\n            )}\n            {formulas[formulaId].formulaType === EnumFormulaType.PourOver && (\n              <MdCoffeeMaker size={32} className=\"m-1 text-white\" />\n            )}\n          </div>\n        )}\n      </div>\n\n      <h1 className=\"select-none truncate text-clip text-balance text-center text-xl text-white\">\n        {formulas[formulaId].title}\n      </h1>\n    </>\n  );\n\n  const progressView = (\n    <div className=\"first-letter absolute bottom-0  left-0 h-full w-full\">\n      <LineChart\n        height={height}\n        dataKey=\"name\"\n        categories={[\"flowrate\"]}\n        hideLegend={true}\n        hideXAxis={true}\n        hideYAxis={true}\n        data={[\n          ...Array.from({ length: 10 }, (_, index) => ({\n            name: `Point ${index + 1}`,\n            flowrate: Math.floor(Math.random() * 100),\n          })),\n        ]}\n      />{\" \"}\n    </div>\n  );\n\n  return (\n    <div\n      ref={elementRef}\n      // isFooterBlurred\n      // radius=\"lg\"\n      className={`rounded-xl border ${\n        progressReport[formulas[formulaId].id]?.isRunning === true\n          ? \"bg-white\"\n          : formulas[formulaId].backdrop\n      }  flex h-full w-full transform  flex-col items-center justify-center border  shadow-large  transition duration-200 hover:border-blue-500 ${\n        progressReport[formulas[formulaId].id]?.isRunning === true\n          ? \"border-black\"\n          : \"border-white\"\n      } cursor-pointer select-none transition-all duration-1000 ease-in-out`}\n      onMouseDown={(e) => {\n        onClick();\n        console.log(\"profile/ clicked\");\n      }}\n    >\n      {progressReport[formulas[formulaId].id]?.isRunning === true\n        ? progressView\n        : normalView}\n    </div>\n  );\n}\n","import ProfileCard from \"@/components/main_FormulaCard\";\nimport { EnumFormulaType } from \"@/gateway/formula\";\nimport { DisplayFormulaParam } from \"@/gateway/provider\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Button,\n  Modal,\n  Stack,\n  TextField,\n  Tiles,\n  useToast,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport {\n  Layouts,\n  Layout as RGLayout,\n  Responsive,\n  WidthProvider,\n} from \"react-grid-layout\";\nimport { uuid } from \"uuidv4\";\nimport Layout from \"./layout\";\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst espressoGradient = [\n  \"bg-gradient-to-br from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-bl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-tl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-br from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-bl from-yellow-900 via-red-600 to-yellow-500\",\n  \"bg-gradient-to-tr from-yellow-900 via-red-600 to-yellow-500\",\n];\nconst teaGradients = [\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-b from-green-900 via-green-600 to-teal-500\",\n  \"bg-gradient-to-r from-green-900 via-green-600 to-teal-500\",\n];\n\nconst pourOverGradients = [\n  \"bg-gradient-to-b from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-b from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-l from-blue-900 via-blue-600 to-cyan-500\",\n  \"bg-gradient-to-t from-blue-900 via-blue-600 to-cyan-500\",\n];\n\n// function getRandomGradient(startColor: string, endColor: string) {\n//   const orientations = [\"to-r\", \"to-l\", \"to-b\", \"to-t\"];\n//   const randomOrientation =\n//     orientations[Math.floor(Math.random() * orientations.length)];\n\n//   const color = `bg-gradient-${randomOrientation} from-${startColor}-900 via-${startColor}-600 to-${endColor}-500`;\n//   // console.log('regnea', color)\n//   return color;\n// }\n\nfunction HomePage() {\n  // const [layout, setLayout] = useState<Layouts>({});\n  const [isLoaded, setLoaded] = useState(false);\n  const { formulas, setFormulas, addFormulaOpen, setAddFormulaOpen } =\n    useDeviceContext();\n  const { layout, setLayout } = useDeviceContext();\n\n  const router = useRouter();\n  const { showToast } = useToast();\n\n  const { registerFormulaClick, registerSelectedFormulaId } =\n    useDeviceContext();\n\n  function addFormula() {\n    const formulaId = uuid();\n    setLayout(\n      produce(layout, (draft) => {\n        draft[\"md\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n        draft[\"xs\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n        draft[\"sm\"]?.push({ i: formulaId, x: 0, y: 0, w: 1, h: 1 });\n      }),\n    );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        let backdrop: string = \"bg-white\";\n        if (formulaType == EnumFormulaType.Espresso) {\n          backdrop =\n            espressoGradient[\n              Math.floor(Math.random() * espressoGradient.length)\n            ];\n        } else if (formulaType == EnumFormulaType.PourOver) {\n          backdrop =\n            pourOverGradients[\n              Math.floor(Math.random() * pourOverGradients.length)\n            ];\n        } else if (formulaType == EnumFormulaType.Teapresso) {\n          backdrop =\n            teaGradients[Math.floor(Math.random() * teaGradients.length)];\n        }\n\n        const formula = {\n          id: formulaId,\n          title: stagingFormulaName,\n          text: \"New Formula\",\n          color: \"gray\",\n          backdrop: backdrop,\n          formulaType: formulaType,\n          // randomGradients[\n          //   Math.floor(Math.random() * randomGradients.length)\n          // ],\n          steps: [],\n        };\n        draft[formulaId] = formula;\n        console.log(\"fml/ create new\", formula);\n      }),\n    );\n\n    console.log(\"addFormula\", { layout, formulas });\n  }\n  function clickAddFormula() {\n    setAddFormulaOpen(true);\n  }\n\n  const renderedFormulas: React.ReactNode[] = [];\n  Object.values(formulas).forEach((fml: DisplayFormulaParam) => {\n    const formulaComponent = (\n      <div key={fml.id} className=\"grid-item__title \">\n        <div\n          className=\"h-full w-full\"\n          // https://github.com/react-grid-layout/react-grid-layout/issues/166\n          // onClick={() => {\n          //   alert(\"clicked\")\n          // }}\n        >\n          <ProfileCard\n            formulaId={fml.id}\n            onClick={() => {\n              registerFormulaClick(fml.id);\n            }}\n            onClickEdit={() => {\n              registerSelectedFormulaId(fml.id);\n              router.push(`/lab`);\n            }}\n          />\n        </div>\n      </div>\n    );\n\n    renderedFormulas.push(formulaComponent);\n  });\n\n  const { draggable } = useDeviceContext();\n  // if (draggable) {\n  //     renderedFormulas.push(\n  //       <div\n  //         key={\"add\"}\n  //         className=\"flex flex-col grid-item__title  bg-gray-300 cursor-pointer rounded-xl border  justify-center items-center hover:scale-105 transition-transform duration-200 hover:border-blue-500\"\n  //       >\n  //         <div\n  //           className=\"w-full h-full flex items-center justify-center drag-handle\"\n  //           onMouseDown={() => {\n  //             clickAddFormula();\n  //           }}\n  //           onTouchStart={() => {\n  //             clickAddFormula();\n  //           }}\n  //         >\n  //           <FaPlus size={32} className=\"text-white\" />\n  //         </div>\n  //         <button className=\"absolute top-0 right-0 drag-handle\">\n  //           <FiMove size={20} className=\"text-white m-1 drag-handle\" />\n  //         </button>\n  //       </div>\n  //     );\n\n  // }\n\n  const [stagingFormulaName, setStagingFormulaName] = useState(\"New Formula\");\n  const [formulaType, setFormulaType] = useState<EnumFormulaType>(\n    EnumFormulaType.Espresso,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <Layout>\n        <div className=\"dark:bg-gray h-[80vh]\">\n          <ResponsiveGridLayout\n            compactType={null}\n            className=\"layout relative\"\n            layouts={layout}\n            isDraggable={draggable}\n            isResizable={draggable}\n            useCSSTransforms={false}\n            // resizeHandles={[\"se\"]}\n            draggableHandle=\".drag-handle\"\n            breakpoints={{ lg: 1280, md: 992, sm: 767, xs: 430, xxs: 0 }}\n            cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n            onLayoutChange={(layout: RGLayout[], layouts: Layouts) => {\n              if (!isLoaded) {\n                setLoaded(true);\n                return;\n              }\n              // localStorage.setItem(\"fml-layout\", JSON.stringify(layouts));\n              setLayout(layouts);\n            }}\n            onDragStart={() => {\n              console.log(\"OnDragStart\");\n            }}\n          >\n            {renderedFormulas}\n          </ResponsiveGridLayout>\n        </div>\n        {addFormulaOpen && (\n          <Modal\n            title={t(\"Add Formula\")}\n            onClose={() => setAddFormulaOpen(false)}\n            primaryAction={{\n              label: \"OK\",\n              onPress: () => {\n                setAddFormulaOpen(false);\n                addFormula();\n              },\n            }}\n            secondaryAction={{\n              label: t(\"Cancel\"),\n              onPress: () => setAddFormulaOpen(false),\n            }}\n          >\n            <Stack space={4}>\n              <TextField\n                label={t(\"Formula Name\")}\n                value={stagingFormulaName}\n                onChange={(e: string) => {\n                  setStagingFormulaName(e);\n                }}\n              />\n              <Tiles space={4} columns={3}>\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.Espresso\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label=\"Espresso\"\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.Espresso);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.Teapresso\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label=\"Teapresso\"\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.Teapresso);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n                <Button\n                  hierarchy=\"primary\"\n                  kind={\n                    formulaType == EnumFormulaType.PourOver\n                      ? \"solid\"\n                      : \"outline\"\n                  }\n                  label=\"Pour over\"\n                  onPress={() => {\n                    setFormulaType(EnumFormulaType.PourOver);\n                  }}\n                  // icon={() => <GiManualMeatGrinder />}\n                />\n              </Tiles>\n            </Stack>\n          </Modal>\n        )}\n      </Layout>\n    </>\n  );\n}\nexport default HomePage;\n"],"names":["window","__NEXT_P","push","ProfileCard","formulaId","onClickEdit","onClick","progressReport","draggable","useDeviceContext","height","setHeight","useState","elementRef","useRef","formulas","setFormulas","useEffect","current","clientHeight","normalView","div","className","button","onMouseDown","e","preventDefault","stopPropagation","onTouchStart","PiDotsThreeCircleVerticalThin","size","FiMove","formulaType","EnumFormulaType","Espresso","GiCoffeeBeans","Teapresso","IoIosLeaf","PourOver","MdCoffeeMaker","h1","title","progressView","LineChart","dataKey","categories","hideLegend","hideXAxis","hideYAxis","data","Array","from","length","_","index","name","flowrate","Math","floor","random","ref","id","isRunning","backdrop","console","log","ResponsiveGridLayout","WidthProvider","Responsive","espressoGradient","teaGradients","pourOverGradients","isLoaded","setLoaded","addFormulaOpen","setAddFormulaOpen","layout","setLayout","router","useRouter","showToast","useToast","registerFormulaClick","registerSelectedFormulaId","renderedFormulas","Object","values","forEach","fml","formulaComponent","stagingFormulaName","setStagingFormulaName","setFormulaType","t","useTranslation","Layout","compactType","layouts","isDraggable","isResizable","useCSSTransforms","draggableHandle","breakpoints","lg","md","sm","xs","xxs","cols","onLayoutChange","onDragStart","Modal","onClose","primaryAction","label","onPress","uuid","produce","draft","i","x","y","w","h","formula","text","color","steps","addFormula","secondaryAction","Stack","space","TextField","value","onChange","Tiles","columns","Button","hierarchy","kind"],"sourceRoot":""}