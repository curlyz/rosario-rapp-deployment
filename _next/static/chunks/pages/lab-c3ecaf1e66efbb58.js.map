{"version":3,"file":"static/chunks/pages/lab-c3ecaf1e66efbb58.js","mappings":"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","sources":["webpack://_N_E/?c087","webpack://_N_E/./src/components/ui/separator.tsx","webpack://_N_E/./src/components/step/components/ActionRune.tsx","webpack://_N_E/./src/components/step/components/GrinderRune.tsx","webpack://_N_E/./src/components/ui/popover.tsx","webpack://_N_E/./src/components/step/components/TextRune.tsx","webpack://_N_E/./src/components/step/components/TimeRune.tsx","webpack://_N_E/./src/components/step/components/ProfileRune.tsx","webpack://_N_E/./src/components/step/components/IngredientRune.tsx","webpack://_N_E/./src/components/step/components/PumpRune.tsx","webpack://_N_E/./src/components/step/components/WeightRune.tsx","webpack://_N_E/./src/components/step/StepCard.tsx","webpack://_N_E/./src/pages/lab.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/lab\",\n      function () {\n        return require(\"private-next-pages/lab.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/lab\"])\n      });\n    }\n  ","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import {\n  EnumAction,\n  EnumProfileType,\n  EnumTarget,\n  IAction,\n  IProfileParam,\n  ITarget,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Button, Modal, Tiles } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useState } from \"react\";\nimport { FaChartArea } from \"react-icons/fa\";\nimport { FaClock } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\nimport { IoWaterSharp } from \"react-icons/io5\";\nimport { LiaFillDripSolid } from \"react-icons/lia\";\n\nexport const ActionRune = ({ index }: { index: number }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const [action, setAction] = useState<EnumAction>(\n    formulas[selectedFormulaId].steps[index].action.actionType as EnumAction,\n  );\n  const step = formulas[selectedFormulaId].steps[index];\n  const { t } = useTranslation();\n\n  function handleChangeAction(e: EnumAction) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index].action as IAction;\n        action.actionType = e as EnumAction;\n        const target = draft[selectedFormulaId].steps[index].target as ITarget;\n\n        // set the target\n        if (e == EnumAction.Grind) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Extract) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Rest) {\n          target.targetType = EnumTarget.Time;\n        } else if (e == EnumAction.Profile) {\n          target.targetType = EnumTarget.Weight;\n          let _action = action as IProfileParam;\n          _action.segments = _action.segments || [];\n          _action.profilingType =\n            _action.profilingType || EnumProfileType.Flowrate;\n        } else if (e == EnumAction.PourOver) {\n          target.targetType = EnumTarget.Weight;\n        }\n\n        draft[selectedFormulaId].steps[index].action = action;\n        draft[selectedFormulaId].steps[index].target = target;\n      }),\n    );\n  }\n\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  return (\n    <>\n      <h1\n        className=\"text-xl font-bold text-orange-900 underline decoration-pink-500\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {/* {step.action.actionType || \"Action\"} */}\n        {t(step.action.actionType) || \"Action\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"large\"\n          title={t(\"Select an action\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction(action);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Tiles space={4} columns={3}>\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Grind ? \"solid\" : \"outline\"}\n              label={t(\"Grind\")}\n              onPress={() => {\n                setAction(EnumAction.Grind);\n              }}\n              icon={() => <GiManualMeatGrinder />}\n              isDisabled={true}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Extract ? \"solid\" : \"outline\"}\n              label={t(\"Extract\")}\n              onPress={() => {\n                setAction(EnumAction.Extract);\n              }}\n              icon={() => <IoWaterSharp />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Rest ? \"solid\" : \"outline\"}\n              label={t(\"Rest\")}\n              onPress={() => {\n                setAction(EnumAction.Rest);\n              }}\n              icon={() => <FaClock />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Profile ? \"solid\" : \"outline\"}\n              label={t(\"Profile\")}\n              onPress={() => {\n                setAction(EnumAction.Profile);\n              }}\n              icon={() => <FaChartArea />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.PourOver ? \"solid\" : \"outline\"}\n              label={t(\"Pour Over\")}\n              onPress={() => {\n                setAction(EnumAction.PourOver);\n              }}\n              icon={() => <LiaFillDripSolid />}\n              isDisabled={false}\n            />\n            {/* <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Sound ? \"solid\" : \"outline\"}\n              label={t(\"Sound\")}\n              onPress={() => {\n                setAction(EnumAction.Sound);\n              }}\n              icon={() => <AiFillSound />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.RGB ? \"solid\" : \"outline\"}\n              label={t(\"RGB\")}\n              onPress={() => {\n                setAction(EnumAction.RGB);\n              }}\n              icon={() => <TbColorFilter />}\n            /> */}\n          </Tiles>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import {\n  Banner,\n  Button,\n  Modal,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { FaRegClock } from \"react-icons/fa\";\nimport { IoMdSkipForward } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\n// import { IOptionItemProps } from \"./OptionItem\";\n\n// const grinderBehaviourOptions: IOptionItemProps[] = [\n//   {\n//     title: \"can skip\",\n//     text: \"Grinder will skip this step if portafilter is not in position\",\n//     value: true,\n//   },\n//   {\n//     title: \"must wait\",\n//     text: \"Grinder will wait until the portafilter is in position\",\n//     value: false,\n//   },\n// ];\n\nexport const GrinderSkipRune = ({\n  value,\n  onChange,\n}: {\n  value: boolean;\n  onChange: Dispatch<SetStateAction<boolean>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [value]);\n  useEffectOnce(() => {\n    onChange(false);\n  });\n\n  const [skippable, setSkippable] = useState<boolean>(true);\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {skippable ? t(\"can skip\") : t(\"must wait\")}\n      </h1>\n\n      {isOpen && (\n        <Modal\n          autoFocus={false}\n          size=\"small\"\n          title={t(\"Set grinder behaviour\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(skippable);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Tiles space={8} columns={2}>\n              <Button\n                kind={skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Can skip\")}\n                onPress={() => setSkippable(true)}\n                icon={() => <IoMdSkipForward />}\n              />\n              <Button\n                kind={!skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Must wait\")}\n                onPress={() => setSkippable(false)}\n                icon={() => <FaRegClock />}\n              />\n            </Tiles>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Explaination\")}\n              description={\n                skippable\n                  ? t(\n                      \"Grinder will skip this step if portafilter is not in position\",\n                    )\n                  : t(\n                      \"Grinder will wait until the portafilter is in position, then it will start grinding\",\n                    )\n              }\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","export const TextRune = ({ text }: { text: string }) => {\n  /**\n   * This function displays the input text as normal text, but word by word so it will wrap around.\n   * @param {string} text - The text to be displayed.\n   */\n  return (\n    <>\n      {text.split(\" \").map((word, index) => (\n        <h1 key={index} className=\"mx-1 text-xl text-gray-900\">\n          {word}\n        </h1>\n      ))}\n    </>\n  );\n};\n","import {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { IPourOverParam, IProfileParam } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { SliderField, Columns, Column, Inline, NumberField, Banner, Modal, Stack } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\nimport { Step } from '../../../gateway/step';\n\nexport function TimeRune({\n  // value,\n  //   onChange,\n  // progress\n  index,\n  subIndex = -1, \n\n  /*\n    subIndex = -1 is for something\n    subIndex = -2 is for PourOver\n  */\n}: {\n  // value: number;\n  //       onChange: Dispatch<SetStateAction<number>>;\n  //      progress:  number;\n  index: number;\n  subIndex: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [current, setCurrent] = useState<number>(-1);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n  const [active, setActive] = useState(false);\n\n  const step = formulas[selectedFormulaId].steps[index];\n\n  const [time, setTime] = useState<number>(\n    subIndex == -1\n      ? step.target.value\n      : subIndex == -2\n        ? (step.action as IPourOverParam).duration || 0\n        : (step.action as IProfileParam).segments[subIndex]?.duration || 0,\n  );\n\n  /*\n    Progress doesn't always show up, it will disappear after 5 seconds\n    So after 5 seconds, it must be clear to null\n    So the number has its own internal state\n  */\n\n  let timeout = useRef<ReturnType<typeof setTimeout>>();\n\n\n  useEffect(() => {\n    const updated = subIndex == -1\n      ? step.target.value\n      : subIndex == -2\n        ? (step.action as IPourOverParam).duration || 0\n        : (step.action as IProfileParam).segments[subIndex]?.duration || 0;\n\n    if (updated != current) {\n      setTime(updated);\n      setActive(true);\n\n      clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n        setActive(false);\n      }, 1000);\n    }\n  }, [formulas, selectedFormulaId, index, subIndex, step, current]);\n\n  useEffect(() => {\n    const updated = formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value;\n    // if you have subIndex, there nis no need to update progress, handled by the line chart already, more visual\n    if (subIndex == -1) {\n      setCurrent(updated || -1);\n    }\n  }, [formulaFeedbacks, index, selectedFormulaId, subIndex]);\n  const { t } = useTranslation();\n\n  function handleChangeAction() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        if (subIndex == -1) {\n          draft[selectedFormulaId].steps[index].target.value = time;\n        } else if (subIndex == -2) {\n          (draft[selectedFormulaId].steps[index].action as IPourOverParam).duration = time\n        } else {\n          const action = step.action as IProfileParam;\n          action.segments[subIndex].duration = time;\n        }\n      }),\n    );\n  }\n\n  return (\n    <>\n      {current != null && current > 0&& (\n        <h1\n          className=\" text-xl font-bold text-green-800\"\n          onClick={() => setIsOpen(true)}\n        >\n          {`${(current / 1000).toFixed(1)}/`}\n        </h1>\n      )}\n      \n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {time.toFixed(1)}\n        \n        {\" \" + (time <= 1 ? t(\"second\") : t(\"seconds\"))}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"How long?\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction();\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"time\"\n                  value={time}\n                  onChange={setTime}\n                  label={t('Time')}\n                  minValue={0}\n                  maxValue={120}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={time}\n                  onChange={setTime}\n                  label={t('Time')}\n                  minValue={0}\n                  maxValue={500}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n\n\n  return (\n    <Popover\n      onOpenChange={(e) => {\n        setIsOpen(e != false);\n      }}\n      open={isOpen}\n    >\n      <PopoverTrigger>\n        <div\n          className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          {current != -1 && (\n            <h1\n              className=\" text-xl font-bold text-green-800\"\n              onClick={() => setIsOpen(true)}\n            >\n              {`${(current / 1000).toFixed(1)}/`}\n            </h1>\n          )}\n\n          <h1 className=\" text-xl font-bold text-blue-800\">\n            {time} {time <= 1 ? t(\"second\") : t(\"seconds\")}\n          </h1>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 space-y-8 rounded-xl  border\">\n        <IoIosCloseCircle\n          className=\"absolute right-2 top-2 text-gray-500\"\n          size={20}\n          onClick={() => {\n            setIsOpen(false);\n          }}\n        />\n\n        <SliderField\n          value={time}\n          onChange={(e: number) => {\n            setTime(e);\n            setFormulas(\n              produce(formulas, (draft) => {\n                // draft[selectedFormulaId].steps[index].target.value = e;\n                if (subIndex == -1) {\n                  draft[selectedFormulaId].steps[index].target.value = e;\n                } else {\n                  const action = step.action as IProfileParam;\n                  action.segments[subIndex].duration = e;\n                }\n              }),\n            );\n          }}\n          label={t(\"Time\")}\n          type=\"single\"\n          name=\"value\"\n          minValue={0}\n          maxValue={60}\n          step={1}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","// @refresh reset\n\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  EnumAction,\n  EnumProfileType,\n  IProfileParam,\n  IProfilingSegment,\n  IStepFeedback,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  NumberField,\n  Column, Columns, Modal,\n  LineChart,\n  SliderField,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FaMinus, FaPlus } from \"react-icons/fa6\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\nimport { TextRune } from \"./TextRune\";\nimport { TimeRune } from \"./TimeRune\";\n\ntype PressureDtps = {\n  timestamp: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\ntype FlowrateDtps = {\n  timestamp: number;\n  // flowrate: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\ntype PowerDtps = {\n  timestamp: number;\n  power: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\n\nexport type DataPoint = PressureDtps | FlowrateDtps | PowerDtps;\n\nconst generateDatapoints = (\n  segments: IProfilingSegment[],\n  sensor: EnumProfileType,\n  formulaFeedbacks?: IStepFeedback[\"action\"][],\n) => {\n  if (segments === undefined) return [];\n\n  const dps: DataPoint[] = [];\n  // for each segments, we add a new point\n  let totalTime = 0;\n  segments.forEach((segment) => {\n    totalTime += segment.duration;\n  });\n\n  var startTime = 0;\n  var previousValue = 0;\n  for (const segment of segments) {\n    if (segment.smooth == false) {\n      console.log(\"smooth is real\")\n      // add an additional step\n      if (sensor == EnumProfileType.Pressure) {\n        dps.push({\n          timestamp: startTime,\npressure: segment.value,\n          min: 0,\n          max: 11,\n        })\n      }\n      else if (sensor == EnumProfileType.Flowrate) {\n        dps.push({\n          timestamp: startTime,\n          flowrate: segment.value,\n          min: 0,\n          max: 51,\n        })\n      }\n      else if (sensor == EnumProfileType.Power) {\n        dps.push({\n          timestamp: startTime,\n          power: segment.value,\n          min: 0,\n          max: 101,\n        })\n      }\n      previousValue = segment.value\n    }\n\n\n\n    for (var time = 0; time < segment.duration; time += 1) {\n      var interimValue =\n        previousValue +\n        (segment.value - previousValue) * (time / segment.duration);\n      interimValue = Math.round(interimValue * 10) / 10;\n      if (sensor == EnumProfileType.Pressure) {\n        dps.push({\n          timestamp: startTime + time,\npressure: interimValue,\n          max: 10,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Flowrate) {\n        dps.push({\n          timestamp: startTime + time,\n          flowrate: interimValue,\n          max: 50,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Power) {\n        dps.push({\n          timestamp: startTime + time,\n          power: interimValue,\n          max: 100,\n          min: 0,\n          // time: timestamp\n        });\n      }\n    }\n    previousValue = segment.value;\n    startTime += segment.duration;\n  }\n  return dps;\n};\nexport const RenderedSegment = ({\n  // segments,\n  // // setSegments,\n  // sensor,\n  index,\n}: {\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n  index: number;\n  // setSegments: Dispatch<SetStateAction<IProfilingSegment[]>>;\n}) => {\n  useEffectOnce(() => {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam\n    //     action.actionType = \"Profile\";\n\n    //     action.segments = action.segments || [];\n\n    //     console.log(\"profile/ create object\", action)\n    //     if ((draft[index].action as IProfileParam).segments.length == 0) {\n    //       (draft[index].action as IProfileParam).segments = [\n    //         {\n    //           duration: 10,\n    //           value: 3,\n    //         },\n    //       ];\n    //     }\n    //     return draft\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index].action as IProfileParam;\n        action.actionType = \"Profile\";\n\n        action.segments = action.segments || [];\n\n        console.log(\"profile/ create object\", action);\n        if (action.segments.length == 0) {\n          action.segments = [\n            {\n              duration: 10,\n              value: 3,\n              smooth: false,\n            },\n          ];\n        }\n        return draft;\n      }),\n    );\n  });\n\n  // const [renderedSegments, setRenderedSegments] = useState<JSX.Element[]>([]);\n\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { t } = useTranslation();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n\n  const renderedSegments = (action.segments || []).map((segment, idx) => {\n    return (\n      <div className=\"flex-rol flex flex-wrap\" key={idx}>\n        {idx == 0 ? (\n          <TextRune text={t(\"First,\")} />\n        ) : (\n          <TextRune text={t(\"then\")} />\n        )}\n        <SegmentModeRune index={index} subIndex={idx} />\n\n        <ProfileValueRune index={index} subIndex={idx} />\n\n        {action.segments[idx].smooth ? (\n          <TextRune text={t(\"within\")} />\n\n        ) : (\n          <TextRune text={t(\"for\")} />\n\n        )}\n\n        <TimeRune\n          // progress={segments[idx].duration}\n          // value={segments[idx].duration}\n          // onChange={(e: number) => {\n          //   setSteps(\n          //     produce(steps, (draft) => {\n          //       const action = draft[index].action as IProfileParam;\n          //       action.segments[idx].duration = e;\n          //     })\n          //   );\n          // }}\n          index={index}\n          subIndex={idx}\n        />\n        <h1 className=\"text-xl\">\n          {idx === action.segments.length - 1 ? \".\" : \",\"}\n        </h1>\n      </div>\n    );\n  });\n\n  /**\n   *  Render segments in text readable format\n   *  First, extract with 9 bar for 2 seconds, then slowly turn to 1 bar for 5 seconds, then\n   *\n   * then is a button ?\n   *\n   *  */\n\n  /* \n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds] [+]\n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds], then, 2 bar within 2 seconds, then 3 bar whithin 20s\n  */\n  const addSegment = () => {\n    // setSegments(\n    //   produce(segments, (draft: IProfilingSegment[]) => {\n    //     // draft.push({\n    //     //   duration: 5,\n    //     //   value: 3\n    //     // })\n    //     draft.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments = action.segments || [];\n        action.segments.push({\n          duration: Math.floor(Math.random() * 30),\n          value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n          smooth: false,\n        });\n      }),\n    );\n  };\n  const removeSegment = () => {\n    // console.log(\"remove segment\", { segments });\n    // if (segments.length > 1) {\n    //   // setSegments(\n    //   //   produce(segments, (draft) => {\n    //   //     draft.splice(-1);\n    //   //   })\n    //   // );\n    // }\n    if (action.segments === undefined) return;\n    if (action.segments.length < 2) return;\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.pop();\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments.pop();\n        return draft;\n      }),\n    );\n  };\n  return (\n    <>\n      <Separator />\n      <ul>{renderedSegments}</ul>\n      <div className=\"flex h-10 w-fit cursor-pointer  flex-row items-center space-x-6 rounded-md bg-blue-100 p-2 transition-transform duration-200 border\">\n        <FaPlus color=\"#00aeef\" size={20} onClick={addSegment} />\n        <FaMinus color=\"#ff0000\" size={20} onClick={removeSegment} />\n      </div>\n    </>\n  );\n};\n\nexport const SegmentModeRune = ({\n  index,\n  subIndex = -1,\n}: {\n  index: number;\n  subIndex: number;\n}) => {\n\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext()\n  const step = formulas[selectedFormulaId].steps[index]\n  const { t } = useTranslation()\n\n\n  function handleSwap() {\n    setFormulas(produce(formulas, (draft) => {\n      (draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].smooth = !(draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].smooth\n    }))\n\n  }\n\n\n  /*\n    add reaching up or down\n    it need to have access to value of previous segment only\n  */\n  var previousValue = 0\n  if (subIndex > 0) {\n    previousValue = (step.action as IProfileParam).segments[subIndex - 1].value\n  }\n\n  var isUpward = previousValue < (step.action as IProfileParam).segments[subIndex].value\n  \n\n\n  return <>\n    <h1\n      className=\"text-xl font-bold text-orange-900\"\n      onClick={handleSwap}\n    >\n      {/* {step.action.actionType || \"Action\"} */}\n      {(step.action as IProfileParam).segments[subIndex].smooth ? (\n        isUpward ? t(\"slowly reaching up\") : t(\"slowly reaching down\")\n      ) : (t(\"hold at\"))}\n    </h1>\n  </>\n}\n\nexport const MagicLine = ({\n  // segments,\n  // sensor,\n  index,\n}: {\n  index: number;\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n}) => {\n  const [dataPoints, setDataPoints] = useState<DataPoint[]>([]);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n\n  const fbstore = useRef<IStepFeedback[\"action\"][]>([]);\n\n  useEffect(() => {\n    try {\n      const actionUpdate = formulaFeedbacks[selectedFormulaId][index]?.action as IStepFeedback[\"action\"];\n\n      if (!actionUpdate) {\n        console.warn(\"No update from profileRune\")\n        return;\n      }\n      // when ever formulaFeedbacks are updated, store the values here\n      console.log(\"Line/ add value\", actionUpdate);\n\n      fbstore.current = (window as any).fbstore || [];\n      (window as any).fbstore = fbstore.current;\n\n      var store = fbstore.current;\n      store.push({\n        ...actionUpdate,\n        timestamp: Math.round(actionUpdate.timestamp / 1000),\n      });\n      // filter out the store, using the timestamp, remove those that has higher timestmap than actionUpdate\n      // store = store.filter((s) => s.timestamp >= Math.round(actionUpdate.timestamp / 1000))\n\n      const dpts = generateDatapoints(segments, sensor, store);\n      // add the current reporting in\n      dpts.map((dpt, idx) => {\n        var current = null;\n        store.forEach((s) => {\n          // find the latest value\n          if (s.timestamp == dpt.timestamp) {\n            dpt.flowrate = s.input;\n            dpt.pressure = s.pressure * 10 || 0;\n          }\n        });\n      });\n      console.log(\"Line/ dpts\", dpts, store);\n      setDataPoints(dpts);\n    } catch (e) {\n      console.error(\"ProfileRune\", e);\n    }\n  }, [formulaFeedbacks, index, segments, selectedFormulaId, sensor]);\n\n  useEffect(() => {\n    setDataPoints(generateDatapoints(segments, sensor));\n  }, [segments, sensor]);\n\n  const attrMap = {};\n  attrMap[EnumProfileType.Pressure] = \"pressure\";\n  attrMap[EnumProfileType.Flowrate] = \"flowrate\";\n  attrMap[EnumProfileType.Power] = \"power\";\n\n  return (\n    <div className=\"hover:scale-120 w-full -translate-x-10 transition-transform duration-200\">\n      <LineChart\n        key={index}\n        height={300}\n        dataKey=\"Time\"\n        categories={[\n          // add the sensor of power herer\n\n          // sensor == EnumProfileType.Pressure ? \"pressure\" : \"flowrate\",\n          attrMap[sensor] || \"unknown sensor\",\n          \"flowrate\",\n          // \"max\",\n          // \"min\",\n          \"pressure\"\n        ]}\n        hideLegend={false}\n        hideXAxis={true}\n        hideYAxis={false}\n        data={dataPoints}\n        disableAnimation={true}\n      />\n    </div>\n  );\n};\nconst ProfileValueRune = ({\n  // segments,\n  // setValue,\n  // sensor,\n  // idx,\n  index,\n  subIndex,\n}: {\n  // segments: IProfilingSegment[];\n  // setValue: Dispatch<SetStateAction<number>>;\n  // sensor: EnumProfileType;\n  // idx: number;\n  index: number;\n  subIndex: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n  const idx = subIndex;\n\n  let unit: string = \"\";\n  if (sensor == EnumProfileType.Pressure) {\n    unit = \"bar\";\n  }\n  if (sensor == EnumProfileType.Flowrate) {\n    unit = \"gram/s\";\n  } else if (sensor == EnumProfileType.Power) {\n    unit = \"%\";\n  }\n\n  const maxValue: Record<EnumProfileType, number> = {\n    [EnumProfileType.Pressure]: 10,\n    [EnumProfileType.Flowrate]: 100,\n    [EnumProfileType.Power]: 100,\n  };\n  const [value, setValue] = useState<number>(segments[subIndex].value)\n  const { t } = useTranslation()\n  \n  \n  function handleUpdate() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        (draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].value = value\n      })\n    )\n  }\n\n\n  return (\n    <>\n      <div\n        className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        <h1 className=\"text-xl font-bold text-blue-800\">{value === null ? 100 : value} %</h1>\n      </div>\n\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Set target\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleUpdate();\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"power\"\n                  value={value}\n                  onChange={(e: number) => {\n                    setValue(e);\n                  }}\n                  label={t(sensor)}\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={value}\n                  onChange={setValue}\n                  onBlur={() => console.log(\"blur\")}\n                  label={t(sensor)}\n\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n\n            {/* <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"Power require an external hardware to be connected to the machine, other wise it is simply ON/OFF\")}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            /> */}\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n\n  return (\n    <Popover\n      onOpenChange={(e) => {\n        console.log(\"close\", e);\n        if (e == false) {\n          setIsOpen(false);\n        }\n      }}\n      open={isOpen}\n    >\n      <PopoverTrigger>\n        <div\n          className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          <h1 className=\" text-xl font-bold text-blue-800\">\n            {segments[idx].value} {unit}\n          </h1>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-96 min-w-96 rounded-xl border\">\n        <IoIosCloseCircle\n          className=\"absolute right-2 top-2 text-gray-500\"\n          size={20}\n          onClick={() => {\n            setIsOpen(false);\n          }}\n        />\n\n        <SliderField\n          value={segments[idx].value}\n          onChange={(e: number) => {\n            setFormulas(\n              produce(formulas, (draft) => {\n                (\n                  draft[selectedFormulaId].steps[index].action as IProfileParam\n                ).segments[idx].value = e;\n              }),\n            );\n          }}\n          label={sensor}\n          type=\"single\"\n          name=\"value\"\n          minValue={0}\n          maxValue={maxValue[sensor]}\n          step={0.1}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport const ProfileRune = ({\n  // value,\n  // onChange,\n  index,\n}: {\n  // value: EnumProfileType;\n  // onChange: Dispatch<SetStateAction<string>>;\n  index: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n\n  const [profileType, setProfileType] = useState<EnumProfileType>(\n    action.profilingType || EnumProfileType.Flowrate,\n  );\n\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  function onChange(sensor: EnumProfileType) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        draft[selectedFormulaId].steps[index].action.actionType =\n          EnumAction.Profile;\n        (\n          draft[selectedFormulaId].steps[index].action as IProfileParam\n        ).profilingType = sensor;\n      }),\n    );\n  }\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {t(action.profilingType) || EnumProfileType.Flowrate}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title=\"Select an profiling method\"\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(profileType);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={16}>\n            <Tiles space={8} columns={2}>\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Flowrate ? \"solid\" : \"outline\"\n                }\n                label=\"Flowrate\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Flowrate);\n                }}\n              />\n\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Pressure ? \"solid\" : \"outline\"\n                }\n                label=\"Pressure\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Pressure);\n                }}\n              />\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Power ? \"solid\" : \"outline\"\n                }\n                label=\"Power\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Power);\n                }}\n              />\n            </Tiles>\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { IGrinderState } from \"@/gateway/grinder\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  Inline,\n  Modal,\n  Stack,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\n\nexport const IngredientRune = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: Dispatch<SetStateAction<string>>;\n}) => {\n  console.log(\"action/ recreate\");\n\n  const [isOpen, setIsOpen] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n\n  const [ingredient, setIngridient] = useState<string>(value || \"\");\n  const { t } = useTranslation();\n  const router = useRouter();\n  useEffectOnce(() => {\n    onChange(\"\");\n  });\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {ingredient == \"\" ? t(\"[Select ingredient]\") : ingredient}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Select ingredient\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(ingredient);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Inline space={4}>\n              {grinderSettings.map((grinder: IGrinderState, index: number) => {\n                return (\n                  <Button\n                    key={index}\n                    kind={ingredient == grinder.name ? \"solid\" : \"outline\"}\n                    hierarchy=\"primary\"\n                    label={grinder.name}\n                    onPress={() => setIngridient(grinder.name)}\n                  />\n                );\n              })}\n              {/* <Button\n                key={-1}\n                kind={\"outline\"}\n                hierarchy=\"primary\"\n                label={\"+\"}\n                onPress={() => {\n                  router.push(\"/setting\");\n                }}\n              /> */}\n            </Inline>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Reminder\")}\n              description={t(\n                \"You can set up your grinder in the settings, the hardware can be connected to the machine wirelessly to the espresso machine\",\n              )}\n              // action={{\n              //   label: \"Learn more\",\n              //   onPress: () => {\n              //     window.open(\"https://www.google.com\");\n              //   },\n              // }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { Banner, Modal, SliderField, Stack, NumberField, Columns, Column } from \"@buildo/bento-design-system\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\nimport { useTranslation } from \"next-export-i18n\";\n\nexport const PumpRune = ({\n  value,\n  onChange,\n}: {\n  value: number;\n  onChange: Dispatch<SetStateAction<number>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [power, setPower] = useState<number>(value == null ? 100 : value);\n\n  useEffectOnce(() => {\n    onChange(power)\n  })\n  const {t} = useTranslation()\n\n  return (\n    <>\n      <div\n        className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        <h1 className=\"text-xl font-bold text-blue-800\">{value === null ? 100 : value} %</h1>\n      </div>\n\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Set pump power\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              console.log(\" update power\", power);\n              onChange(power);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"power\"\n                  value={power}\n                  onChange={(e: number) => {\n                    console.log(\"Power is updated for pump\", e);\n                    setPower(e);\n                  }}\n                  label={t(\"Pump Power\")}\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={power}\n                  onChange={setPower}\n                  onBlur={() => console.log(\"blur\")}\n                  label={t(\"\")}\n                  \n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n\n            <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"Power require an external hardware to be connected to the machine, other wise it is simply ON/OFF\")}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { EnumTarget, IPourOverParam } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Banner, Modal, SliderField, Stack, NumberField , Column, Columns} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"next-export-i18n\";\n\nexport function WeightRune({\n  // value,\n  //   onChange,\n  // progress,\n  subIndex = -1,\n  index,\n}: {\n  // value: number;\n  // onChange: Dispatch<SetStateAction<number>>;\n  // progress: number;\n  subIndex: number;\n  index: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId, formulaFeedbacks } =\n    useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const [weight, setWeight] = useState<number>(subIndex == -1 ? \n    step.target.value : (step.action as IPourOverParam).stepAmount || 0  \n  );\n\n  const [current, setCurrent] = useState<number>(0);\n  const { t } = useTranslation()\n\n\n\n  /*\n      Progress doesn't always show up, it will disappear after 5 seconds\n      So after 5 seconds, it must be clear to null\n      So the number has its own internal state\n  */\n\n  useEffect(() => {\n    const updated =\n      formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value || 0;\n    setCurrent(updated * 10);\n  }, [formulaFeedbacks, index, selectedFormulaId]);\n\n  let timeout = useRef(null);\n\n  // useEffect(() => {\n  //   setCurrent(progress);\n\n  //   clearTimeout(timeout.current)\n  //   timeout.current = setTimeout(() => {\n  //     setCurrent(null)\n  //   }, 5000)\n  //   console.log(\"Progress is updated for weight\", progress)\n  // }, [progress])\n\n  function handleChangeAction() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        if (subIndex == -1) {\n          draft[selectedFormulaId].steps[index].target.targetType =\n            EnumTarget.Weight;\n          draft[selectedFormulaId].steps[index].target.value = weight;\n\n        }\n        else {\n          const action = step.action as IPourOverParam\n          action.stepAmount = weight\n        }\n      }),\n    );\n  }\n\n  return (\n    <>\n      {current != null  && current > 0 && (\n        <h1\n          className=\" text-xl font-bold text-green-800\"\n          onClick={() => setIsOpen(true)}\n        >\n          {`${(current / 10).toFixed(1)}/`}\n        </h1>\n      )}\n\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {weight.toFixed(1)}\n        {weight <= 1 ? \" gram\" : \" grams\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"How much ?\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction();\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                name=\"weight\"\n                value={weight}\n                onChange={setWeight}\n                label=\"Weight\"\n                minValue={0}\n                maxValue={500}\n                step={1}\n                />\n                </Column>\n              <Column width={\"1/5\"}>\n              <NumberField\n                value={weight}\n                onChange={setWeight}\n                label=\"Weight\"\n                minValue={0}\n                maxValue={500}\n                step={1}\n              />\n              </Column>\n            </Columns>\n            <Banner\n              kind=\"informative\"\n              title=\"Reminder\"\n              description={t(\"Calibration is required for accurate weight, please go to Settings\")}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import {\n  EnumAction,\n  IExtractParam,\n  IGrindParam,\n  IPourOverParam,\n  IRestParam,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { produce } from \"immer\";\nimport { MdOutlineClear } from \"react-icons/md\";\nimport { ActionRune } from \"./components/ActionRune\";\nimport { GrinderSkipRune } from \"./components/GrinderRune\";\nimport { MagicLine, RenderedSegment } from \"./components/ProfileRune\";\nimport {motion, AnimatePresence} from 'framer-motion'\n\nimport { useTranslation } from \"next-export-i18n\";\nimport { IngredientRune } from \"./components/IngredientRune\";\nimport { ProfileRune } from \"./components/ProfileRune\";\nimport { PumpRune } from \"./components/PumpRune\";\nimport { TextRune } from \"./components/TextRune\";\nimport { TimeRune } from \"./components/TimeRune\";\nimport { WeightRune } from \"./components/WeightRune\";\n\nexport type ProfilingType = \"pressure sensor\" | \"flowrate profiler\";\nexport type GrinderBehaviour = \"can skip\" | \"must wait\";\nexport type ActionType = \"Grind\" | \"Extract\" | \"Rest\" | \"Profiling\";\n\n// ----------------------------------------------------------- //\n\nfunction Wrapper() {\n  return (\n    <div className=\"group relative mx-auto max-w-7xl\">\n      <div className=\"absolute -inset-1 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 opacity-25 blur transition duration-1000 group-hover:opacity-100 group-hover:duration-200\">\n        <div className=\"items-pop flex justify-start space-x-6 rounded-lg bg-white px-7 py-6 leading-none ring-1 ring-gray-900\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport function NewStepCard({\n  onDelete,\n  index,\n}: {\n  onDelete: () => void;\n  index: number;\n}) {\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const steps = formulas[selectedFormulaId].steps || [];\n  const { t } = useTranslation();\n  return (\n    <AnimatePresence>\n      <motion.div\n        key={index}\n        initial={{\n          scale: 0,\n          opacity: 0\n        }}\n        animate={{\n          scale: 1,\n          opacity: 1\n        }}\n        transition={{\n          ease: \"easeInOut\"\n        }}\n        exit={{\n          scale: 0,\n          opacity: 0\n        }}\n\n\n        className=\"-inset-1 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600\"\n      >\n        <div className=\"flex h-fit w-96 max-w-[calc(90vw)] flex-col rounded-xl  border  bg-white p-4 drop-shadow-xl transition-transform duration-200 hover:border-blue-500\">\n          <div\n            className=\"absolute right-0 top-0 cursor-pointer p-2\"\n            onClick={() => onDelete()}\n          >\n            <MdOutlineClear className=\"text-gray-300\" />\n          </div>\n          <div className=\"inline-flex max-w-96 flex-wrap items-center gap-2 space-x-1 text-wrap\">\n            <ActionRune index={index} />\n\n            {formulas[selectedFormulaId].steps[index].action.actionType ===\n              EnumAction.Grind && (\n                <>\n                  <WeightRune index={index} subIndex={-1} />\n                  <TextRune text={t(\"of\")} />\n                  <IngredientRune\n                    value={(steps[index].action as IGrindParam).ingredient}\n                    onChange={(ingredient: string) => {\n                      // setSteps(\n                      //   produce(steps, (draft) => {\n                      //     (draft[index].action as IGrindParam).ingredient =\n                      //       ingredient;\n                      //   })\n                      // );\n\n                      setFormulas(\n                        produce(formulas, (draft) => {\n                          (\n                            draft[selectedFormulaId].steps[index]\n                              .action as IGrindParam\n                          ).ingredient = ingredient;\n                        }),\n                      );\n                    }}\n                  />\n                  <TextRune text={t(\"bean, grinder\")} />\n                  <GrinderSkipRune\n                    value={(steps[index].action as IGrindParam).canSkip}\n                    onChange={(state: boolean) => {\n                      // setSteps(\n                      //   produce(steps, (draft) => {\n                      //     (draft[index].action as IGrindParam).canSkip = state;\n                      //     draft[index].action.actionType = EnumAction.Grind;\n                      //   })\n                      // );\n                      setFormulas(\n                        produce(formulas, (draft) => {\n                          (\n                            draft[selectedFormulaId].steps[index]\n                              .action as IGrindParam\n                          ).canSkip = state;\n                          draft[selectedFormulaId].steps[index].action.actionType =\n                            EnumAction.Grind;\n                        }),\n                      );\n                    }}\n                  />\n\n                  {(steps[index].action as IGrindParam).canSkip === true ? (\n                    <TextRune text={t(\"this step is portafilter is absent\")} />\n                  ) : (\n                    <TextRune text={t(\"until portafilter is present\")} />\n                  )}\n                </>\n              )}\n            {steps[index].action.actionType === EnumAction.Extract && (\n              <>\n                {/* <TextRune text=\"a shot of\" /> */}\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\"with pump power\")} />\n                <PumpRune\n                  value={(steps[index].action as IExtractParam).power}\n                  onChange={(power: number) => {\n                    // setSteps(\n                    //   produce(steps, (draft) => {\n                    //     (draft[index].action as IExtractParam).actionType =\n                    //       EnumAction.Extract;\n                    //     (draft[index].action as IExtractParam).power = power;\n                    //   })\n                    // );\n\n                    setFormulas(\n                      produce(formulas, (draft) => {\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IExtractParam\n                        ).actionType = EnumAction.Extract;\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IExtractParam\n                        ).power = power;\n                      }),\n                    );\n                  }}\n                />\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.PourOver && (\n              <>\n                <TextRune text={t(\"total of\")} />\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\", extract\")} />\n                <WeightRune index={index} subIndex={0} />\n                <TextRune text={t(\"every\")} />\n                <TimeRune subIndex={-2} index={index} />\n                <TextRune text={t(\"with pump power of\")} />\n                <PumpRune\n                  value={(steps[index].action as IPourOverParam).pumpPower}\n                  onChange={(power: number) => {\n                    // setSteps(\n                    //   produce(steps, (draft) => {\n                    //     (draft[index].action as IExtractParam).actionType =\n                    //       EnumAction.Extract;\n                    //     (draft[index].action as IExtractParam).power = power;\n                    //   })\n                    // );\n\n                    setFormulas(\n                      produce(formulas, (draft) => {\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IPourOverParam\n                        ).actionType = EnumAction.PourOver;\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IPourOverParam\n                        ).pumpPower = power;\n                      }),\n                    );\n                  }}\n                />\n\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.Rest && (\n              <>\n                <TextRune text={t(\"for\")} />\n                <TimeRune\n                  subIndex={-1}\n                  index={index}\n                // valveState={(steps[index].action as IRestParam).valveState}\n                // toggleChecked={(checked: boolean) => {\n                //   setSteps(\n                //     produce(steps, (draft) => {\n                //       draft[index].target.targetType = EnumTarget.Time;\n                //       (draft[index].action as IRestParam).valveState = checked;\n                //     })\n                //   );\n                // }}\n                />\n                {(steps[index].action as IRestParam).valveState && (\n                  <TextRune text=\"but keep valve open\" />\n                )}\n              </>\n            )}\n            {steps[index].action.actionType === \"Profile\" && (\n              <>\n                <TextRune text={t(\"to extract\")} />\n\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\"using\")} />\n                <ProfileRune index={index} />\n                <TextRune text={t(\"profiling\")} />\n                <RenderedSegment\n                  index={index}\n                // segments={(steps[index].action as IProfileParam).segments}\n                // setSegments={() => {\n                //   setSteps(\n                //     produce(steps, draft => {\n                //       (draft[index].action as IProfileParam).segments = segments;\n                //     })\n                //   );\n                // }}\n                // sensor={(steps[index].action as IProfileParam).profilingType}\n                />\n                <MagicLine\n                  index={index}\n                // segments={(steps[index].action as IProfileParam).segments}\n                // sensor={(steps[index].action as IProfileParam).profilingType}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      </motion.div>\n\n    </AnimatePresence>\n  );\n}\n","\"use client\";\n\nimport Head from 'next/head'\nimport { NewStepCard } from \"@/components/step/StepCard\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { EnumAction, EnumTarget } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Body,\n  Button,\n  Modal,\n  TextField,\n  Banner,\n  CheckboxField,\n  Tiles,\n  SliderField,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useSelectedLanguage, useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { ReactNode, useEffect, useRef, useState } from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  DropResult,\n  Droppable,\n  ResponderProvided,\n} from \"react-beautiful-dnd\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport {\n  FaDownload,\n  FaPlay,\n  FaShareAlt,\n  FaStop,\n  FaWindowClose,\n} from \"react-icons/fa\";\nimport { uuid } from \"uuidv4\";\nimport Layout from \"./layout\";\nimport { downloadFormula } from \"@/gateway/formula\";\nimport { queryDevice } from \"@/gateway/connection\";\n\nimport { SketchPicker, CirclePicker, ColorChangeHandler } from 'react-color';\n\n\nconst BetterButton = ({\n  icon,\n  label,\n  color,\n  onClick,\n}: {\n  icon: ReactNode;\n  label: string;\n  color: string;\n  onClick: () => void;\n}) => {\n  return (\n    <div\n      className={`flex size-12 cursor-pointer flex-row items-center space-x-1 rounded-xl border bg-white p-4 hover:border-blue-500`}\n    >\n      {icon}\n    </div>\n  );\n};\n\nconst Detail = () => {\n  const router = useRouter();\n  const id = router.query.slug;\n\n\n\n  const [downloadTargetGroup, setDownloadTargetGroup] = useState(-1);\n  const [downloadTargetButton, setDownloadTargetButton] = useState(-1);\n\n  const [downloadWindow, setDownloadWindow] = useState(false);\n  const [shareWindow, setShareWindow] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [running, setRunning] = useState<boolean>(false);\n  const [shareToken, setShareToken] = useState<string>('')\n  const {\n    selectedFormulaId,\n    registerSelectedFormulaId,\n    setFormulas,\n    formulas,\n    setSelectedPage,\n    registerFormulaClick,\n    cancelFormulaClick,\n    progressReport,\n  } = useDeviceContext();\n\n\n\n\n  const [winReady, setwinReady] = useState(false);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const [colorModal, setColorModal] = useState<boolean>(false);\n  const { formulaFeedbacks } = useDeviceContext();\n\n  useEffect(() => {\n    if (timeoutRef) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => {\n        setRunning(false);\n      }, 2000);\n      setRunning(true);\n    }\n  }, [formulaFeedbacks, selectedFormulaId]);\n\n  useEffect(() => {\n    setTimeout(async () => {\n      await queryDevice({\n        command: 'group.locate',\n        buttonId: downloadTargetButton + 1,\n        groupId: downloadTargetGroup + 1,\n      })\n\n    })\n  }, [downloadTargetGroup, downloadTargetButton])\n\n  //TODO: Assume don't have any formular before\n  function handleAddStep() {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     draft.push({\n    //       id: uuid(),\n    //       action: {\n    //         actionType: EnumAction.Rest,\n    //         valveState: false,\n    //       },\n    //       target: {\n    //         targetType: EnumTarget.Time,\n    //         value: 10,\n    //       },\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        formula.steps.push({\n          id: uuid(),\n          action: {\n            actionType: EnumAction.Rest,\n            valveState: false,\n          },\n          target: {\n            targetType: EnumTarget.Time,\n            value: 10,\n          },\n        });\n      }),\n    );\n  }\n\n  function handleDeleteStep(id: string) {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     return draft.filter(function (item) {\n    //       return item?.id !== id;\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        formula.steps = formula.steps.filter(function (item) {\n          return item?.id !== id;\n        });\n        return draft;\n      }),\n    );\n  }\n\n  function handleDragAndDrop(result: DropResult, provided: ResponderProvided) {\n    if (!result.destination) return;\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const [reorderedItem] = draft.splice(result.source.index, 1);\n    //     draft.splice(result.destination.index, 0, reorderedItem);\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        const [reorderedItem] = formula.steps.splice(result.source.index, 1);\n        formula.steps.splice(result?.destination?.index || 0, 0, reorderedItem);\n        return draft;\n      }),\n    );\n  }\n\n  useEffect(function () {\n    setwinReady(true);\n  }, []);\n  useEffect(() => {\n    console.log(\"lab/ re-render\", selectedFormulaId);\n  }, [selectedFormulaId]);\n\n  const listDrinkType = () => {\n    return (\n      <div className=\"flex h-16 w-full flex-row justify-between space-x-4\"></div>\n    );\n  };\n  const { lang } = useSelectedLanguage();\n  const { t } = useTranslation();\n\n  \n\n\n\n  const translations_run = t(\"Run\");\n  return (\n    <Layout>\n      <Head>\n        <title>☕ ROSARIO</title>\n      </Head>\n\n      {colorModal && (\n        <Modal\n          size=\"small\"\n          autoFocus={false}\n          title={t(\"Set color\")}\n          onClose={() => setColorModal(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: async () => {\n              setColorModal(false)\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setColorModal(false),\n          }}\n        >\n          <div className=\"flex items-center justify-center w-full h-full p-4\">\n            <CirclePicker\n              className='m-4'\n              color={formulas[selectedFormulaId]?.color || \"#00aeef\"}\n              onChange={(color: any, e: any) => {\n                setFormulas(produce(formulas, draft => {\n                  if (!formulas[selectedFormulaId]) return;\n                  formulas[selectedFormulaId].color = color.hex\n                }))\n              }}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {downloadWindow && (\n        <Modal\n          size=\"large\"\n          autoFocus={false}\n          title={t(\"Assign to Button\")}\n          onClose={() => setDownloadWindow(false)}\n          primaryAction={{\n            label: t(\"Download\"),\n            onPress: async () => {\n              console.log('lab/ download formula to', { downloadTargetGroup, downloadTargetButton, selectedFormulaId })\n\n              await downloadFormula({ groupId: downloadTargetGroup + 1, buttonId: downloadTargetButton + 1, formulaId: selectedFormulaId })\n\n              setLoading(true);\n              setTimeout(() => {\n                setDownloadWindow(false);\n              }, 1000);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setDownloadWindow(false),\n          }}\n        >\n          <Body size=\"medium\">\n            {t(\n              \"This process will save the formula to a physical button on your cofee machine so you don't always need a mobile device connected\",\n            )}\n            <br />\n            <br />\n\n            <Banner\n              kind=\"informative\"\n              title={t('Notice')}\n              description={t(\n                \"The button order might not be the same physically, right after clicking saved, the button will blink to indicate which button it is in real life\"\n              )}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n\n\n          </Body>\n\n          <div className=\"flex h-32 w-full flex-col space-y-4 p-4\">\n            <Tiles space={8} columns={3}>\n              {[1, 2, 3].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Group ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetGroup ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetGroup(index)}\n                  />\n                );\n              })}\n            </Tiles>\n            <Tiles space={8} columns={4}>\n              {[1, 2, 3, 4].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Button ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetButton ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetButton(index)}\n                  />\n                );\n              })}\n            </Tiles>\n          </div>\n        </Modal>\n      )}\n\n      {shareWindow && (\n        <Modal\n          title=\"Share your formula\"\n          onClose={() => setShareWindow(false)}\n          primaryAction={{\n            label: \"Copy\",\n            onPress: () => {\n              navigator.clipboard.writeText(shareToken).then(() => {\n                console.log(\"Share token copied to clipboard.\");\n              }, (err) => {\n                console.error(\"Could not copy share token to clipboard: \", err);\n              });\n              setShareWindow(false)\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setShareWindow(false),\n          }}\n        >\n          <Banner\n            kind={formulas[selectedFormulaId].isShared ? \"positive\" : \"informative\"}\n            title={formulas[selectedFormulaId].isShared ? t('Shared to public') : t(\"Do you want to share this to public ?\") }\n            description={\n              formulas[selectedFormulaId].isShared ? t(\n              \"This formula is already shared, people can search for it using the formula name you choose.\"\n            ) : t(\"If you share this formula, people can try it out also. They will get a copy of this formula.\")}\n            action={{\n              label: formulas[selectedFormulaId].isShared ? t(\"Hide\") : t(\"Share\"),\n              onPress: () => {\n                setFormulas(produce(formulas, draft => {\n                  draft[selectedFormulaId].isShared = !draft[selectedFormulaId].isShared\n                }))\n\n              },\n            }}\n          />\n          {/* <CheckboxField\n            label=\"Share this to community\"\n            name=\"terms-and-conditions\"\n            value={formulas[selectedFormulaId].isShared}\n            onChange={(state: boolean) => {\n              setFormulas(produce(formulas, draft => {\n                draft[selectedFormulaId].isShared = state\n              }))\n            }}\n          /> */}\n          \n          <div className=\"flex justify-center items-center bg-gray-800 text-white p-4 rounded-lg mt-2\">\n            <h1 className=\"text-2xl tracking-[.4em]\">{shareToken}</h1>\n          </div>\n        </Modal>\n      )}\n\n      <div className=\"flex flex-col  items-center space-y-4 p-4\">\n        <div\n          className={\n            \" flex  h-fit w-96 max-w-[calc(90vw)] flex-col space-y-4 rounded-xl border p-4 shadow-xl\"\n          }\n        >\n          <div className=\"flex items-center w-full\">\n            <div className=\"flex-grow \">\n              <TextField\n                value={formulas[selectedFormulaId]?.title}\n                onChange={(e: string) => {\n                  setFormulas(\n                    produce(formulas, (draft) => {\n                      console.log(\"Formulas\", formulas, selectedFormulaId);\n                      draft[selectedFormulaId].title = e;\n                    }),\n                  );\n                }}\n                label={t(\"Formula\")}\n                placeholder=\"Untitled formula\"\n              />\n\n            </div>\n            <button className=\"ml-2 h-11 w-11  rounded-xl mt-6 ring-1 ring-black \"\n              style={{\n                backgroundColor: formulas[selectedFormulaId]?.color || \"#000000\"\n              }}\n              onClick={() => {\n                setColorModal(true)\n              }}\n            ></button>\n          </div>\n\n          {/* {listDrinkType()} */}\n\n          <div className=\"flex flex-row items-center justify-between space-x-1 text-white\">\n            {running === true ? (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-orange-400 to-red-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  cancelFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaStop />\n                <h1>Stop</h1>\n              </div>\n            ) : (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-400 to-emerald-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  // console.log(\"play\");\n                  registerFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaPlay />\n                <h1>{t(\"Run\")}</h1>\n              </div>\n            )}\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-purple-800 via-violet-900 to-purple-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"download\");\n                // open a bento model\n                setDownloadWindow(true);\n              }}\n            >\n              <FaDownload />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-500 to-blue-600 p-4 hover:border-blue-500`}\n              onClick={async () => {\n\n                const data = {\n                  formulas: formulas[selectedFormulaId],\n                  timestamp: Date.now()\n                }\n                const request = await fetch('https://api.anatalab.com/gateway/rosario/create_token', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                })\n\n                const response = await request.json()\n                console.log('Share token response', response)\n\n                const assignedToken = response.token\n                setShareToken(assignedToken)\n                setShareWindow(true);\n              }}\n            >\n              <FaShareAlt />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-red-500 to-red-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"delete\");\n                setSelectedPage(\"Formula\");\n                registerSelectedFormulaId(\"\");\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    // return draft.filter(item => item?.id !== selectedFormulaId)\n                    delete formulas[selectedFormulaId];\n                  }),\n                );\n\n                router.push(\"/\");\n              }}\n            >\n              <FaWindowClose />\n            </div>\n          </div>\n\n          <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Pressure build-up time\")}\n              value={formulas[selectedFormulaId]?.buildupDuration || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].buildupDuration = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={10}\n            />\n          </div>\n          <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Weight compensation (gram)\")}\n              value={formulas[selectedFormulaId]?.lossyWeight || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].lossyWeight = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={100}\n            />\n          </div>\n          {/* <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Maximum extraction time (s)\")}\n              value={formulas[selectedFormulaId]?.maximumDuration || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].maximumDuration = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={100}\n            />\n          </div> */}\n\n\n        </div>\n        <Separator />\n        <div className=\" mix-w-80 flex flex-col items-center justify-center py-3 \">\n          <DragDropContext\n            onDragEnd={handleDragAndDrop}\n            onBeforeDragStart={() => {\n              console.log(\"onBeforeDragStart\");\n            }}\n            onDragStart={() => {\n              console.log(\"onDragStart\");\n            }}\n            onDragUpdate={() => {\n              console.log(\"onDragUpdate\");\n            }}\n          >\n            <div className=\"flex w-full flex-row\">\n              <Droppable droppableId=\"ROOT\">\n                {(provided) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"mx-auto flex w-full flex-col items-center justify-between space-y-4\"\n                  >\n                    {(formulas[selectedFormulaId]?.steps || [])?.map(\n                      (item, idx) => {\n                        console.log(\"render\", { item, idx });\n                        return (\n                          winReady && (\n                            <Draggable\n                              draggableId={item?.id}\n                              key={item?.id}\n                              index={idx}\n                            >\n                              {(provided) => (\n                                <div\n                                  className=\"\"\n                                  {...provided.dragHandleProps}\n                                  {...provided.draggableProps}\n                                  ref={provided.innerRef}\n                                >\n                                  <NewStepCard\n                                    onDelete={() => handleDeleteStep(item?.id)}\n                                    index={idx}\n                                  // onChange={(params) =>\n                                  //   handleChange(item?.id, params)\n                                  // }\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          )\n                        );\n                      },\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n          <button\n            className=\"my-4 flex h-16 w-80 cursor-pointer flex-row items-center  justify-center space-x-4 rounded-xl border bg-blue-100\"\n            onClick={handleAddStep}\n          >\n            <AiFillPlusCircle color=\"#1180EF\" size={30} />\n            <p className=\"text-lg font-bold text-[#1180EF]\">{t(\"Add Step\")}</p>\n          </button>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Detail;\n"],"names":["window","__NEXT_P","push","Separator","React","ref","className","orientation","decorative","props","SeparatorPrimitive","cn","displayName","ActionRune","index","isOpen","setIsOpen","useState","formulas","setFormulas","selectedFormulaId","useDeviceContext","action","setAction","steps","actionType","step","t","useTranslation","useEffect","h1","onClick","Modal","size","title","onClose","primaryAction","label","onPress","e","produce","draft","target","EnumAction","Grind","targetType","EnumTarget","Weight","Extract","Rest","Time","Profile","_action","segments","profilingType","EnumProfileType","Flowrate","PourOver","secondaryAction","Tiles","space","columns","Button","hierarchy","kind","icon","GiManualMeatGrinder","isDisabled","IoWaterSharp","FaClock","FaChartArea","LiaFillDripSolid","GrinderSkipRune","value","onChange","useEffectOnce","skippable","setSkippable","autoFocus","Stack","IoMdSkipForward","FaRegClock","Banner","description","PopoverPrimitive","PopoverContent","align","sideOffset","TextRune","text","split","map","word","TimeRune","subIndex","current","setCurrent","formulaFeedbacks","active","setActive","time","setTime","duration","timeout","useRef","updated","clearTimeout","setTimeout","toFixed","Columns","Column","width","SliderField","type","name","minValue","maxValue","NumberField","generateDatapoints","sensor","undefined","dps","totalTime","forEach","segment","startTime","previousValue","smooth","console","log","Pressure","timestamp","pressure","min","max","flowrate","Power","power","interimValue","Math","round","RenderedSegment","length","renderedSegments","idx","div","SegmentModeRune","ProfileValueRune","ul","FaPlus","color","floor","random","FaMinus","pop","isUpward","MagicLine","dataPoints","setDataPoints","fbstore","actionUpdate","warn","store","dpts","dpt","s","input","error","attrMap","LineChart","height","dataKey","categories","hideLegend","hideXAxis","hideYAxis","data","disableAnimation","unit","setValue","onBlur","ProfileRune","profileType","setProfileType","IngredientRune","grinderSettings","ingredient","setIngridient","useRouter","Inline","grinder","PumpRune","setPower","open","WeightRune","weight","setWeight","stepAmount","NewStepCard","onDelete","AnimatePresence","motion","initial","scale","opacity","animate","transition","ease","exit","MdOutlineClear","canSkip","state","pumpPower","valveState","router","downloadTargetGroup","setDownloadTargetGroup","query","slug","downloadTargetButton","setDownloadTargetButton","downloadWindow","setDownloadWindow","shareWindow","setShareWindow","loading","setLoading","running","setRunning","shareToken","setShareToken","registerSelectedFormulaId","setSelectedPage","registerFormulaClick","cancelFormulaClick","progressReport","winReady","setwinReady","timeoutRef","colorModal","setColorModal","async","queryDevice","command","buttonId","groupId","lang","useSelectedLanguage","Layout","Head","CirclePicker","hex","downloadFormula","formulaId","Body","br","navigator","clipboard","writeText","then","err","isShared","TextField","placeholder","button","style","backgroundColor","FaStop","FaPlay","FaDownload","Date","now","request","fetch","method","headers","body","JSON","stringify","response","json","assignedToken","token","FaShareAlt","FaWindowClose","buildupDuration","lossyWeight","DragDropContext","onDragEnd","result","provided","destination","formula","reorderedItem","splice","source","onBeforeDragStart","onDragStart","onDragUpdate","Droppable","droppableId","droppableProps","innerRef","item","Draggable","draggableId","id","dragHandleProps","draggableProps","filter","handleDeleteStep","uuid","AiFillPlusCircle","p"],"sourceRoot":""}