{"version":3,"file":"static/chunks/pages/lab-f299e52a74bf98a8.js","mappings":"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","sources":["webpack://_N_E/?c087","webpack://_N_E/./src/components/step/components/ActionRune.tsx","webpack://_N_E/./src/components/step/components/GrinderRune.tsx","webpack://_N_E/./src/components/ui/popover.tsx","webpack://_N_E/./src/components/ui/separator.tsx","webpack://_N_E/./src/components/step/components/TextRune.tsx","webpack://_N_E/./src/components/step/components/TimeRune.tsx","webpack://_N_E/./src/components/step/components/ProfileRune.tsx","webpack://_N_E/./src/components/step/components/IngredientRune.tsx","webpack://_N_E/./src/components/step/components/PumpRune.tsx","webpack://_N_E/./src/components/step/components/WeightRune.tsx","webpack://_N_E/./src/components/step/StepCard.tsx","webpack://_N_E/./src/pages/lab.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/lab\",\n      function () {\n        return require(\"private-next-pages/lab.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/lab\"])\n      });\n    }\n  ","import {\n  EnumAction,\n  EnumProfileType,\n  EnumTarget,\n  IAction,\n  IProfileParam,\n  ITarget,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Button, Modal, Tiles } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useState } from \"react\";\nimport { FaChartArea } from \"react-icons/fa\";\nimport { FaClock } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\nimport { IoWaterSharp } from \"react-icons/io5\";\nimport { LiaFillDripSolid } from \"react-icons/lia\";\n\nexport const ActionRune = ({ index }: { index: number }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const [action, setAction] = useState<EnumAction>(\n    formulas[selectedFormulaId].steps[index].action.actionType as EnumAction,\n  );\n  const step = formulas[selectedFormulaId].steps[index];\n  const { t } = useTranslation();\n\n  function handleChangeAction(e: EnumAction) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index].action as IAction;\n        action.actionType = e as EnumAction;\n        const target = draft[selectedFormulaId].steps[index].target as ITarget;\n\n        // set the target\n        if (e == EnumAction.Grind) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Extract) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Rest) {\n          target.targetType = EnumTarget.Time;\n        } else if (e == EnumAction.Profile) {\n          target.targetType = EnumTarget.Weight;\n          let _action = action as IProfileParam;\n          _action.segments = _action.segments || [];\n          _action.profilingType =\n            _action.profilingType || EnumProfileType.Flowrate;\n        } else if (e == EnumAction.PourOver) {\n          target.targetType = EnumTarget.Weight;\n        }\n\n        draft[selectedFormulaId].steps[index].action = action;\n        draft[selectedFormulaId].steps[index].target = target;\n      }),\n    );\n  }\n\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  return (\n    <>\n      <h1\n        className=\"text-xl font-bold text-orange-900 underline decoration-pink-500\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {/* {step.action.actionType || \"Action\"} */}\n        {t(step.action.actionType) || \"Action\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"large\"\n          title={t(\"Select an action\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction(action);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Tiles space={4} columns={3}>\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Grind ? \"solid\" : \"outline\"}\n              label={t(\"Grind\")}\n              onPress={() => {\n                setAction(EnumAction.Grind);\n              }}\n              icon={() => <GiManualMeatGrinder />}\n              isDisabled={true}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Extract ? \"solid\" : \"outline\"}\n              label={t(\"Extract\")}\n              onPress={() => {\n                setAction(EnumAction.Extract);\n              }}\n              icon={() => <IoWaterSharp />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Rest ? \"solid\" : \"outline\"}\n              label={t(\"Rest\")}\n              onPress={() => {\n                setAction(EnumAction.Rest);\n              }}\n              icon={() => <FaClock />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Profile ? \"solid\" : \"outline\"}\n              label={t(\"Profile\")}\n              onPress={() => {\n                setAction(EnumAction.Profile);\n              }}\n              icon={() => <FaChartArea />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.PourOver ? \"solid\" : \"outline\"}\n              label={t(\"Pour Over\")}\n              onPress={() => {\n                setAction(EnumAction.PourOver);\n              }}\n              icon={() => <LiaFillDripSolid />}\n              isDisabled={true}\n            />\n            {/* <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Sound ? \"solid\" : \"outline\"}\n              label={t(\"Sound\")}\n              onPress={() => {\n                setAction(EnumAction.Sound);\n              }}\n              icon={() => <AiFillSound />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.RGB ? \"solid\" : \"outline\"}\n              label={t(\"RGB\")}\n              onPress={() => {\n                setAction(EnumAction.RGB);\n              }}\n              icon={() => <TbColorFilter />}\n            /> */}\n          </Tiles>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import {\n  Banner,\n  Button,\n  Modal,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { FaRegClock } from \"react-icons/fa\";\nimport { IoMdSkipForward } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\n// import { IOptionItemProps } from \"./OptionItem\";\n\n// const grinderBehaviourOptions: IOptionItemProps[] = [\n//   {\n//     title: \"can skip\",\n//     text: \"Grinder will skip this step if portafilter is not in position\",\n//     value: true,\n//   },\n//   {\n//     title: \"must wait\",\n//     text: \"Grinder will wait until the portafilter is in position\",\n//     value: false,\n//   },\n// ];\n\nexport const GrinderSkipRune = ({\n  value,\n  onChange,\n}: {\n  value: boolean;\n  onChange: Dispatch<SetStateAction<boolean>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [value]);\n  useEffectOnce(() => {\n    onChange(false);\n  });\n\n  const [skippable, setSkippable] = useState<boolean>(true);\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {skippable ? t(\"can skip\") : t(\"must wait\")}\n      </h1>\n\n      {isOpen && (\n        <Modal\n          autoFocus={false}\n          size=\"small\"\n          title={t(\"Set grinder behaviour\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(skippable);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Tiles space={8} columns={2}>\n              <Button\n                kind={skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Can skip\")}\n                onPress={() => setSkippable(true)}\n                icon={() => <IoMdSkipForward />}\n              />\n              <Button\n                kind={!skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Must wait\")}\n                onPress={() => setSkippable(false)}\n                icon={() => <FaRegClock />}\n              />\n            </Tiles>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Explaination\")}\n              description={\n                skippable\n                  ? t(\n                      \"Grinder will skip this step if portafilter is not in position\",\n                    )\n                  : t(\n                      \"Grinder will wait until the portafilter is in position, then it will start grinding\",\n                    )\n              }\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","export const TextRune = ({ text }: { text: string }) => {\n  /**\n   * This function displays the input text as normal text, but word by word so it will wrap around.\n   * @param {string} text - The text to be displayed.\n   */\n  return (\n    <>\n      {text.split(\" \").map((word, index) => (\n        <h1 key={index} className=\"mx-1 text-xl text-gray-900\">\n          {word}\n        </h1>\n      ))}\n    </>\n  );\n};\n","import {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { IProfileParam } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { SliderField } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\n\nexport function TimeRune({\n  // value,\n  //   onChange,\n  // progress\n  index,\n  subIndex = -1,\n}: {\n  // value: number;\n  //       onChange: Dispatch<SetStateAction<number>>;\n  //      progress:  number;\n  index: number;\n  subIndex: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [current, setCurrent] = useState<number>(-1);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n\n  const [value, setValue] = useState<number>(\n    subIndex == -1\n      ? step.target.value\n      : (step.action as IProfileParam).segments[subIndex]?.duration || 0,\n  );\n\n  /*\n    Progress doesn't always show up, it will disappear after 5 seconds\n    So after 5 seconds, it must be clear to null\n    So the number has its own internal state\n  */\n\n  let timeout = useRef(null);\n\n  // useEffect(() => {\n  //   setCurrent(progress);\n\n  //   clearTimeout(timeout.current);\n  //   timeout.current = setTimeout(() => {\n  //     setCurrent(null);\n  //   }, 5000);\n  // }, [progress]);\n\n  useEffect(() => {\n    setValue(\n      subIndex == -1\n        ? step.target.value\n        : (step.action as IProfileParam).segments[subIndex].duration,\n    );\n  }, [formulas[selectedFormulaId].steps[index].target.value]);\n\n  useEffect(() => {\n    const updated = formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value;\n    // if you have subIndex, there nis no need to update progress, handled by the line chart already, more visual\n    if (subIndex == -1) {\n      setCurrent(updated || -1);\n    }\n  }, [formulaFeedbacks, index, selectedFormulaId]);\n  const { t } = useTranslation();\n\n  return (\n    <Popover\n      onOpenChange={(e) => {\n        setIsOpen(e != false);\n      }}\n      open={isOpen}\n    >\n      <PopoverTrigger>\n        <div\n          className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          {current != -1 && (\n            <h1\n              className=\" text-xl font-bold text-green-800\"\n              onClick={() => setIsOpen(true)}\n            >\n              {`${(current / 1000).toFixed(1)}/`}\n            </h1>\n          )}\n\n          <h1 className=\" text-xl font-bold text-blue-800\">\n            {value} {value <= 1 ? t(\"second\") : t(\"seconds\")}\n          </h1>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 space-y-8 rounded-xl  border\">\n        <IoIosCloseCircle\n          className=\"absolute right-2 top-2 text-gray-500\"\n          size={20}\n          onClick={() => {\n            setIsOpen(false);\n          }}\n        />\n\n        <SliderField\n          value={value}\n          onChange={(e: number) => {\n            setValue(e);\n            setFormulas(\n              produce(formulas, (draft) => {\n                // draft[selectedFormulaId].steps[index].target.value = e;\n                if (subIndex == -1) {\n                  draft[selectedFormulaId].steps[index].target.value = e;\n                } else {\n                  const action = step.action as IProfileParam;\n                  action.segments[subIndex].duration = e;\n                }\n              }),\n            );\n          }}\n          label={t(\"Time\")}\n          type=\"single\"\n          name=\"value\"\n          minValue={0}\n          maxValue={60}\n          step={1}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","// @refresh reset\n\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  EnumAction,\n  EnumProfileType,\n  IProfileParam,\n  IProfilingSegment,\n  IStepFeedback,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  LineChart,\n  Modal,\n  SliderField,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FaMinus, FaPlus } from \"react-icons/fa6\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\nimport { TextRune } from \"./TextRune\";\nimport { TimeRune } from \"./TimeRune\";\n\ntype PressureDtps = {\n  timestamp: number;\n  pressure: number;\n  min: number;\n  max: number;\n  current?: number;\n};\ntype FlowrateDtps = {\n  timestamp: number;\n  flowrate: number;\n  min: number;\n  max: number;\n  current?: number;\n};\ntype PowerDtps = {\n  timestamp: number;\n  power: number;\n  min: number;\n  max: number;\n  current?: number;\n};\n\nexport type DataPoint = PressureDtps | FlowrateDtps | PowerDtps;\n\nconst generateDatapoints = (\n  segments: IProfilingSegment[],\n  sensor: EnumProfileType,\n  formulaFeedbacks?: IStepFeedback[\"action\"][],\n) => {\n  if (segments === undefined) return [];\n\n  const dps: DataPoint[] = [];\n  // for each segments, we add a new point\n  let totalTime = 0;\n  segments.forEach((segment) => {\n    totalTime += segment.duration;\n  });\n\n  var startTime = 0;\n  var previousValue = 0;\n  for (const segment of segments) {\n    for (var time = 0; time < segment.duration; time += 1) {\n      var interimValue =\n        previousValue +\n        (segment.value - previousValue) * (time / segment.duration);\n      interimValue = Math.round(interimValue * 10) / 10;\n      if (sensor == EnumProfileType.Pressure) {\n        dps.push({\n          timestamp: startTime + time,\n          pressure: interimValue,\n          max: 10,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Flowrate) {\n        dps.push({\n          timestamp: startTime + time,\n          flowrate: interimValue,\n          max: 50,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Power) {\n        dps.push({\n          timestamp: startTime + time,\n          power: interimValue,\n          max: 100,\n          min: 0,\n          // time: timestamp\n        });\n      }\n    }\n    previousValue = segment.value;\n    startTime += segment.duration;\n  }\n  return dps;\n};\nexport const RenderedSegment = ({\n  // segments,\n  // // setSegments,\n  // sensor,\n  index,\n}: {\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n  index: number;\n  // setSegments: Dispatch<SetStateAction<IProfilingSegment[]>>;\n}) => {\n  useEffectOnce(() => {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam\n    //     action.actionType = \"Profile\";\n\n    //     action.segments = action.segments || [];\n\n    //     console.log(\"profile/ create object\", action)\n    //     if ((draft[index].action as IProfileParam).segments.length == 0) {\n    //       (draft[index].action as IProfileParam).segments = [\n    //         {\n    //           duration: 10,\n    //           value: 3,\n    //         },\n    //       ];\n    //     }\n    //     return draft\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.actionType = \"Profile\";\n\n        action.segments = action.segments || [];\n\n        console.log(\"profile/ create object\", action);\n        if (\n          (draft[selectedFormulaId].steps[index].action as IProfileParam)\n            .segments.length == 0\n        ) {\n          (\n            draft[selectedFormulaId].steps[index].action as IProfileParam\n          ).segments = [\n            {\n              duration: 10,\n              value: 3,\n            },\n          ];\n        }\n        return draft;\n      }),\n    );\n  });\n\n  // const [renderedSegments, setRenderedSegments] = useState<JSX.Element[]>([]);\n\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { t } = useTranslation();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n\n  const renderedSegments = (action.segments || []).map((segment, idx) => {\n    return (\n      <div className=\"flex-rol flex flex-wrap\" key={idx}>\n        {idx == 0 ? (\n          <TextRune text={t(\"First, reach\")} />\n        ) : (\n          <TextRune text={t(\"then\")} />\n        )}\n        <ProfileValueRune index={index} subIndex={idx} />\n        {idx == 0 ? (\n          <TextRune text={t(\"within\")} />\n        ) : (\n          <TextRune text={t(\"in\")} />\n        )}\n        <TimeRune\n          // progress={segments[idx].duration}\n          // value={segments[idx].duration}\n          // onChange={(e: number) => {\n          //   setSteps(\n          //     produce(steps, (draft) => {\n          //       const action = draft[index].action as IProfileParam;\n          //       action.segments[idx].duration = e;\n          //     })\n          //   );\n          // }}\n          index={index}\n          subIndex={idx}\n        />\n        <h1 className=\"text-xl\">\n          {idx === action.segments.length - 1 ? \".\" : \",\"}\n        </h1>\n      </div>\n    );\n  });\n\n  /**\n   *  Render segments in text readable format\n   *  First, extract with 9 bar for 2 seconds, then slowly turn to 1 bar for 5 seconds, then\n   *\n   * then is a button ?\n   *\n   *  */\n\n  /* \n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds] [+]\n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds], then, 2 bar within 2 seconds, then 3 bar whithin 20s\n  */\n  const addSegment = () => {\n    // setSegments(\n    //   produce(segments, (draft: IProfilingSegment[]) => {\n    //     // draft.push({\n    //     //   duration: 5,\n    //     //   value: 3\n    //     // })\n    //     draft.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments = action.segments || [];\n        action.segments.push({\n          duration: Math.floor(Math.random() * 30),\n          value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n        });\n      }),\n    );\n  };\n  const removeSegment = () => {\n    // console.log(\"remove segment\", { segments });\n    // if (segments.length > 1) {\n    //   // setSegments(\n    //   //   produce(segments, (draft) => {\n    //   //     draft.splice(-1);\n    //   //   })\n    //   // );\n    // }\n    if (action.segments === undefined) return;\n    if (action.segments.length < 2) return;\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.pop();\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments.pop();\n        return draft;\n      }),\n    );\n  };\n  return (\n    <>\n      <Separator />\n      <ul>{renderedSegments}</ul>\n      <div className=\"flex h-6 w-fit cursor-pointer  flex-row items-center space-x-1 rounded-md bg-blue-100 p-2 transition-transform duration-200 hover:scale-105\">\n        <FaPlus color=\"#1180EF\" size={16} onClick={addSegment} />\n        <FaMinus color=\"#1180EF\" size={16} onClick={removeSegment} />\n      </div>\n    </>\n  );\n};\nexport const MagicLine = ({\n  // segments,\n  // sensor,\n  index,\n}: {\n  index: number;\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n}) => {\n  const [dataPoints, setDataPoints] = useState<DataPoint[]>([]);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n\n  const fbstore = useRef<IStepFeedback[\"action\"][]>([]);\n\n  useEffect(() => {\n    try {\n      const actionUpdate = formulaFeedbacks[selectedFormulaId][index]\n        .action as IStepFeedback[\"action\"];\n      // when ever formulaFeedbacks are updated, store the values here\n      console.log(\"Line/ add value\", actionUpdate);\n\n      fbstore.current = fbstore.current || [];\n      var store = fbstore.current;\n      store.push({\n        ...actionUpdate,\n        timestamp: Math.round(actionUpdate.timestamp / 1000),\n      });\n      // filter out the store, using the timestamp, remove those that has higher timestmap than actionUpdate\n      // store = store.filter((s) => s.timestamp >= Math.round(actionUpdate.timestamp / 1000))\n\n      const dpts = generateDatapoints(segments, sensor, store);\n      dpts.map((dpt, idx) => {\n        var current = null;\n        store.forEach((s) => {\n          // find the latest value\n          if (s.timestamp == dpt.timestamp) {\n            dpt.current = s.input;\n          }\n        });\n      });\n      console.log(\"Line/ dpts\", dpts, store);\n      setDataPoints(dpts);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [formulaFeedbacks]);\n\n  useEffect(() => {\n    setDataPoints(generateDatapoints(segments, sensor));\n  }, [segments, sensor]);\n\n  const attrMap = {};\n  attrMap[EnumProfileType.Pressure] = \"pressure\";\n  attrMap[EnumProfileType.Flowrate] = \"flowrate\";\n  attrMap[EnumProfileType.Power] = \"power\";\n\n  return (\n    <div className=\"hover:scale-120 w-full -translate-x-10 transition-transform duration-200\">\n      <LineChart\n        key={index}\n        height={300}\n        dataKey=\"Time\"\n        categories={[\n          // add the sensor of power herer\n\n          // sensor == EnumProfileType.Pressure ? \"pressure\" : \"flowrate\",\n          attrMap[sensor] || \"unknown sensor\",\n          \"current\",\n          \"max\",\n          \"min\",\n        ]}\n        hideLegend={false}\n        hideXAxis={true}\n        hideYAxis={false}\n        data={dataPoints}\n        disableAnimation={true}\n      />\n    </div>\n  );\n};\nconst ProfileValueRune = ({\n  // segments,\n  // setValue,\n  // sensor,\n  // idx,\n  index,\n  subIndex,\n}: {\n  // segments: IProfilingSegment[];\n  // setValue: Dispatch<SetStateAction<number>>;\n  // sensor: EnumProfileType;\n  // idx: number;\n  index: number;\n  subIndex: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n  const idx = subIndex;\n\n  let unit: string = \"\";\n  if (sensor == EnumProfileType.Pressure) {\n    unit = \"bar\";\n  }\n  if (sensor == EnumProfileType.Flowrate) {\n    unit = \"gram/s\";\n  } else if (sensor == EnumProfileType.Power) {\n    unit = \"%\";\n  }\n\n  const maxValue: Record<EnumProfileType, number> = {\n    [EnumProfileType.Pressure]: 10,\n    [EnumProfileType.Flowrate]: 100,\n    [EnumProfileType.Power]: 100,\n  };\n\n  return (\n    <Popover\n      onOpenChange={(e) => {\n        console.log(\"close\", e);\n        if (e == false) {\n          setIsOpen(false);\n        }\n      }}\n      open={isOpen}\n    >\n      <PopoverTrigger>\n        <div\n          className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          <h1 className=\" text-xl font-bold text-blue-800\">\n            {segments[idx].value} {unit}\n          </h1>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-96 min-w-96 rounded-xl border\">\n        <IoIosCloseCircle\n          className=\"absolute right-2 top-2 text-gray-500\"\n          size={20}\n          onClick={() => {\n            setIsOpen(false);\n          }}\n        />\n\n        <SliderField\n          value={segments[idx].value}\n          onChange={(e: number) => {\n            setFormulas(\n              produce(formulas, (draft) => {\n                (\n                  draft[selectedFormulaId].steps[index].action as IProfileParam\n                ).segments[idx].value = e;\n              }),\n            );\n          }}\n          label={sensor}\n          type=\"single\"\n          name=\"value\"\n          minValue={0}\n          maxValue={maxValue[sensor]}\n          step={0.1}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport const ProfileRune = ({\n  // value,\n  // onChange,\n  index,\n}: {\n  // value: EnumProfileType;\n  // onChange: Dispatch<SetStateAction<string>>;\n  index: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const action = step.action as IProfileParam;\n\n  const [profileType, setProfileType] = useState<EnumProfileType>(\n    action.profilingType || EnumProfileType.Flowrate,\n  );\n\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  function onChange(sensor: EnumProfileType) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        draft[selectedFormulaId].steps[index].action.actionType =\n          EnumAction.Profile;\n        (\n          draft[selectedFormulaId].steps[index].action as IProfileParam\n        ).profilingType = sensor;\n      }),\n    );\n  }\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {t(action.profilingType) || EnumProfileType.Flowrate}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title=\"Select an profiling method\"\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(profileType);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={16}>\n            <Tiles space={8} columns={2}>\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Flowrate ? \"solid\" : \"outline\"\n                }\n                label=\"Flowrate\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Flowrate);\n                }}\n              />\n\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Pressure ? \"solid\" : \"outline\"\n                }\n                label=\"Pressure\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Pressure);\n                }}\n              />\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Power ? \"solid\" : \"outline\"\n                }\n                label=\"Power\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Power);\n                }}\n              />\n            </Tiles>\n            <Banner\n              kind=\"informative\"\n              title=\"What is this ?\"\n              description={\n                profileType == EnumProfileType.Flowrate\n                  ? \"Flowrate is the amount of water that flows through the coffee bed in a given time\"\n                  : profileType == EnumProfileType.Pressure\n                    ? \"Pressure is the force applied to the coffee bed\"\n                    : \"Power is the energy applied to the coffee bed, purely control the pump power to achieve the result\"\n                // if it is power, add another message here\n              }\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { IGrinderState } from \"@/gateway/grinder\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  Inline,\n  Modal,\n  Stack,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\n\nexport const IngredientRune = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: Dispatch<SetStateAction<string>>;\n}) => {\n  console.log(\"action/ recreate\");\n\n  const [isOpen, setIsOpen] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n\n  const [ingredient, setIngridient] = useState<string>(value || \"\");\n  const { t } = useTranslation();\n  const router = useRouter();\n  useEffectOnce(() => {\n    onChange(\"\");\n  });\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {ingredient == \"\" ? t(\"[Select ingredient]\") : ingredient}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Select ingredient\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(ingredient);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Inline space={4}>\n              {grinderSettings.map((grinder: IGrinderState, index: number) => {\n                return (\n                  <Button\n                    key={index}\n                    kind={ingredient == grinder.name ? \"solid\" : \"outline\"}\n                    hierarchy=\"primary\"\n                    label={grinder.name}\n                    onPress={() => setIngridient(grinder.name)}\n                  />\n                );\n              })}\n              {/* <Button\n                key={-1}\n                kind={\"outline\"}\n                hierarchy=\"primary\"\n                label={\"+\"}\n                onPress={() => {\n                  router.push(\"/setting\");\n                }}\n              /> */}\n            </Inline>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Reminder\")}\n              description={t(\n                \"You can set up your grinder in the settings, the hardware can be connected to the machine wirelessly to the espresso machine\",\n              )}\n              // action={{\n              //   label: \"Learn more\",\n              //   onPress: () => {\n              //     window.open(\"https://www.google.com\");\n              //   },\n              // }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { Banner, Modal, SliderField, Stack } from \"@buildo/bento-design-system\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\n\nexport const PumpRune = ({\n  value,\n  onChange,\n}: {\n  value: number;\n  onChange: Dispatch<SetStateAction<number>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [power, setPower] = useState<number>(value || 100);\n\n  useEffectOnce(() => {\n    onChange(power)\n  })\n\n  return (\n    <>\n      <div\n        className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        <h1 className=\"text-xl font-bold text-blue-800\">{value || 100} %</h1>\n      </div>\n\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title=\"Set pump power\"\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              console.log(\" update power\", power);\n              onChange(power);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <SliderField\n              type=\"single\"\n              name=\"power\"\n              value={power}\n              onChange={(e: number) => {\n                console.log(\"Power is updated for pump\", e);\n                setPower(e);\n              }}\n              label=\"Pump Power\"\n              minValue={10}\n              maxValue={100}\n              step={1}\n            />\n            <Banner\n              kind=\"informative\"\n              title=\"Notice\"\n              description=\"Power require an external pump to be connected to the machine, other wise it is simply ON/OFF\"\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { EnumTarget } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Banner, Modal, SliderField, Stack } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport function WeightRune({\n  // value,\n  //   onChange,\n  // progress,\n  subIndex = -1,\n  index,\n}: {\n  // value: number;\n  // onChange: Dispatch<SetStateAction<number>>;\n  // progress: number;\n  subIndex: number;\n  index: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId, formulaFeedbacks } =\n    useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const [weight, setWeight] = useState(step.target.value);\n\n  const [current, setCurrent] = useState<number>(0);\n\n  /*\n      Progress doesn't always show up, it will disappear after 5 seconds\n      So after 5 seconds, it must be clear to null\n      So the number has its own internal state\n  */\n\n  useEffect(() => {\n    const updated =\n      formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value || 0;\n    setCurrent(updated * 10);\n  }, [formulaFeedbacks, index, selectedFormulaId]);\n\n  let timeout = useRef(null);\n\n  // useEffect(() => {\n  //   setCurrent(progress);\n\n  //   clearTimeout(timeout.current)\n  //   timeout.current = setTimeout(() => {\n  //     setCurrent(null)\n  //   }, 5000)\n  //   console.log(\"Progress is updated for weight\", progress)\n  // }, [progress])\n\n  function handleChangeAction() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        draft[selectedFormulaId].steps[index].target.targetType =\n          EnumTarget.Weight;\n        draft[selectedFormulaId].steps[index].target.value = weight;\n      }),\n    );\n  }\n\n  return (\n    <>\n      {current != null && (\n        <h1\n          className=\" text-xl font-bold text-green-800\"\n          onClick={() => setIsOpen(true)}\n        >\n          {`${(current / 10).toFixed(1)}/`}\n        </h1>\n      )}\n\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {step.target.value.toFixed(1)}\n        {step.target.value <= 1 ? \" gram\" : \" grams\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title=\"How much ?\"\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction();\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <SliderField\n              type=\"single\"\n              name=\"weight\"\n              value={weight}\n              onChange={setWeight}\n              label=\"Weight\"\n              minValue={0}\n              maxValue={500}\n              step={1}\n            />\n            <Banner\n              kind=\"informative\"\n              title=\"Reminder\"\n              description=\"Calibration is required for accurate weight, please go to Settings\"\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import {\n  EnumAction,\n  IExtractParam,\n  IGrindParam,\n  IRestParam,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { produce } from \"immer\";\nimport { MdOutlineClear } from \"react-icons/md\";\nimport { ActionRune } from \"./components/ActionRune\";\nimport { GrinderSkipRune } from \"./components/GrinderRune\";\nimport { MagicLine, RenderedSegment } from \"./components/ProfileRune\";\n\nimport { useTranslation } from \"next-export-i18n\";\nimport { IngredientRune } from \"./components/IngredientRune\";\nimport { ProfileRune } from \"./components/ProfileRune\";\nimport { PumpRune } from \"./components/PumpRune\";\nimport { TextRune } from \"./components/TextRune\";\nimport { TimeRune } from \"./components/TimeRune\";\nimport { WeightRune } from \"./components/WeightRune\";\n\nexport type ProfilingType = \"pressure sensor\" | \"flowrate profiler\";\nexport type GrinderBehaviour = \"can skip\" | \"must wait\";\nexport type ActionType = \"Grind\" | \"Extract\" | \"Rest\" | \"Profiling\";\n\n// ----------------------------------------------------------- //\n\nfunction Wrapper() {\n  return (\n    <div className=\"group relative mx-auto max-w-7xl\">\n      <div className=\"absolute -inset-1 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 opacity-25 blur transition duration-1000 group-hover:opacity-100 group-hover:duration-200\">\n        <div className=\"items-pop flex justify-start space-x-6 rounded-lg bg-white px-7 py-6 leading-none ring-1 ring-gray-900\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport function NewStepCard({\n  onDelete,\n  index,\n}: {\n  onDelete: () => void;\n  index: number;\n}) {\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const steps = formulas[selectedFormulaId].steps || [];\n  const { t } = useTranslation();\n  return (\n    <div className=\"-inset-1 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600\">\n      <div className=\"flex h-fit w-96 max-w-[calc(90vw)] flex-col rounded-xl  border  bg-white p-4 drop-shadow-xl transition-transform duration-200 hover:scale-105 hover:border-blue-500\">\n        <div\n          className=\"absolute right-0 top-0 cursor-pointer p-2\"\n          onClick={() => onDelete()}\n        >\n          <MdOutlineClear className=\"text-gray-300\" />\n        </div>\n        <div className=\"inline-flex max-w-96 flex-wrap items-center gap-2 space-x-1 text-wrap\">\n          <ActionRune index={index} />\n\n          {formulas[selectedFormulaId].steps[index].action.actionType ===\n            EnumAction.Grind && (\n            <>\n              <WeightRune index={index} subIndex={-1} />\n              <TextRune text={t(\"of\")} />\n              <IngredientRune\n                value={(steps[index].action as IGrindParam).ingredient}\n                onChange={(ingredient: string) => {\n                  // setSteps(\n                  //   produce(steps, (draft) => {\n                  //     (draft[index].action as IGrindParam).ingredient =\n                  //       ingredient;\n                  //   })\n                  // );\n\n                  setFormulas(\n                    produce(formulas, (draft) => {\n                      (\n                        draft[selectedFormulaId].steps[index]\n                          .action as IGrindParam\n                      ).ingredient = ingredient;\n                    }),\n                  );\n                }}\n              />\n              <TextRune text={t(\"bean, grinder\")} />\n              <GrinderSkipRune\n                value={(steps[index].action as IGrindParam).canSkip}\n                onChange={(state: boolean) => {\n                  // setSteps(\n                  //   produce(steps, (draft) => {\n                  //     (draft[index].action as IGrindParam).canSkip = state;\n                  //     draft[index].action.actionType = EnumAction.Grind;\n                  //   })\n                  // );\n                  setFormulas(\n                    produce(formulas, (draft) => {\n                      (\n                        draft[selectedFormulaId].steps[index]\n                          .action as IGrindParam\n                      ).canSkip = state;\n                      draft[selectedFormulaId].steps[index].action.actionType =\n                        EnumAction.Grind;\n                    }),\n                  );\n                }}\n              />\n\n              {(steps[index].action as IGrindParam).canSkip === true ? (\n                <TextRune text={t(\"this step is portafilter is absent\")} />\n              ) : (\n                <TextRune text={t(\"until portafilter is present\")} />\n              )}\n            </>\n          )}\n          {steps[index].action.actionType === EnumAction.Extract && (\n            <>\n              {/* <TextRune text=\"a shot of\" /> */}\n              <WeightRune index={index} subIndex={-1} />\n              <TextRune text={t(\"with pump power\")} />\n              <PumpRune\n                value={(steps[index].action as IExtractParam).power}\n                onChange={(power: number) => {\n                  // setSteps(\n                  //   produce(steps, (draft) => {\n                  //     (draft[index].action as IExtractParam).actionType =\n                  //       EnumAction.Extract;\n                  //     (draft[index].action as IExtractParam).power = power;\n                  //   })\n                  // );\n\n                  setFormulas(\n                    produce(formulas, (draft) => {\n                      (\n                        draft[selectedFormulaId].steps[index]\n                          .action as IExtractParam\n                      ).actionType = EnumAction.Extract;\n                      (\n                        draft[selectedFormulaId].steps[index]\n                          .action as IExtractParam\n                      ).power = power;\n                    }),\n                  );\n                }}\n              />\n            </>\n          )}\n          {steps[index].action.actionType === EnumAction.PourOver && (\n            <>\n              <TextRune text={t(\"total of\")} />\n              <WeightRune index={index} subIndex={-1} />\n              <TextRune text={t(\", extract\")} />\n              <WeightRune index={index} subIndex={0} />\n              <TextRune text={t(\"every\")} />\n              <TimeRune subIndex={-1} index={index} />\n            </>\n          )}\n          {steps[index].action.actionType === EnumAction.Rest && (\n            <>\n              <TextRune text={t(\"for\")} />\n              <TimeRune\n                subIndex={-1}\n                index={index}\n                // valveState={(steps[index].action as IRestParam).valveState}\n                // toggleChecked={(checked: boolean) => {\n                //   setSteps(\n                //     produce(steps, (draft) => {\n                //       draft[index].target.targetType = EnumTarget.Time;\n                //       (draft[index].action as IRestParam).valveState = checked;\n                //     })\n                //   );\n                // }}\n              />\n              {(steps[index].action as IRestParam).valveState && (\n                <TextRune text=\"but keep valve open\" />\n              )}\n            </>\n          )}\n          {steps[index].action.actionType === \"Profile\" && (\n            <>\n              <TextRune text={t(\"to extract\")} />\n\n              <WeightRune index={index} subIndex={-1} />\n              <TextRune text={t(\"using\")} />\n              <ProfileRune index={index} />\n              <TextRune text={t(\"profiling\")} />\n              <RenderedSegment\n                index={index}\n                // segments={(steps[index].action as IProfileParam).segments}\n                // setSegments={() => {\n                //   setSteps(\n                //     produce(steps, draft => {\n                //       (draft[index].action as IProfileParam).segments = segments;\n                //     })\n                //   );\n                // }}\n                // sensor={(steps[index].action as IProfileParam).profilingType}\n              />\n              <MagicLine\n                index={index}\n                // segments={(steps[index].action as IProfileParam).segments}\n                // sensor={(steps[index].action as IProfileParam).profilingType}\n              />\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","\"use client\";\n\n\nimport { NewStepCard } from \"@/components/step/StepCard\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { EnumAction, EnumTarget } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Body,\n  Button,\n  Modal,\n  TextField,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useSelectedLanguage, useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { ReactNode, useEffect, useRef, useState } from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  DropResult,\n  Droppable,\n  ResponderProvided,\n} from \"react-beautiful-dnd\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport {\n  FaDownload,\n  FaPlay,\n  FaShareAlt,\n  FaStop,\n  FaWindowClose,\n} from \"react-icons/fa\";\nimport { uuid } from \"uuidv4\";\nimport Layout from \"./layout\";\nimport { downloadFormula } from \"@/gateway/formula\";\n\nconst BetterButton = ({\n  icon,\n  label,\n  color,\n  onClick,\n}: {\n  icon: ReactNode;\n  label: string;\n  color: string;\n  onClick: () => void;\n}) => {\n  return (\n    <div\n      className={`flex size-12 cursor-pointer flex-row items-center space-x-1 rounded-xl border bg-white p-4 hover:border-blue-500`}\n    >\n      {icon}\n    </div>\n  );\n};\n\nconst Detail = () => {\n  const router = useRouter();\n  const id = router.query.slug;\n\n  const [downloadTargetGroup, setDownloadTargetGroup] = useState(-1);\n  const [downloadTargetButton, setDownloadTargetButton] = useState(-1);\n\n  const [downloadWindow, setDownloadWindow] = useState(false);\n  const [shareWindow, setShareWindow] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [running, setRunning] = useState<boolean>(false);\n\n  const {\n    selectedFormulaId,\n    registerSelectedFormulaId,\n    setFormulas,\n    formulas,\n    setSelectedPage,\n    registerFormulaClick,\n    cancelFormulaClick,\n    progressReport,\n  } = useDeviceContext();\n  const [winReady, setwinReady] = useState(false);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const { formulaFeedbacks } = useDeviceContext();\n\n  useEffect(() => {\n    if (timeoutRef) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => {\n        setRunning(false);\n      }, 2000);\n      setRunning(true);\n    }\n  }, [formulaFeedbacks, selectedFormulaId]);\n\n  //TODO: Assume don't have any formular before\n  function handleAddStep() {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     draft.push({\n    //       id: uuid(),\n    //       action: {\n    //         actionType: EnumAction.Rest,\n    //         valveState: false,\n    //       },\n    //       target: {\n    //         targetType: EnumTarget.Time,\n    //         value: 10,\n    //       },\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        formula.steps.push({\n          id: uuid(),\n          action: {\n            actionType: EnumAction.Rest,\n            valveState: false,\n          },\n          target: {\n            targetType: EnumTarget.Time,\n            value: 10,\n          },\n        });\n      }),\n    );\n  }\n\n  function handleDeleteStep(id: string) {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     return draft.filter(function (item) {\n    //       return item?.id !== id;\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        formula.steps = formula.steps.filter(function (item) {\n          return item?.id !== id;\n        });\n        return draft;\n      }),\n    );\n  }\n\n  function handleDragAndDrop(result: DropResult, provided: ResponderProvided) {\n    if (!result.destination) return;\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const [reorderedItem] = draft.splice(result.source.index, 1);\n    //     draft.splice(result.destination.index, 0, reorderedItem);\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        const [reorderedItem] = formula.steps.splice(result.source.index, 1);\n        formula.steps.splice(result?.destination?.index || 0, 0, reorderedItem);\n        return draft;\n      }),\n    );\n  }\n\n  useEffect(function () {\n    setwinReady(true);\n  }, []);\n  useEffect(() => {\n    console.log(\"lab/ re-render\", selectedFormulaId);\n  }, [selectedFormulaId]);\n\n  const listDrinkType = () => {\n    return (\n      <div className=\"flex h-16 w-full flex-row justify-between space-x-4\"></div>\n    );\n  };\n  const { lang } = useSelectedLanguage();\n  const { t } = useTranslation();\n  const translations_run = t(\"Run\");\n  return (\n    <Layout>\n      {downloadWindow && (\n        <Modal\n          size=\"large\"\n          autoFocus={false}\n          title={t(\"Assign to Button\")}\n          onClose={() => setDownloadWindow(false)}\n          primaryAction={{\n            label: t(\"Download\"),\n            onPress: async () => {\n              console.log('lab/ download formula to', {downloadTargetGroup, downloadTargetButton, selectedFormulaId})\n              \n              await downloadFormula({groupId: downloadTargetGroup + 1, buttonId: downloadTargetButton, formulaId: selectedFormulaId})\n              \n              setLoading(true);\n              setTimeout(() => {\n                setDownloadWindow(false);\n              }, 1000);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setDownloadWindow(false),\n          }}\n        >\n          <Body size=\"medium\">\n            {t(\n              \"This process will save the formula to a physical button on your cofee machine so you don't always need a mobile device connected\",\n            )}\n          </Body>\n\n          <div className=\"flex h-32 w-full flex-col space-y-4 p-4\">\n            <Tiles space={8} columns={3}>\n              {[1, 2, 3].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Group ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetGroup ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetGroup(index)}\n                  />\n                );\n              })}\n            </Tiles>\n            <Tiles space={8} columns={4}>\n              {[1, 2, 3, 4].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Button ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetButton ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetButton(index)}\n                  />\n                );\n              })}\n            </Tiles>\n          </div>\n        </Modal>\n      )}\n\n      {shareWindow && (\n        <Modal\n          title=\"Share\"\n          onClose={() => setShareWindow(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => setShareWindow(false),\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setShareWindow(false),\n          }}\n        >\n          <Body size=\"medium\">Content</Body>\n        </Modal>\n      )}\n\n      <div className=\"flex flex-col  items-center space-y-4 p-4\">\n        <div\n          className={\n            \" flex  h-fit w-96 max-w-[calc(90vw)] flex-col space-y-4 rounded-xl border p-4 shadow-xl\"\n          }\n        >\n          <TextField\n            value={formulas[selectedFormulaId]?.title}\n            onChange={(e: string) => {\n              setFormulas(\n                produce(formulas, (draft) => {\n                  console.log(\"Formulas\", formulas, selectedFormulaId);\n                  draft[selectedFormulaId].title = e;\n                }),\n              );\n            }}\n            label={t(\"Formula\")}\n            placeholder=\"Untitled formula\"\n          />\n\n          {/* {listDrinkType()} */}\n\n          <div className=\"flex flex-row items-center justify-between space-x-1 text-white\">\n            {running === true ? (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-orange-400 to-red-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  cancelFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaStop />\n                <h1>Stop</h1>\n              </div>\n            ) : (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-400 to-emerald-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  // console.log(\"play\");\n                  registerFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaPlay />\n                <h1>{t(\"Run\")}</h1>\n              </div>\n            )}\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-purple-800 via-violet-900 to-purple-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"download\");\n                // open a bento model\n                setDownloadWindow(true);\n              }}\n            >\n              <FaDownload />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-500 to-blue-600 p-4 hover:border-blue-500`}\n              onClick={() => {\n                setShareWindow(true);\n              }}\n            >\n              <FaShareAlt />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-red-500 to-red-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"delete\");\n                setSelectedPage(\"Formula\");\n                registerSelectedFormulaId(\"\");\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    // return draft.filter(item => item?.id !== selectedFormulaId)\n                    delete formulas[selectedFormulaId];\n                  }),\n                );\n\n                router.push(\"/\");\n              }}\n            >\n              <FaWindowClose />\n            </div>\n          </div>\n        </div>\n        <Separator />\n        <div className=\" mix-w-80 flex flex-col items-center justify-center py-3 \">\n          <DragDropContext\n            onDragEnd={handleDragAndDrop}\n            onBeforeDragStart={() => {\n              console.log(\"onBeforeDragStart\");\n            }}\n            onDragStart={() => {\n              console.log(\"onDragStart\");\n            }}\n            onDragUpdate={() => {\n              console.log(\"onDragUpdate\");\n            }}\n          >\n            <div className=\"flex w-full flex-row\">\n              <Droppable droppableId=\"ROOT\">\n                {(provided) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"mx-auto flex w-full flex-col items-center justify-between space-y-4\"\n                  >\n                    {(formulas[selectedFormulaId]?.steps || [])?.map(\n                      (item, idx) => {\n                        console.log(\"render\", { item, idx });\n                        return (\n                          winReady && (\n                            <Draggable\n                              draggableId={item?.id}\n                              key={item?.id}\n                              index={idx}\n                            >\n                              {(provided) => (\n                                <div\n                                  className=\"\"\n                                  {...provided.dragHandleProps}\n                                  {...provided.draggableProps}\n                                  ref={provided.innerRef}\n                                >\n                                  <NewStepCard\n                                    onDelete={() => handleDeleteStep(item?.id)}\n                                    index={idx}\n                                    // onChange={(params) =>\n                                    //   handleChange(item?.id, params)\n                                    // }\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          )\n                        );\n                      },\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n          <button\n            className=\"my-4 flex h-16 w-80 cursor-pointer flex-row items-center  justify-center space-x-4 rounded-xl border bg-blue-100\"\n            onClick={handleAddStep}\n          >\n            <AiFillPlusCircle color=\"#1180EF\" size={30} />\n            <p className=\"text-lg font-bold text-[#1180EF]\">{t(\"Add Step\")}</p>\n          </button>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Detail;\n"],"names":["window","__NEXT_P","push","ActionRune","index","isOpen","setIsOpen","useState","formulas","setFormulas","selectedFormulaId","useDeviceContext","action","setAction","steps","actionType","step","t","useTranslation","useEffect","h1","className","onClick","Modal","size","title","onClose","primaryAction","label","onPress","e","produce","draft","target","EnumAction","Grind","targetType","EnumTarget","Weight","Extract","Rest","Time","Profile","_action","segments","profilingType","EnumProfileType","Flowrate","PourOver","secondaryAction","Tiles","space","columns","Button","hierarchy","kind","icon","GiManualMeatGrinder","isDisabled","IoWaterSharp","FaClock","FaChartArea","LiaFillDripSolid","GrinderSkipRune","value","onChange","useEffectOnce","skippable","setSkippable","autoFocus","Stack","IoMdSkipForward","FaRegClock","Banner","description","Popover","PopoverPrimitive","PopoverTrigger","PopoverContent","React","ref","align","sideOffset","props","cn","displayName","Separator","orientation","decorative","SeparatorPrimitive","TextRune","text","split","map","word","TimeRune","subIndex","current","setCurrent","formulaFeedbacks","setValue","duration","useRef","updated","onOpenChange","open","div","toFixed","IoIosCloseCircle","SliderField","type","name","minValue","maxValue","generateDatapoints","sensor","undefined","dps","totalTime","forEach","segment","startTime","previousValue","time","interimValue","Math","round","Pressure","timestamp","pressure","max","min","flowrate","Power","power","RenderedSegment","console","log","length","renderedSegments","idx","ProfileValueRune","ul","FaPlus","color","floor","random","FaMinus","pop","MagicLine","dataPoints","setDataPoints","fbstore","actionUpdate","store","dpts","dpt","s","input","error","attrMap","LineChart","height","dataKey","categories","hideLegend","hideXAxis","hideYAxis","data","disableAnimation","unit","ProfileRune","profileType","setProfileType","IngredientRune","grinderSettings","ingredient","setIngridient","useRouter","Inline","grinder","PumpRune","setPower","WeightRune","weight","setWeight","NewStepCard","onDelete","MdOutlineClear","canSkip","state","valveState","router","downloadTargetGroup","setDownloadTargetGroup","query","slug","downloadTargetButton","setDownloadTargetButton","downloadWindow","setDownloadWindow","shareWindow","setShareWindow","loading","setLoading","running","setRunning","registerSelectedFormulaId","setSelectedPage","registerFormulaClick","cancelFormulaClick","progressReport","winReady","setwinReady","timeoutRef","clearTimeout","setTimeout","lang","useSelectedLanguage","Layout","async","downloadFormula","groupId","buttonId","formulaId","Body","TextField","placeholder","FaStop","FaPlay","FaDownload","FaShareAlt","FaWindowClose","DragDropContext","onDragEnd","result","provided","destination","formula","reorderedItem","splice","source","onBeforeDragStart","onDragStart","onDragUpdate","Droppable","droppableId","droppableProps","innerRef","item","Draggable","draggableId","id","dragHandleProps","draggableProps","filter","handleDeleteStep","button","uuid","AiFillPlusCircle","p"],"sourceRoot":""}