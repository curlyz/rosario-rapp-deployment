{"version":3,"file":"static/chunks/pages/lab-b757882992cac38a.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/components/ui/separator.tsx","webpack://_N_E/./src/components/step/components/ActionRune.tsx","webpack://_N_E/./src/components/step/components/GrinderRune.tsx","webpack://_N_E/./src/components/step/components/TextRune.tsx","webpack://_N_E/./src/components/ui/popover.tsx","webpack://_N_E/./src/components/step/components/TimeRune.tsx","webpack://_N_E/./src/components/step/components/ProfileRune.tsx","webpack://_N_E/./src/components/step/components/IngredientRune.tsx","webpack://_N_E/./src/components/step/components/PumpRune.tsx","webpack://_N_E/./src/components/step/components/WeightRune.tsx","webpack://_N_E/./src/components/step/components/ColorRune.tsx","webpack://_N_E/./src/components/step/StepCard.tsx","webpack://_N_E/./src/pages/lab.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/lab\",\n      function () {\n        return require(\"private-next-pages/lab.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/lab\"])\n      });\n    }\n  ","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import {\n  EnumAction,\n  EnumProfileType,\n  EnumTarget,\n  IAction,\n  IProfileParam,\n  ITarget,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Button, Modal, Tiles } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useState } from \"react\";\nimport { FaChartArea } from \"react-icons/fa\";\nimport { FaClock } from \"react-icons/fa6\";\nimport { GiManualMeatGrinder } from \"react-icons/gi\";\nimport { IoWaterSharp } from \"react-icons/io5\";\nimport { LiaFillDripSolid } from \"react-icons/lia\";\nimport { TbColorFilter } from 'react-icons/tb'\n\nexport const ActionRune = ({ index }: { index: number }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n\n  console.log(\"reading step index\", index, selectedFormulaId, formulas[selectedFormulaId].steps)\n\n\n  const [action, setAction] = useState<EnumAction>(\n    formulas[selectedFormulaId].steps[index]?.action.actionType as EnumAction,\n  );\n  const step = formulas[selectedFormulaId].steps[index];\n  const { t } = useTranslation();\n\n  function handleChangeAction(e: EnumAction) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index].action as IAction;\n        action.actionType = e as EnumAction;\n        const target = draft[selectedFormulaId].steps[index].target as ITarget;\n\n        // set the target\n        if (e == EnumAction.Grind) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Extract) {\n          target.targetType = EnumTarget.Weight;\n        } else if (e == EnumAction.Rest) {\n          target.targetType = EnumTarget.Time;\n        } else if (e == EnumAction.Profile) {\n          target.targetType = EnumTarget.Weight;\n          let _action = action as IProfileParam;\n          _action.segments = _action.segments || [];\n          _action.profilingType =\n            _action.profilingType || EnumProfileType.Power;\n        } else if (e == EnumAction.PourOver) {\n          target.targetType = EnumTarget.Weight;\n        }\n\n        draft[selectedFormulaId].steps[index].action = action;\n        draft[selectedFormulaId].steps[index].target = target;\n      }),\n    );\n  }\n\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  return (\n    <>\n      <h1\n        className=\"text-xl font-bold text-orange-900 underline decoration-pink-500\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {/* {step.action.actionType || \"Action\"} */}\n        {t(step.action.actionType) || \"Action\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"large\"\n          title={t(\"Select an action\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction(action);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Tiles space={4} columns={3}>\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Grind ? \"solid\" : \"outline\"}\n              label={t(\"Grind\")}\n              onPress={() => {\n                setAction(EnumAction.Grind);\n              }}\n              icon={() => <GiManualMeatGrinder />}\n              isDisabled={true}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Extract ? \"solid\" : \"outline\"}\n              label={t(\"Extract\")}\n              onPress={() => {\n                setAction(EnumAction.Extract);\n              }}\n              icon={() => <IoWaterSharp />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Rest ? \"solid\" : \"outline\"}\n              label={t(\"Rest\")}\n              onPress={() => {\n                setAction(EnumAction.Rest);\n              }}\n              icon={() => <FaClock />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Profile ? \"solid\" : \"outline\"}\n              label={t(\"Profile\")}\n              onPress={() => {\n                setAction(EnumAction.Profile);\n              }}\n              icon={() => <FaChartArea />}\n            />\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.PourOver ? \"solid\" : \"outline\"}\n              label={t(\"Pour Over\")}\n              onPress={() => {\n                setAction(EnumAction.PourOver);\n              }}\n              icon={() => <LiaFillDripSolid />}\n              isDisabled={false}\n            />\n            {/* <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.Sound ? \"solid\" : \"outline\"}\n              label={t(\"Sound\")}\n              onPress={() => {\n                setAction(EnumAction.Sound);\n              }}\n              icon={() => <AiFillSound />}\n            /> */}\n            <Button\n              hierarchy=\"primary\"\n              kind={action == EnumAction.RGB ? \"solid\" : \"outline\"}\n              label={t(\"RGB\")}\n              onPress={() => {\n                setAction(EnumAction.RGB);\n              }}\n              icon={() => <TbColorFilter />}\n            />\n          </Tiles>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import {\n  Banner,\n  Button,\n  Modal,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { FaRegClock } from \"react-icons/fa\";\nimport { IoMdSkipForward } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\n// import { IOptionItemProps } from \"./OptionItem\";\n\n// const grinderBehaviourOptions: IOptionItemProps[] = [\n//   {\n//     title: \"can skip\",\n//     text: \"Grinder will skip this step if portafilter is not in position\",\n//     value: true,\n//   },\n//   {\n//     title: \"must wait\",\n//     text: \"Grinder will wait until the portafilter is in position\",\n//     value: false,\n//   },\n// ];\n\nexport const GrinderSkipRune = ({\n  value,\n  onChange,\n}: {\n  value: boolean;\n  onChange: Dispatch<SetStateAction<boolean>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [value]);\n  useEffectOnce(() => {\n    onChange(false);\n  });\n\n  const [skippable, setSkippable] = useState<boolean>(true);\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {skippable ? t(\"can skip\") : t(\"must wait\")}\n      </h1>\n\n      {isOpen && (\n        <Modal\n          autoFocus={false}\n          size=\"small\"\n          title={t(\"Set grinder behaviour\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(skippable);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Tiles space={8} columns={2}>\n              <Button\n                kind={skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Can skip\")}\n                onPress={() => setSkippable(true)}\n                icon={() => <IoMdSkipForward />}\n              />\n              <Button\n                kind={!skippable ? \"solid\" : \"outline\"}\n                hierarchy=\"primary\"\n                label={t(\"Must wait\")}\n                onPress={() => setSkippable(false)}\n                icon={() => <FaRegClock />}\n              />\n            </Tiles>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Explaination\")}\n              description={\n                skippable\n                  ? t(\n                      \"Grinder will skip this step if portafilter is not in position\",\n                    )\n                  : t(\n                      \"Grinder will wait until the portafilter is in position, then it will start grinding\",\n                    )\n              }\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","export const TextRune = ({ text }: { text: string }) => {\n  /**\n   * This function displays the input text as normal text, but word by word so it will wrap around.\n   * @param {string} text - The text to be displayed.\n   */\n  return (\n    <>\n      {text.split(\" \").map((word, index) => (\n        <h1 key={index} className=\"mx-1 text-xl text-gray-900\">\n          {word}\n        </h1>\n      ))}\n    </>\n  );\n};\n","import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","import {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { IPourOverParam, IProfileParam } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { SliderField, Columns, Column, Inline, NumberField, Banner, Modal, Stack } from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\nimport { Step } from '../../../gateway/step';\n\nexport function TimeRune({\n  // value,\n  //   onChange,\n  // progress\n  index,\n  subIndex = -1, \n\n  /*\n    subIndex = -1 is for something\n    subIndex = -2 is for PourOver\n  */\n}: {\n  // value: number;\n  //       onChange: Dispatch<SetStateAction<number>>;\n  //      progress:  number;\n  index: number;\n  subIndex: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [current, setCurrent] = useState<number>(-1);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n  const [active, setActive] = useState(false);\n\n  const step = formulas[selectedFormulaId].steps[index];\n\n  const [time, setTime] = useState<number>(\n    subIndex == -1\n      ? step.target.value\n      : subIndex == -2\n        ? (step.action as IPourOverParam).duration || 0\n        : (step.action as IProfileParam).segments[subIndex]?.duration || 0,\n  );\n\n  /*\n    Progress doesn't always show up, it will disappear after 5 seconds\n    So after 5 seconds, it must be clear to null\n    So the number has its own internal state\n  */\n\n  let timeout = useRef<ReturnType<typeof setTimeout>>();\n\n\n  useEffect(() => {\n    const updated = subIndex == -1\n      ? step.target.value\n      : subIndex == -2\n        ? (step.action as IPourOverParam).duration || 0\n        : (step.action as IProfileParam).segments[subIndex]?.duration || 0;\n\n    if (updated != current) {\n      setTime(updated);\n      setActive(true);\n\n      clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n        setActive(false);\n      }, 1000);\n    }\n  }, [formulas, selectedFormulaId, index, subIndex, step, current]);\n\n  useEffect(() => {\n    const updated = formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value;\n    // if you have subIndex, there nis no need to update progress, handled by the line chart already, more visual\n    if (subIndex == -1) {\n      setCurrent(updated || -1);\n    }\n  }, [formulaFeedbacks, index, selectedFormulaId, subIndex]);\n  const { t } = useTranslation();\n\n  function handleChangeAction() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        if (subIndex == -1) {\n          draft[selectedFormulaId].steps[index].target.value = time;\n        } else if (subIndex == -2) {\n          (draft[selectedFormulaId].steps[index].action as IPourOverParam).duration = time\n        } else {\n          const action = step.action as IProfileParam;\n          action.segments[subIndex].duration = time;\n        }\n      }),\n    );\n  }\n\n  return (\n    <>\n      {current != null && current > 0&& (\n        <h1\n          className=\" text-xl font-bold text-green-800\"\n          onClick={() => setIsOpen(true)}\n        >\n          {`${(current / 1000).toFixed(1)}/`}\n        </h1>\n      )}\n      \n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {time.toFixed(1)}\n        \n        {\" \" + (time <= 1 ? t(\"second\") : t(\"seconds\"))}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"How long?\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction();\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"time\"\n                  value={time}\n                  onChange={setTime}\n                  label={t('Time')}\n                  minValue={0}\n                  maxValue={120}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={time}\n                  onChange={setTime}\n                  label={t('Time')}\n                  minValue={0}\n                  maxValue={500}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n\n\n  return (\n    <Popover\n      onOpenChange={(e) => {\n        setIsOpen(e != false);\n      }}\n      open={isOpen}\n    >\n      <PopoverTrigger>\n        <div\n          className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          {current != -1 && (\n            <h1\n              className=\" text-xl font-bold text-green-800\"\n              onClick={() => setIsOpen(true)}\n            >\n              {`${(current / 1000).toFixed(1)}/`}\n            </h1>\n          )}\n\n          <h1 className=\" text-xl font-bold text-blue-800\">\n            {time} {time <= 1 ? t(\"second\") : t(\"seconds\")}\n          </h1>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 space-y-8 rounded-xl  border\">\n        <IoIosCloseCircle\n          className=\"absolute right-2 top-2 text-gray-500\"\n          size={20}\n          onClick={() => {\n            setIsOpen(false);\n          }}\n        />\n\n        <SliderField\n          value={time}\n          onChange={(e: number) => {\n            setTime(e);\n            setFormulas(\n              produce(formulas, (draft) => {\n                // draft[selectedFormulaId].steps[index].target.value = e;\n                if (subIndex == -1) {\n                  draft[selectedFormulaId].steps[index].target.value = e;\n                } else {\n                  const action = step.action as IProfileParam;\n                  action.segments[subIndex].duration = e;\n                }\n              }),\n            );\n          }}\n          label={t(\"Time\")}\n          type=\"single\"\n          name=\"value\"\n          minValue={0}\n          maxValue={60}\n          step={1}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","// @refresh reset\n\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  EnumAction,\n  EnumProfileType,\n  IProfileParam,\n  IProfilingSegment,\n  IStepFeedback,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  NumberField,\n  Column, Columns, Modal,\n  LineChart,\n  SliderField,\n  Stack,\n  Tiles,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FaMinus, FaPlus } from \"react-icons/fa6\";\nimport { IoIosCloseCircle } from \"react-icons/io\";\nimport { useEffectOnce } from \"usehooks-ts\";\nimport { TextRune } from \"./TextRune\";\nimport { TimeRune } from \"./TimeRune\";\n\ntype PressureDtps = {\n  timestamp: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\ntype FlowrateDtps = {\n  timestamp: number;\n  // flowrate: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\ntype PowerDtps = {\n  timestamp: number;\n  power: number;\n  min: number;\n  max: number;\n  pressure?: number;\n  flowrate?: number;\n};\n\nexport type DataPoint = PressureDtps | FlowrateDtps | PowerDtps;\n\nconst generateDatapoints = (\n  segments: IProfilingSegment[],\n  sensor: EnumProfileType,\n  formulaFeedbacks?: IStepFeedback[\"action\"][],\n) => {\n  if (segments === undefined) return [];\n\n  const dps: DataPoint[] = [];\n  // for each segments, we add a new point\n  let totalTime = 0;\n  segments.forEach((segment) => {\n    totalTime += segment.duration;\n  });\n\n  var startTime = 0;\n  var previousValue = 0;\n  for (const segment of segments) {\n    if (segment.smooth == false) {\n      console.log(\"smooth is real\")\n      // add an additional step\n      if (sensor == EnumProfileType.Pressure) {\n        dps.push({\n          timestamp: startTime,\npressure: segment.value,\n          min: 0,\n          max: 11,\n        })\n      }\n      else if (sensor == EnumProfileType.Flowrate) {\n        dps.push({\n          timestamp: startTime,\n          flowrate: segment.value,\n          min: 0,\n          max: 51,\n        })\n      }\n      else if (sensor == EnumProfileType.Power) {\n        dps.push({\n          timestamp: startTime,\n          power: segment.value,\n          min: 0,\n          max: 101,\n        })\n      }\n      previousValue = segment.value\n    }\n\n\n\n    for (var time = 0; time < segment.duration; time += 1) {\n      var interimValue =\n        previousValue +\n        (segment.value - previousValue) * (time / segment.duration);\n      interimValue = Math.round(interimValue * 10) / 10;\n      if (sensor == EnumProfileType.Pressure) {\n        dps.push({\n          timestamp: startTime + time,\npressure: interimValue,\n          max: 10,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Flowrate) {\n        dps.push({\n          timestamp: startTime + time,\n          flowrate: interimValue,\n          max: 50,\n          min: 0,\n          // time: timestamp\n        });\n      } else if (sensor == EnumProfileType.Power) {\n        dps.push({\n          timestamp: startTime + time,\n          power: interimValue,\n          max: 100,\n          min: 0,\n          // time: timestamp\n        });\n      }\n    }\n    previousValue = segment.value;\n    startTime += segment.duration;\n  }\n  return dps;\n};\nexport const RenderedSegment = ({\n  // segments,\n  // // setSegments,\n  // sensor,\n  index,\n}: {\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n  index: number;\n  // setSegments: Dispatch<SetStateAction<IProfilingSegment[]>>;\n}) => {\n  useEffectOnce(() => {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam\n    //     action.actionType = \"Profile\";\n\n    //     action.segments = action.segments || [];\n\n    //     console.log(\"profile/ create object\", action)\n    //     if ((draft[index].action as IProfileParam).segments.length == 0) {\n    //       (draft[index].action as IProfileParam).segments = [\n    //         {\n    //           duration: 10,\n    //           value: 3,\n    //         },\n    //       ];\n    //     }\n    //     return draft\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index].action as IProfileParam;\n        action.actionType = \"Profile\";\n\n        action.segments = action.segments || [];\n\n        console.log(\"profile/ create object\", action);\n        if (action.segments.length == 0) {\n          action.segments = [\n            {\n              duration: 10,\n              value: 3,\n              smooth: false,\n            },\n          ];\n        }\n        return draft;\n      }),\n    );\n  });\n\n  // const [renderedSegments, setRenderedSegments] = useState<JSX.Element[]>([]);\n\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { t } = useTranslation();\n  const step = (formulas[selectedFormulaId]?.steps||[])[index];\n  const action = step.action as IProfileParam;\n\n  const renderedSegments = (action.segments || []).map((segment, idx) => {\n    return (\n      <div className=\"flex-rol flex flex-wrap\" key={idx}>\n        {idx == 0 ? (\n          <TextRune text={t(\"First,\")} />\n        ) : (\n          <TextRune text={t(\"then\")} />\n        )}\n        <SegmentModeRune index={index} subIndex={idx} />\n\n        <ProfileValueRune index={index} subIndex={idx} />\n\n        {action.segments[idx].smooth ? (\n          <TextRune text={t(\"within\")} />\n\n        ) : (\n          <TextRune text={t(\"for\")} />\n\n        )}\n\n        <TimeRune\n          // progress={segments[idx].duration}\n          // value={segments[idx].duration}\n          // onChange={(e: number) => {\n          //   setSteps(\n          //     produce(steps, (draft) => {\n          //       const action = draft[index].action as IProfileParam;\n          //       action.segments[idx].duration = e;\n          //     })\n          //   );\n          // }}\n          index={index}\n          subIndex={idx}\n        />\n        <h1 className=\"text-xl\">\n          {idx === action.segments.length - 1 ? \".\" : \",\"}\n        </h1>\n      </div>\n    );\n  });\n\n  /**\n   *  Render segments in text readable format\n   *  First, extract with 9 bar for 2 seconds, then slowly turn to 1 bar for 5 seconds, then\n   *\n   * then is a button ?\n   *\n   *  */\n\n  /* \n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds] [+]\n    Click Add -> First, reaching [pressure] of [9bar] withing [10 seconds], then, 2 bar within 2 seconds, then 3 bar whithin 20s\n  */\n  const addSegment = () => {\n    // setSegments(\n    //   produce(segments, (draft: IProfilingSegment[]) => {\n    //     // draft.push({\n    //     //   duration: 5,\n    //     //   value: 3\n    //     // })\n    //     draft.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.push({\n    //       duration: Math.floor(Math.random() * 30),\n    //       value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments = action.segments || [];\n        action.segments.push({\n          duration: Math.floor(Math.random() * 30),\n          value: +(Math.random() * (10 - 2) + 2).toFixed(1),\n          smooth: false,\n        });\n      }),\n    );\n  };\n  const removeSegment = () => {\n    // console.log(\"remove segment\", { segments });\n    // if (segments.length > 1) {\n    //   // setSegments(\n    //   //   produce(segments, (draft) => {\n    //   //     draft.splice(-1);\n    //   //   })\n    //   // );\n    // }\n    if (action.segments === undefined) return;\n    if (action.segments.length < 2) return;\n\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const action = draft[index].action as IProfileParam;\n    //     action.segments.pop();\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const action = draft[selectedFormulaId].steps[index]\n          .action as IProfileParam;\n        action.segments.pop();\n        return draft;\n      }),\n    );\n  };\n  return (\n    <>\n      <Separator />\n      <ul>{renderedSegments}</ul>\n      <div className=\"flex h-10 w-fit cursor-pointer  flex-row items-center space-x-6 rounded-md bg-blue-100 p-2 transition-transform duration-200 border\">\n        <FaPlus color=\"#00aeef\" size={20} onClick={addSegment} />\n        <FaMinus color=\"#ff0000\" size={20} onClick={removeSegment} />\n      </div>\n    </>\n  );\n};\n\nexport const SegmentModeRune = ({\n  index,\n  subIndex = -1,\n}: {\n  index: number;\n  subIndex: number;\n}) => {\n\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext()\n  const step = (formulas[selectedFormulaId]?.steps||[])[index]\n  const { t } = useTranslation()\n\n\n  function handleSwap() {\n    setFormulas(produce(formulas, (draft) => {\n      (draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].smooth = !(draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].smooth\n    }))\n\n  }\n\n\n  /*\n    add reaching up or down\n    it need to have access to value of previous segment only\n  */\n  var previousValue = 0\n  if (subIndex > 0) {\n    previousValue = (step.action as IProfileParam).segments[subIndex - 1].value\n  }\n\n  var isUpward = previousValue < (step.action as IProfileParam).segments[subIndex].value\n  \n\n\n  return <>\n    <h1\n      className=\"text-xl font-bold text-orange-900\"\n      onClick={handleSwap}\n    >\n      {/* {step.action.actionType || \"Action\"} */}\n      {(step.action as IProfileParam).segments[subIndex].smooth ? (\n        isUpward ? t(\"slowly reaching up\") : t(\"slowly reaching down\")\n      ) : (t(\"hold at\"))}\n    </h1>\n  </>\n}\n\nexport const MagicLine = ({\n  // segments,\n  // sensor,\n  index,\n}: {\n  index: number;\n  // segments: IProfilingSegment[];\n  // sensor: EnumProfileType;\n}) => {\n  const [dataPoints, setDataPoints] = useState<DataPoint[]>([]);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const { formulaFeedbacks } = useDeviceContext();\n\n  const step = (formulas[selectedFormulaId]?.steps||[])[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n\n  const fbstore = useRef<IStepFeedback[\"action\"][]>([]);\n\n  useEffect(() => {\n    try {\n      const actionUpdate = formulaFeedbacks[selectedFormulaId][index]?.action as IStepFeedback[\"action\"];\n\n      if (!actionUpdate) {\n        console.warn(\"No update from profileRune\")\n        return;\n      }\n      // when ever formulaFeedbacks are updated, store the values here\n      console.log(\"Line/ add value\", actionUpdate);\n\n      fbstore.current = (window as any).fbstore || [];\n      (window as any).fbstore = fbstore.current;\n\n      var store = fbstore.current;\n      store.push({\n        ...actionUpdate,\n        timestamp: Math.round(actionUpdate.timestamp / 1000),\n      });\n      // filter out the store, using the timestamp, remove those that has higher timestmap than actionUpdate\n      // store = store.filter((s) => s.timestamp >= Math.round(actionUpdate.timestamp / 1000))\n\n      const dpts = generateDatapoints(segments, sensor, store);\n      // add the current reporting in\n      dpts.map((dpt, idx) => {\n        var current = null;\n        store.forEach((s) => {\n          // find the latest value\n          if (s.timestamp == dpt.timestamp) {\n            dpt.flowrate = s.input;\n            dpt.pressure = s.pressure * 10 || 0;\n          }\n        });\n      });\n      console.log(\"Line/ dpts\", dpts, store);\n      setDataPoints(dpts);\n    } catch (e) {\n      console.error(\"ProfileRune\", e);\n    }\n  }, [formulaFeedbacks, index, segments, selectedFormulaId, sensor]);\n\n  useEffect(() => {\n    setDataPoints(generateDatapoints(segments, sensor));\n  }, [segments, sensor]);\n\n  const attrMap = {};\n  attrMap[EnumProfileType.Pressure] = \"pressure\";\n  attrMap[EnumProfileType.Flowrate] = \"flowrate\";\n  attrMap[EnumProfileType.Power] = \"power\";\n\n  return (\n    <div className=\"w-full -translate-x-10 transition-transform duration-200 z-50\">\n      <LineChart\n        key={index}\n        height={300}\n        dataKey=\"Time\"\n        categories={[\n          // add the sensor of power herer\n\n          // sensor == EnumProfileType.Pressure ? \"pressure\" : \"flowrate\",\n          attrMap[sensor] || \"unknown sensor\",\n          // \"flowrate\",\n          // \"max\",\n          // \"min\",\n          \"pressure\"\n        ]}\n        hideLegend={false}\n        hideXAxis={true}\n        hideYAxis={false}\n        data={dataPoints}\n        disableAnimation={true}\n      />\n    </div>\n  );\n};\nconst ProfileValueRune = ({\n  // segments,\n  // setValue,\n  // sensor,\n  // idx,\n  index,\n  subIndex,\n}: {\n  // segments: IProfilingSegment[];\n  // setValue: Dispatch<SetStateAction<number>>;\n  // sensor: EnumProfileType;\n  // idx: number;\n  index: number;\n  subIndex: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = (formulas[selectedFormulaId]?.steps||[])[index];\n  const action = step.action as IProfileParam;\n  const sensor = action.profilingType;\n  const segments = action.segments;\n  const idx = subIndex;\n\n  let unit: string = \"\";\n  if (sensor == EnumProfileType.Pressure) {\n    unit = \"bar\";\n  }\n  if (sensor == EnumProfileType.Flowrate) {\n    unit = \"gram/s\";\n  } else if (sensor == EnumProfileType.Power) {\n    unit = \"%\";\n  }\n\n  const maxValue: Record<EnumProfileType, number> = {\n    [EnumProfileType.Pressure]: 10,\n    [EnumProfileType.Flowrate]: 100,\n    [EnumProfileType.Power]: 100,\n  };\n  const [value, setValue] = useState<number>(segments[subIndex].value)\n  const { t } = useTranslation()\n  \n  \n  function handleUpdate() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        (draft[selectedFormulaId].steps[index].action as IProfileParam).segments[subIndex].value = value\n      })\n    )\n  }\n\n\n  return (\n    <>\n      <div\n        className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        <h1 className=\"text-xl font-bold text-blue-800\">{value === null ? 100 : value} %</h1>\n      </div>\n\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Set target\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: () => {\n              setIsOpen(false);\n              handleUpdate();\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"power\"\n                  value={value}\n                  onChange={(e: number) => {\n                    setValue(e);\n                  }}\n                  label={t(sensor)}\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={value}\n                  onChange={setValue}\n                  onBlur={() => console.log(\"blur\")}\n                  label={t(sensor)}\n\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n\n            {/* <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"Power require an external hardware to be connected to the machine, other wise it is simply ON/OFF\")}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            /> */}\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n\n  // return (\n  //   <Popover\n  //     onOpenChange={(e) => {\n  //       console.log(\"close\", e);\n  //       if (e == false) {\n  //         setIsOpen(false);\n  //       }\n  //     }}\n  //     open={isOpen}\n  //   >\n  //     <PopoverTrigger>\n  //       <div\n  //         className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n  //         onClick={() => {\n  //           setIsOpen(true);\n  //         }}\n  //       >\n  //         <h1 className=\" text-xl font-bold text-blue-800\">\n  //           {segments[idx].value} {unit}\n  //         </h1>\n  //       </div>\n  //     </PopoverTrigger>\n  //     <PopoverContent className=\"w-96 min-w-96 rounded-xl border\">\n  //       <IoIosCloseCircle\n  //         className=\"absolute right-2 top-2 text-gray-500\"\n  //         size={20}\n  //         onClick={() => {\n  //           setIsOpen(false);\n  //         }}\n  //       />\n\n  //       <SliderField\n  //         value={segments[idx].value}\n  //         onChange={(e: number) => {\n  //           setFormulas(\n  //             produce(formulas, (draft) => {\n  //               (\n  //                 draft[selectedFormulaId].steps[index].action as IProfileParam\n  //               ).segments[idx].value = e;\n  //             }),\n  //           );\n  //         }}\n  //         label={sensor}\n  //         type=\"single\"\n  //         name=\"value\"\n  //         minValue={0}\n  //         maxValue={maxValue[sensor]}\n  //         step={0.1}\n  //       />\n  //     </PopoverContent>\n  //   </Popover>\n  // );\n};\n\nexport const ProfileRune = ({\n  // value,\n  // onChange,\n  index,\n}: {\n  // value: EnumProfileType;\n  // onChange: Dispatch<SetStateAction<string>>;\n  index: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const step = (formulas[selectedFormulaId]?.steps||[])[index];\n  const action = step.action as IProfileParam;\n\n  const [profileType, setProfileType] = useState<EnumProfileType>(\n    action.profilingType || EnumProfileType.Flowrate,\n  );\n\n  const { t } = useTranslation();\n  useEffect(() => {\n    setIsOpen(false);\n  }, [formulas]);\n\n  function onChange(sensor: EnumProfileType) {\n    setFormulas(\n      produce(formulas, (draft) => {\n        draft[selectedFormulaId].steps[index].action.actionType =\n          EnumAction.Profile;\n        (\n          draft[selectedFormulaId].steps[index].action as IProfileParam\n        ).profilingType = sensor;\n      }),\n    );\n  }\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        {t(action.profilingType) || EnumProfileType.Flowrate}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title=\"Select an profiling method\"\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(profileType);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={16}>\n            <Tiles space={8} columns={2}>\n              {/* <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Flowrate ? \"solid\" : \"outline\"\n                }\n                label=\"Flowrate\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Flowrate);\n                }}\n              /> */}\n\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Pressure ? \"solid\" : \"outline\"\n                }\n                label=\"Pressure\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Pressure);\n                }}\n              />\n              <Button\n                hierarchy=\"primary\"\n                kind={\n                  profileType == EnumProfileType.Power ? \"solid\" : \"outline\"\n                }\n                label=\"Power\"\n                onPress={() => {\n                  setProfileType(EnumProfileType.Power);\n                }}\n              />\n            </Tiles>\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { IGrinderState } from \"@/gateway/grinder\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Banner,\n  Button,\n  Inline,\n  Modal,\n  Stack,\n} from \"@buildo/bento-design-system\";\nimport { useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\n\nexport const IngredientRune = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: Dispatch<SetStateAction<string>>;\n}) => {\n  console.log(\"action/ recreate\");\n\n  const [isOpen, setIsOpen] = useState(false);\n  const { grinderSettings } = useDeviceContext();\n\n  const [ingredient, setIngridient] = useState<string>(value || \"\");\n  const { t } = useTranslation();\n  const router = useRouter();\n  useEffectOnce(() => {\n    onChange(\"\");\n  });\n\n  return (\n    <>\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {ingredient == \"\" ? t(\"[Select ingredient]\") : ingredient}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Select ingredient\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              onChange(ingredient);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Inline space={4}>\n              {grinderSettings.map((grinder: IGrinderState, index: number) => {\n                return (\n                  <Button\n                    key={index}\n                    kind={ingredient == grinder.name ? \"solid\" : \"outline\"}\n                    hierarchy=\"primary\"\n                    label={grinder.name}\n                    onPress={() => setIngridient(grinder.name)}\n                  />\n                );\n              })}\n              {/* <Button\n                key={-1}\n                kind={\"outline\"}\n                hierarchy=\"primary\"\n                label={\"+\"}\n                onPress={() => {\n                  router.push(\"/setting\");\n                }}\n              /> */}\n            </Inline>\n            <Banner\n              kind=\"informative\"\n              title={t(\"Reminder\")}\n              description={t(\n                \"You can set up your grinder in the settings, the hardware can be connected to the machine wirelessly to the espresso machine\",\n              )}\n              // action={{\n              //   label: \"Learn more\",\n              //   onPress: () => {\n              //     window.open(\"https://www.google.com\");\n              //   },\n              // }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { Banner, Modal, SliderField, Stack, NumberField, Columns, Column } from \"@buildo/bento-design-system\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { useEffectOnce } from \"usehooks-ts\";\nimport { useTranslation } from \"next-export-i18n\";\n\nexport const PumpRune = ({\n  value,\n  onChange,\n}: {\n  value: number;\n  onChange: Dispatch<SetStateAction<number>>;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [power, setPower] = useState<number>(value == null ? 100 : value);\n\n  useEffectOnce(() => {\n    onChange(power)\n  })\n  const {t} = useTranslation()\n\n  return (\n    <>\n      <div\n        className=\"flex h-8 w-fit items-center justify-between rounded-lg p-2\"\n        onClick={() => {\n          setIsOpen(true);\n        }}\n      >\n        <h1 className=\"text-xl font-bold text-blue-800\">{value === null ? 100 : value} %</h1>\n      </div>\n\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"Set pump power\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              console.log(\" update power\", power);\n              onChange(power);\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                  name=\"power\"\n                  value={power}\n                  onChange={(e: number) => {\n                    console.log(\"Power is updated for pump\", e);\n                    setPower(e);\n                  }}\n                  label={t(\"Pump Power\")}\n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n              <Column width={\"1/5\"}>\n                <NumberField\n                  value={power}\n                  onChange={setPower}\n                  onBlur={() => console.log(\"blur\")}\n                  label={t(\"\")}\n                  \n                  minValue={0}\n                  maxValue={100}\n                  step={1}\n                />\n              </Column>\n            </Columns>\n\n            <Banner\n              kind=\"informative\"\n              title={t(\"Notice\")}\n              description={t(\"Power require an external hardware to be connected to the machine, other wise it is simply ON/OFF\")}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { EnumTarget, IPourOverParam } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { Banner, Modal, SliderField, Stack, NumberField , Column, Columns} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"next-export-i18n\";\n\nexport function WeightRune({\n  // value,\n  //   onChange,\n  // progress,\n  subIndex = -1,\n  index,\n}: {\n  // value: number;\n  // onChange: Dispatch<SetStateAction<number>>;\n  // progress: number;\n  subIndex: number;\n  index: number;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { formulas, setFormulas, selectedFormulaId, formulaFeedbacks } =\n    useDeviceContext();\n  const step = formulas[selectedFormulaId].steps[index];\n  const [weight, setWeight] = useState<number>(subIndex == -1 ? \n    step.target.value : (step.action as IPourOverParam).stepAmount || 0  \n  );\n\n  const [current, setCurrent] = useState<number>(0);\n  const { t } = useTranslation()\n\n\n\n  /*\n      Progress doesn't always show up, it will disappear after 5 seconds\n      So after 5 seconds, it must be clear to null\n      So the number has its own internal state\n  */\n\n  useEffect(() => {\n    const updated =\n      formulaFeedbacks[selectedFormulaId]?.[index]?.target?.value || 0;\n    setCurrent(updated * 10);\n  }, [formulaFeedbacks, index, selectedFormulaId]);\n\n  let timeout = useRef(null);\n\n  // useEffect(() => {\n  //   setCurrent(progress);\n\n  //   clearTimeout(timeout.current)\n  //   timeout.current = setTimeout(() => {\n  //     setCurrent(null)\n  //   }, 5000)\n  //   console.log(\"Progress is updated for weight\", progress)\n  // }, [progress])\n\n  function handleChangeAction() {\n    setFormulas(\n      produce(formulas, (draft) => {\n        if (subIndex == -1) {\n          draft[selectedFormulaId].steps[index].target.targetType =\n            EnumTarget.Weight;\n          draft[selectedFormulaId].steps[index].target.value = weight;\n\n        }\n        else {\n          const action = step.action as IPourOverParam\n          action.stepAmount = weight\n        }\n      }),\n    );\n  }\n\n  return (\n    <>\n      {current != null  && current > 0 && (\n        <h1\n          className=\" text-xl font-bold text-green-800\"\n          onClick={() => setIsOpen(true)}\n        >\n          {`${(current / 10).toFixed(1)}/`}\n        </h1>\n      )}\n\n      <h1\n        className=\" text-xl font-bold text-blue-800\"\n        onClick={() => setIsOpen(true)}\n      >\n        {weight.toFixed(1)}\n        {weight <= 1 ? \" gram\" : \" grams\"}\n      </h1>\n      {isOpen && (\n        <Modal\n          size=\"small\"\n          title={t(\"How much ?\")}\n          onClose={() => setIsOpen(false)}\n          primaryAction={{\n            label: \"OK\",\n            onPress: () => {\n              setIsOpen(false);\n              handleChangeAction();\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setIsOpen(false),\n          }}\n        >\n          <Stack space={8}>\n            <Columns space={4} align=\"center\">\n              <Column width={\"4/5\"}>\n                <SliderField\n                  type=\"single\"\n                name=\"weight\"\n                value={weight}\n                onChange={setWeight}\n                label=\"Weight\"\n                minValue={0}\n                maxValue={500}\n                step={1}\n                />\n                </Column>\n              <Column width={\"1/5\"}>\n              <NumberField\n                value={weight}\n                onChange={setWeight}\n                label=\"Weight\"\n                minValue={0}\n                maxValue={500}\n                step={1}\n              />\n              </Column>\n            </Columns>\n            <Banner\n              kind=\"informative\"\n              title=\"Reminder\"\n              description={t(\"Calibration is required for accurate weight, please go to Settings\")}\n            />\n          </Stack>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { CirclePicker } from 'react-color'\nimport {\n    Modal\n} from '@buildo/bento-design-system'\nimport { useTranslation } from 'next-export-i18n';\n\nimport { useState } from 'react'\nimport useDeviceContext from '@/hooks/useDeviceContext';\nimport { produce } from 'immer'\nimport { IRGBParam } from '@/gateway/step';\n\n\nexport const ColorRune = ({ index }: { index: number }) => {\n    /**\n     * This function displays the input text as normal text, but word by word so it will wrap around.\n     * @param {string} text - The text to be displayed.\n    */\n    \n    const [colorModal, setColorModal] = useState(false)\n    const { t } = useTranslation()\n    const { formulas, setFormulas, selectedFormulaId } = useDeviceContext()\n    const step = formulas[selectedFormulaId].steps[index];\n    const action = step.action as IRGBParam;\n\n\n    return (\n        <>\n            {colorModal && (\n                <Modal\n                size=\"small\"\n                autoFocus={false}\n                title={t(\"Set color\")}\n                onClose={() => setColorModal(false)}\n                primaryAction={{\n                    label: t(\"OK\"),\n                    onPress: async () => {\n                        setColorModal(false)\n\n                    },\n                }}\n                secondaryAction={{\n                    label: t(\"Cancel\"),\n                    onPress: () => setColorModal(false),\n                }}\n            >\n                <div className=\"flex items-center justify-center w-full h-full p-4\">\n                    <CirclePicker\n                        className='m-4'\n                        color={action.color || \"#00aeef\"}\n                        onChange={(color: any, e: any) => {\n                            // setFormulas(produce(formulas, draft => {\n                            //     if (!formulas[selectedFormulaId]) return;\n                            //     formulas[selectedFormulaId]. = color.hex\n                            // }))\n                            console.log(\"set to colr \", color)\n\n\n                            setFormulas(produce(formulas, (draft) => {\n                                // draft[selectedFormulaId].steps[index].target.value = e;\n                                \n                                var action = draft[selectedFormulaId].steps[index].action as IRGBParam\n                                action.color = color.hex\n                                action.start = 0\n                                action.stop = 0\n                            }))\n\n\n                        }}\n                    />\n                </div>\n            </Modal>\n            )}\n            <button className=\"ml-2 h-8 w-8  rounded-xl  ring-1 ring-white \"\n                style={{\n                    backgroundColor: action.color || \"#000000\"\n                }}\n                onClick={() => {\n                    setColorModal(true)\n                }}\n            ></button>\n\n        </>\n    );\n};\n","import {\n  EnumAction,\n  IExtractParam,\n  IGrindParam,\n  IPourOverParam,\n  IRestParam,\n} from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport { produce } from \"immer\";\nimport { MdOutlineClear } from \"react-icons/md\";\nimport { ActionRune } from \"./components/ActionRune\";\nimport { GrinderSkipRune } from \"./components/GrinderRune\";\nimport { MagicLine, RenderedSegment } from \"./components/ProfileRune\";\nimport {motion, AnimatePresence} from 'framer-motion'\n\nimport { useTranslation } from \"next-export-i18n\";\nimport { IngredientRune } from \"./components/IngredientRune\";\nimport { ProfileRune } from \"./components/ProfileRune\";\nimport { PumpRune } from \"./components/PumpRune\";\nimport { TextRune } from \"./components/TextRune\";\nimport { TimeRune } from \"./components/TimeRune\";\nimport { WeightRune } from \"./components/WeightRune\";\nimport { ColorRune } from \"./components/ColorRune\";\n\nexport type ProfilingType = \"pressure sensor\" | \"flowrate profiler\";\nexport type GrinderBehaviour = \"can skip\" | \"must wait\";\nexport type ActionType = \"Grind\" | \"Extract\" | \"Rest\" | \"Profiling\";\n\n// ----------------------------------------------------------- //\n\nfunction Wrapper() {\n  return (\n    <div className=\"group relative mx-auto max-w-7xl\">\n      <div className=\"absolute -inset-1 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 opacity-25 blur transition duration-1000 group-hover:opacity-100 group-hover:duration-200\">\n        <div className=\"items-pop flex justify-start space-x-6 rounded-lg bg-white px-7 py-6 leading-none ring-1 ring-gray-900\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport function NewStepCard({\n  onDelete,\n  index,\n}: {\n  onDelete: () => void;\n  index: number;\n}) {\n  const { formulas, setFormulas, selectedFormulaId } = useDeviceContext();\n  const steps = formulas[selectedFormulaId].steps || [];\n  const { t } = useTranslation();\n  return (\n      <motion.div\n        key={index}\n        // initial={{\n        //   scale: 0,\n        //   opacity: 0\n        // }}\n        // animate={{\n        //   scale: 1,\n        //   opacity: 1\n        // }}\n        // transition={{\n        //   ease: \"easeInOut\"\n        // }}\n\n\n        className=\"-inset-1 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600\"\n      >\n        <div className=\"flex h-fit w-96 max-w-[calc(90vw)] flex-col rounded-xl  border  bg-white p-4 drop-shadow-xl \">\n          <div\n            className=\"absolute right-0 top-0 cursor-pointer p-2 z-50\"\n            onClick={() => onDelete()}\n          >\n            <MdOutlineClear className=\"text-gray-300\" />\n          </div>\n          <div className=\"max-w-96  items-center gap-2 space-x-1 text-wrap flex flex-row flex-wrap z-10\">\n            <ActionRune index={index} />\n\n            {formulas[selectedFormulaId].steps[index].action.actionType ===\n              EnumAction.Grind && (\n                <>\n                  <WeightRune index={index} subIndex={-1} />\n                  <TextRune text={t(\"of\")} />\n                  <IngredientRune\n                    value={(steps[index].action as IGrindParam).ingredient}\n                    onChange={(ingredient: string) => {\n                      // setSteps(\n                      //   produce(steps, (draft) => {\n                      //     (draft[index].action as IGrindParam).ingredient =\n                      //       ingredient;\n                      //   })\n                      // );\n\n                      setFormulas(\n                        produce(formulas, (draft) => {\n                          (\n                            draft[selectedFormulaId].steps[index]\n                              .action as IGrindParam\n                          ).ingredient = ingredient;\n                        }),\n                      );\n                    }}\n                  />\n                  <TextRune text={t(\"bean, grinder\")} />\n                  <GrinderSkipRune\n                    value={(steps[index].action as IGrindParam).canSkip}\n                    onChange={(state: boolean) => {\n                      // setSteps(\n                      //   produce(steps, (draft) => {\n                      //     (draft[index].action as IGrindParam).canSkip = state;\n                      //     draft[index].action.actionType = EnumAction.Grind;\n                      //   })\n                      // );\n                      setFormulas(\n                        produce(formulas, (draft) => {\n                          (\n                            draft[selectedFormulaId].steps[index]\n                              .action as IGrindParam\n                          ).canSkip = state;\n                          draft[selectedFormulaId].steps[index].action.actionType =\n                            EnumAction.Grind;\n                        }),\n                      );\n                    }}\n                  />\n\n                  {(steps[index].action as IGrindParam).canSkip === true ? (\n                    <TextRune text={t(\"this step is portafilter is absent\")} />\n                  ) : (\n                    <TextRune text={t(\"until portafilter is present\")} />\n                  )}\n                </>\n              )}\n            {steps[index].action.actionType === EnumAction.Extract && (\n              <>\n                {/* <TextRune text=\"a shot of\" /> */}\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\"with pump power\")} />\n                <PumpRune\n                  value={(steps[index].action as IExtractParam).power}\n                  onChange={(power: number) => {\n                    // setSteps(\n                    //   produce(steps, (draft) => {\n                    //     (draft[index].action as IExtractParam).actionType =\n                    //       EnumAction.Extract;\n                    //     (draft[index].action as IExtractParam).power = power;\n                    //   })\n                    // );\n\n                    setFormulas(\n                      produce(formulas, (draft) => {\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IExtractParam\n                        ).actionType = EnumAction.Extract;\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IExtractParam\n                        ).power = power;\n                      }),\n                    );\n                  }}\n                />\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.RGB && (\n              <>\n                {/* <TextRune text=\"a shot of\" /> */}\n                <TextRune text=\"set all pixels to\" />\n                <ColorRune index={index}/>\n\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.PourOver && (\n              <>\n                <TextRune text={t(\"total of\")} />\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\", extract\")} />\n                <WeightRune index={index} subIndex={0} />\n                <TextRune text={t(\"every\")} />\n                <TimeRune subIndex={-2} index={index} />\n                <TextRune text={t(\"with pump power of\")} />\n                <PumpRune\n                  value={(steps[index].action as IPourOverParam).pumpPower}\n                  onChange={(power: number) => {\n                    // setSteps(\n                    //   produce(steps, (draft) => {\n                    //     (draft[index].action as IExtractParam).actionType =\n                    //       EnumAction.Extract;\n                    //     (draft[index].action as IExtractParam).power = power;\n                    //   })\n                    // );\n\n                    setFormulas(\n                      produce(formulas, (draft) => {\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IPourOverParam\n                        ).actionType = EnumAction.PourOver;\n                        (\n                          draft[selectedFormulaId].steps[index]\n                            .action as IPourOverParam\n                        ).pumpPower = power;\n                      }),\n                    );\n                  }}\n                />\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.Rest && (\n              <>\n                <TextRune text={t(\"for\")} />\n                <TimeRune\n                  subIndex={-1}\n                  index={index}\n                />\n                {(steps[index].action as IRestParam).valveState && (\n                  <TextRune text=\"but keep valve open\" />\n                )}\n              </>\n            )}\n            {steps[index].action.actionType === EnumAction.Profile && (\n              <>\n                <TextRune text={t(\"to extract\")} />\n\n                <WeightRune index={index} subIndex={-1} />\n                <TextRune text={t(\"using\")} />\n                <ProfileRune index={index} />\n                <TextRune text={t(\"profiling\")} />\n                <RenderedSegment\n                  index={index}\n                />\n                <MagicLine\n                  index={index}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      </motion.div>\n\n  );\n}\n","\"use client\";\n\nimport Head from 'next/head'\nimport { NewStepCard } from \"@/components/step/StepCard\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { EnumAction, EnumTarget } from \"@/gateway/step\";\nimport useDeviceContext from \"@/hooks/useDeviceContext\";\nimport {\n  Body,\n  Button,\n  Modal,\n  TextField,\n  Banner,\n  CheckboxField,\n  Tiles,\n  SliderField,\n  SelectField,\n} from \"@buildo/bento-design-system\";\nimport { produce } from \"immer\";\nimport { useSelectedLanguage, useTranslation } from \"next-export-i18n\";\nimport { useRouter } from \"next/router\";\nimport { ReactNode, useEffect, useRef, useState } from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  DropResult,\n  Droppable,\n  ResponderProvided,\n} from \"react-beautiful-dnd\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport {\n  FaDownload,\n  FaPlay,\n  FaShareAlt,\n  FaStop,\n  FaWindowClose,\n} from \"react-icons/fa\";\nimport { uuid } from \"uuidv4\";\nimport Layout from \"./layout\";\nimport { downloadFormula } from \"@/gateway/formula\";\nimport { queryDevice } from \"@/gateway/connection\";\n\nimport { SketchPicker, CirclePicker, ColorChangeHandler } from 'react-color';\nimport { cn } from '@/util';\n\n\nconst BetterButton = ({\n  icon,\n  label,\n  color,\n  onClick,\n}: {\n  icon: ReactNode;\n  label: string;\n  color: string;\n  onClick: () => void;\n}) => {\n  return (\n    <div\n      className={`flex size-12 cursor-pointer flex-row items-center space-x-1 rounded-xl border bg-white p-4 hover:border-blue-500`}\n    >\n      {icon}\n    </div>\n  );\n};\n\nconst Detail = () => {\n  const router = useRouter();\n  const id = router.query.slug;\n\n\n\n  const [downloadTargetGroup, setDownloadTargetGroup] = useState(-1);\n  const [downloadTargetButton, setDownloadTargetButton] = useState(-1);\n\n  const [downloadWindow, setDownloadWindow] = useState(false);\n  const [shareWindow, setShareWindow] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [running, setRunning] = useState<boolean>(false);\n  const [shareToken, setShareToken] = useState<string>('')\n  const {\n    selectedFormulaId,\n    registerSelectedFormulaId,\n    setFormulas,\n    formulas,\n    setSelectedPage,\n    registerFormulaClick,\n    cancelFormulaClick,\n    progressReport,\n  } = useDeviceContext();\n\n\n\n\n  const [winReady, setwinReady] = useState(false);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const [colorModal, setColorModal] = useState<boolean>(false);\n  const { formulaFeedbacks } = useDeviceContext();\n\n  useEffect(() => {\n    if (timeoutRef) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => {\n        setRunning(false);\n      }, 2000);\n      setRunning(true);\n    }\n  }, [formulaFeedbacks, selectedFormulaId]);\n\n  useEffect(() => {\n    setTimeout(async () => {\n      await queryDevice({\n        command: 'group.locate',\n        buttonId: downloadTargetButton + 1,\n        groupId: downloadTargetGroup + 1,\n      })\n\n    })\n  }, [downloadTargetGroup, downloadTargetButton])\n\n  //TODO: Assume don't have any formular before\n  function handleAddStep() {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     draft.push({\n    //       id: uuid(),\n    //       action: {\n    //         actionType: EnumAction.Rest,\n    //         valveState: false,\n    //       },\n    //       target: {\n    //         targetType: EnumTarget.Time,\n    //         value: 10,\n    //       },\n    //     });\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        formula.steps.push({\n          id: uuid(),\n          action: {\n            actionType: EnumAction.Rest,\n            valveState: false,\n          },\n          target: {\n            targetType: EnumTarget.Time,\n            value: 10,\n          },\n        });\n      }),\n    );\n  }\n\n  function handleDeleteStep(id: string) {\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     return draft.filter(function (item) {\n    //       return item?.id !== id;\n    //     });\n    //   })\n    // );\n  \n    // Deleting first tep may crash ?\n    if (!id) return\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        if (!formula) return;\n\n\n        const index = formula.steps.findIndex(function (item) {\n          return item?.id === id;\n        });\n        if (index !== -1) formula.steps.splice(index, 1);\n        draft[selectedFormulaId] = formula\n      return draft\n\n      }),\n    );\n  }\n\n  function handleDragAndDrop(result: DropResult, provided: ResponderProvided) {\n    if (!result.destination) return;\n    // setSteps(\n    //   produce(steps, (draft) => {\n    //     const [reorderedItem] = draft.splice(result.source.index, 1);\n    //     draft.splice(result.destination.index, 0, reorderedItem);\n    //     return draft;\n    //   })\n    // );\n\n    setFormulas(\n      produce(formulas, (draft) => {\n        const formula = draft[selectedFormulaId];\n        const [reorderedItem] = formula.steps.splice(result.source.index, 1);\n        formula.steps.splice(result?.destination?.index || 0, 0, reorderedItem);\n        return draft;\n      }),\n    );\n  }\n\n  useEffect(function () {\n    setwinReady(true);\n  }, []);\n  useEffect(() => {\n    console.log(\"lab/ re-render\", selectedFormulaId);\n  }, [selectedFormulaId]);\n\n  const listDrinkType = () => {\n    return (\n      <div className=\"flex h-16 w-full flex-row justify-between space-x-4\"></div>\n    );\n  };\n  const { lang } = useSelectedLanguage();\n  const { t } = useTranslation();\n\n\n\n\n\n  const translations_run = t(\"Run\");\n  return (\n    <Layout>\n      <Head>\n        <title>☕ ROSARIO</title>\n      </Head>\n\n      {colorModal && (\n        <Modal\n          size=\"small\"\n          autoFocus={false}\n          title={t(\"Set color\")}\n          onClose={() => setColorModal(false)}\n          primaryAction={{\n            label: t(\"OK\"),\n            onPress: async () => {\n              setColorModal(false)\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setColorModal(false),\n          }}\n        >\n          <div className=\"flex items-center justify-center w-full h-full p-4\">\n            <CirclePicker\n              className='m-4'\n              color={formulas[selectedFormulaId]?.color || \"#00aeef\"}\n              onChange={(color: any, e: any) => {\n                setFormulas(produce(formulas, draft => {\n                  if (!formulas[selectedFormulaId]) return;\n                  formulas[selectedFormulaId].color = color.hex\n                }))\n              }}\n            />\n          </div>\n        </Modal>\n      )}\n\n      {downloadWindow && (\n        <Modal\n          size=\"large\"\n          autoFocus={false}\n          title={t(\"Assign to Button\")}\n          onClose={() => setDownloadWindow(false)}\n          primaryAction={{\n            label: t(\"Download\"),\n            onPress: async () => {\n              console.log('lab/ download formula to', { downloadTargetGroup, downloadTargetButton, selectedFormulaId })\n\n              await downloadFormula({ groupId: downloadTargetGroup + 1, buttonId: downloadTargetButton + 1, formulaId: selectedFormulaId })\n\n              setLoading(true);\n              setTimeout(() => {\n                setDownloadWindow(false);\n              }, 1000);\n            },\n          }}\n          secondaryAction={{\n            label: t(\"Cancel\"),\n            onPress: () => setDownloadWindow(false),\n          }}\n        >\n          <Body size=\"medium\">\n            {t(\n              \"This process will save the formula to a physical button on your cofee machine so you don't always need a mobile device connected\",\n            )}\n            <br />\n            <br />\n\n            <Banner\n              kind=\"informative\"\n              title={t('Notice')}\n              description={t(\n                \"The button order might not be the same physically, right after clicking saved, the button will blink to indicate which button it is in real life\"\n              )}\n              action={{\n                label: \"Learn more\",\n                onPress: () => {\n                  window.open(\"https://www.google.com\");\n                },\n              }}\n            />\n\n\n          </Body>\n\n          <div className=\"flex h-32 w-full flex-col space-y-4 p-4\">\n            <Tiles space={8} columns={3}>\n              {[1, 2, 3].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Group ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetGroup ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetGroup(index)}\n                  />\n                );\n              })}\n            </Tiles>\n            <Tiles space={8} columns={4}>\n              {[1, 2, 3, 4].map((value, index) => {\n                return (\n                  <Button\n                    key={index}\n                    label={t(`Button ${value}`)}\n                    hierarchy=\"primary\"\n                    kind={index === downloadTargetButton ? \"solid\" : \"outline\"}\n                    onPress={() => setDownloadTargetButton(index)}\n                  />\n                );\n              })}\n            </Tiles>\n          </div>\n        </Modal>\n      )}\n\n      {shareWindow && (\n        <Modal\n          title=\"Share your formula\"\n          onClose={() => setShareWindow(false)}\n          primaryAction={{\n            label: \"Copy\",\n            onPress: () => {\n              navigator.clipboard.writeText(shareToken).then(() => {\n                console.log(\"Share token copied to clipboard.\");\n              }, (err) => {\n                console.error(\"Could not copy share token to clipboard: \", err);\n              });\n              setShareWindow(false)\n            },\n          }}\n          secondaryAction={{\n            label: \"Cancel\",\n            onPress: () => setShareWindow(false),\n          }}\n        >\n          <Banner\n            kind={formulas[selectedFormulaId]?.isShared == true ? \"positive\" : \"informative\"}\n            title={formulas[selectedFormulaId].isShared ? t('Shared to public') : t(\"Do you want to share this to public ?\")}\n            description={\n              formulas[selectedFormulaId]?.isShared ==  true ? t(\n                \"This formula is already shared, people can search for it using the formula name you choose.\"\n              ) : t(\"If you share this formula, people can try it out also. They will get a copy of this formula.\")}\n            action={{\n              label: formulas[selectedFormulaId]?.isShared == true ? t(\"Hide\") : t(\"Share\"),\n              onPress: () => {\n                setFormulas(produce(formulas, draft => {\n                  draft[selectedFormulaId].isShared = !draft[selectedFormulaId].isShared\n                }))\n\n              },\n            }}\n          />\n          {/* <CheckboxField\n            label=\"Share this to community\"\n            name=\"terms-and-conditions\"\n            value={formulas[selectedFormulaId].isShared}\n            onChange={(state: boolean) => {\n              setFormulas(produce(formulas, draft => {\n                draft[selectedFormulaId].isShared = state\n              }))\n            }}\n          /> */}\n\n          <div className=\"flex justify-center items-center bg-gray-800 text-white p-4 rounded-lg mt-2\">\n            <h1 className=\"text-2xl tracking-[.4em]\">{shareToken}</h1>\n          </div>\n        </Modal>\n      )}\n\n      <div className=\"flex flex-col  items-center space-y-4 p-4 mt-10\">\n        <div\n          className={\n            cn(\n              \"flex h-fit w-96 max-w-[calc(90vw)] flex-col space-y-4 rounded-xl border p-4 shadow-xl\",\n              formulas[selectedFormulaId]?.isShared == true ? \"border-green-700\" : \"border-black\"\n\n            )\n          }\n        >\n          <SelectField\n            value={formulas[selectedFormulaId]?.category || \"\"}\n            onChange={(e) => {\n              setFormulas(produce(formulas, draft => {\n                draft[selectedFormulaId].category = e || \"\"\n              }))\n            }}\n            name=\"category\"\n            label=\"Which category best fit this formula ?\"\n            placeholder=\"Select a color\"\n            options={[\n              {\n                value: \"Espresso\",\n                label: \"Espresso\",\n                kind: \"two-line\",\n                secondLine: \"Coffee in general\",\n              },\n              {\n                value: \"Tea-presso\",\n                label: \"Tea-pressor\",\n                kind: \"two-line\",\n                secondLine: \"Unique formula to extract green tea\",\n              },\n              {\n                value: \"Pour over\",\n                label: \"Pour over\",\n                kind: \"two-line\",\n                secondLine: \"Pour over coffee or brewing related\",\n              },\n            ]}\n          />\n\n          <Separator />\n          <div className=\"flex items-center w-full\">\n            <div className=\"flex-grow \">\n              <TextField\n                value={formulas[selectedFormulaId]?.title}\n                onChange={(e: string) => {\n                  setFormulas(\n                    produce(formulas, (draft) => {\n                      console.log(\"Formulas\", formulas, selectedFormulaId);\n                      draft[selectedFormulaId].title = e;\n                    }),\n                  );\n                }}\n                label={t(\"Formula\")}\n                placeholder=\"Untitled formula\"\n              />\n\n            </div>\n            <button className=\"ml-2 h-11 w-11  rounded-xl mt-6 ring-1 ring-black \"\n              style={{\n                backgroundColor: formulas[selectedFormulaId]?.color || \"#000000\"\n              }}\n              onClick={() => {\n                setColorModal(true)\n              }}\n            ></button>\n          </div>\n\n          {/* {listDrinkType()} */}\n\n          <div className=\"flex flex-row items-center justify-between space-x-1 text-white\">\n            {running === true ? (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-orange-400 to-red-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  cancelFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaStop />\n                <h1>Stop</h1>\n              </div>\n            ) : (\n              <div\n                className={`flex h-12 w-2/5 cursor-pointer select-none flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-400 to-emerald-400 p-4 text-white hover:border-blue-500`}\n                onClick={() => {\n                  // console.log(\"play\");\n                  registerFormulaClick(selectedFormulaId);\n                }}\n              >\n                <FaPlay />\n                <h1>{t(\"Run\")}</h1>\n              </div>\n            )}\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-purple-800 via-violet-900 to-purple-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"download\");\n                // open a bento model\n                setDownloadWindow(true);\n              }}\n            >\n              <FaDownload />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-blue-500 to-blue-600 p-4 hover:border-blue-500`}\n              onClick={async () => {\n\n                const data = {\n                  formulas: formulas[selectedFormulaId],\n                  timestamp: Date.now()\n                }\n                const request = await fetch('https://api.anatalab.com/gateway/rosario/create_token', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                })\n\n                const response = await request.json()\n                console.log('Share token response', response)\n\n                const assignedToken = response.token\n                setShareToken(assignedToken)\n                setShareWindow(true);\n              }}\n            >\n              <FaShareAlt />\n            </div>\n\n            <div\n              className={`flex h-12 w-1/5 cursor-pointer flex-row items-center justify-evenly rounded-xl border bg-white bg-gradient-to-r from-red-500 to-red-800 p-4 hover:border-blue-500`}\n              onClick={() => {\n                console.log(\"delete\");\n                setSelectedPage(\"Formula\");\n                registerSelectedFormulaId(\"\");\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    // return draft.filter(item => item?.id !== selectedFormulaId)\n                    delete formulas[selectedFormulaId];\n                  }),\n                );\n\n                router.push(\"/\");\n              }}\n            >\n              <FaWindowClose />\n            </div>\n          </div>\n\n          <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Pressure build-up time\")}\n              value={formulas[selectedFormulaId]?.buildupDuration || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].buildupDuration = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={10}\n            />\n          </div>\n          <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Weight compensation (gram)\")}\n              value={formulas[selectedFormulaId]?.lossyWeight || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].lossyWeight = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={100}\n            />\n          </div>\n          {/* <div className=\"\">\n            <SliderField\n              type=\"single\"\n              name=\"delay\"\n              label={t(\"Maximum extraction time (s)\")}\n              value={formulas[selectedFormulaId]?.maximumDuration || 0}\n              onChange={(e: number) => {\n                setFormulas(\n                  produce(formulas, (draft) => {\n                    console.log(\"Formulas\", formulas, selectedFormulaId);\n                    if (draft[selectedFormulaId]) {\n                      draft[selectedFormulaId].maximumDuration = e;\n                    }\n                    return draft\n                  }),\n                );\n              }}\n              minValue={0}\n              maxValue={100}\n            />\n          </div> */}\n\n\n        </div>\n        <Separator />\n        <div className=\" mix-w-80 flex flex-col items-center justify-center py-3 \">\n          <DragDropContext\n            onDragEnd={handleDragAndDrop}\n            onBeforeDragStart={() => {\n              console.log(\"onBeforeDragStart\");\n            }}\n            onDragStart={() => {\n              console.log(\"onDragStart\");\n            }}\n            onDragUpdate={() => {\n              console.log(\"onDragUpdate\");\n            }}\n          >\n            <div className=\"flex w-full flex-row\">\n              <Droppable droppableId=\"ROOT\">\n                {(provided) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"mx-auto flex w-full flex-col items-center justify-between space-y-4\"\n                  >\n                    {(formulas[selectedFormulaId]?.steps || [])?.map(\n                      (item, idx) => {\n                        console.log(\"render\", { item, idx });\n                        return (\n                          winReady && (\n                            <Draggable\n                              draggableId={item?.id}\n                              key={item?.id}\n                              index={idx}\n                            >\n                              {(provided) => (\n                                <div\n                                  className=\"\"\n                                  {...provided.dragHandleProps}\n                                  {...provided.draggableProps}\n                                  ref={provided.innerRef}\n                                >\n                                  <NewStepCard\n                                    onDelete={() => handleDeleteStep(item?.id)}\n                                    index={idx}\n                                  // onChange={(params) =>\n                                  //   handleChange(item?.id, params)\n                                  // }\n                                  />\n                                </div>\n                              )}\n                            </Draggable>\n                          )\n                        );\n                      },\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n          <button\n            className=\"my-4 flex h-16 w-80 cursor-pointer flex-row items-center  justify-center space-x-4 rounded-xl border bg-blue-100\"\n            onClick={handleAddStep}\n          >\n            <AiFillPlusCircle color=\"#1180EF\" size={30} />\n            <p className=\"text-lg font-bold text-[#1180EF]\">{t(\"Add Step\")}</p>\n          </button>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Detail;\n"],"names":["window","__NEXT_P","push","Separator","React","ref","className","orientation","decorative","props","SeparatorPrimitive","cn","displayName","ActionRune","index","formulas","isOpen","setIsOpen","useState","setFormulas","selectedFormulaId","useDeviceContext","console","log","steps","action","setAction","actionType","step","t","useTranslation","useEffect","h1","onClick","Modal","size","title","onClose","primaryAction","label","onPress","e","produce","draft","target","EnumAction","Grind","targetType","EnumTarget","Weight","Extract","Rest","Time","Profile","_action","segments","profilingType","EnumProfileType","Power","PourOver","secondaryAction","Tiles","space","columns","Button","hierarchy","kind","icon","GiManualMeatGrinder","isDisabled","IoWaterSharp","FaClock","FaChartArea","LiaFillDripSolid","RGB","TbColorFilter","GrinderSkipRune","value","onChange","useEffectOnce","skippable","setSkippable","autoFocus","Stack","IoMdSkipForward","FaRegClock","Banner","description","TextRune","text","split","map","word","PopoverPrimitive","PopoverContent","align","sideOffset","TimeRune","subIndex","current","setCurrent","formulaFeedbacks","active","setActive","time","setTime","duration","timeout","useRef","updated","clearTimeout","setTimeout","toFixed","Columns","Column","width","SliderField","type","name","minValue","maxValue","NumberField","generateDatapoints","sensor","undefined","dps","totalTime","forEach","segment","startTime","previousValue","smooth","Pressure","timestamp","pressure","min","max","Flowrate","flowrate","power","interimValue","Math","round","RenderedSegment","length","renderedSegments","idx","div","SegmentModeRune","ProfileValueRune","ul","FaPlus","color","floor","random","FaMinus","pop","isUpward","MagicLine","dataPoints","setDataPoints","fbstore","actionUpdate","warn","store","dpts","dpt","s","input","error","attrMap","LineChart","height","dataKey","categories","hideLegend","hideXAxis","hideYAxis","data","disableAnimation","unit","setValue","onBlur","ProfileRune","profileType","setProfileType","IngredientRune","grinderSettings","ingredient","setIngridient","useRouter","Inline","grinder","PumpRune","setPower","open","WeightRune","weight","setWeight","stepAmount","ColorRune","colorModal","setColorModal","async","CirclePicker","hex","start","stop","button","style","backgroundColor","NewStepCard","onDelete","motion","MdOutlineClear","canSkip","state","pumpPower","valveState","router","downloadTargetGroup","setDownloadTargetGroup","query","slug","downloadTargetButton","setDownloadTargetButton","downloadWindow","setDownloadWindow","shareWindow","setShareWindow","loading","setLoading","running","setRunning","shareToken","setShareToken","registerSelectedFormulaId","setSelectedPage","registerFormulaClick","cancelFormulaClick","progressReport","winReady","setwinReady","timeoutRef","queryDevice","command","buttonId","groupId","lang","useSelectedLanguage","Layout","Head","downloadFormula","formulaId","Body","br","navigator","clipboard","writeText","then","err","isShared","SelectField","category","placeholder","options","secondLine","TextField","FaStop","FaPlay","FaDownload","Date","now","request","fetch","method","headers","body","JSON","stringify","response","json","assignedToken","token","FaShareAlt","FaWindowClose","buildupDuration","lossyWeight","DragDropContext","onDragEnd","result","provided","destination","formula","reorderedItem","splice","source","onBeforeDragStart","onDragStart","onDragUpdate","Droppable","droppableId","droppableProps","innerRef","item","Draggable","draggableId","id","dragHandleProps","draggableProps","findIndex","handleDeleteStep","uuid","AiFillPlusCircle","p"],"sourceRoot":""}